
project_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a8  080040a8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080040a8  080040a8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040a8  080040a8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080040b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000088  08004138  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08004138  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b95  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8c  00000000  00000000  00032c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  000356d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  000364b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197ff  00000000  00000000  00037158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011796  00000000  00000000  00050957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b03b  00000000  00000000  000620ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed128  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003710  00000000  00000000  000ed17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  000f088c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08004064 	.word	0x08004064

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08004064 	.word	0x08004064

0800014c <isButtonPressed>:
int KeyReg3[NUM_BUTTON]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};

int TimeOutForKeyPress[NUM_BUTTON] =  {200,200,200,200};
int button_flag[NUM_BUTTON] = {0,0,0,0};

int isButtonPressed(int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[num] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[num] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000a4 	.word	0x200000a4

08000180 <subKeyProcess>:

void subKeyProcess(int num){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[num]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000a4 	.word	0x200000a4

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e06d      	b.n	8000288 <getKeyInput+0xe8>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a3a      	ldr	r2, [pc, #232]	; (8000298 <getKeyInput+0xf8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4939      	ldr	r1, [pc, #228]	; (800029c <getKeyInput+0xfc>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a38      	ldr	r2, [pc, #224]	; (80002a0 <getKeyInput+0x100>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4934      	ldr	r1, [pc, #208]	; (8000298 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(port_mode[i], pin_mode[i]);
 80001cc:	4a35      	ldr	r2, [pc, #212]	; (80002a4 <getKeyInput+0x104>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4934      	ldr	r1, [pc, #208]	; (80002a8 <getKeyInput+0x108>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f001 fe46 	bl	8001e70 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a2d      	ldr	r2, [pc, #180]	; (80002a0 <getKeyInput+0x100>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){ //avoid noise
 80001f0:	4a29      	ldr	r2, [pc, #164]	; (8000298 <getKeyInput+0xf8>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4929      	ldr	r1, [pc, #164]	; (80002a0 <getKeyInput+0x100>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d13e      	bne.n	8000282 <getKeyInput+0xe2>
 8000204:	4a24      	ldr	r2, [pc, #144]	; (8000298 <getKeyInput+0xf8>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4923      	ldr	r1, [pc, #140]	; (800029c <getKeyInput+0xfc>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d134      	bne.n	8000282 <getKeyInput+0xe2>
			if (KeyReg2[i] != KeyReg3[i]){ //change state
 8000218:	4a20      	ldr	r2, [pc, #128]	; (800029c <getKeyInput+0xfc>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4922      	ldr	r1, [pc, #136]	; (80002ac <getKeyInput+0x10c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d016      	beq.n	800025a <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 800022c:	4a1b      	ldr	r2, [pc, #108]	; (800029c <getKeyInput+0xfc>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <getKeyInput+0x10c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 800023c:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <getKeyInput+0x10c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d11c      	bne.n	8000282 <getKeyInput+0xe2>
					TimeOutForKeyPress[i] = 200;
 8000248:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <getKeyInput+0x110>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	21c8      	movs	r1, #200	; 0xc8
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f7ff ff94 	bl	8000180 <subKeyProcess>
 8000258:	e013      	b.n	8000282 <getKeyInput+0xe2>
				}
			}

			else{ //press without release
				TimeOutForKeyPress[i]--;
 800025a:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <getKeyInput+0x110>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	4912      	ldr	r1, [pc, #72]	; (80002b0 <getKeyInput+0x110>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 800026c:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <getKeyInput+0x110>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d104      	bne.n	8000282 <getKeyInput+0xe2>
					KeyReg3[i] = NORMAL_STATE;
 8000278:	4a0c      	ldr	r2, [pc, #48]	; (80002ac <getKeyInput+0x10c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2101      	movs	r1, #1
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<NUM_BUTTON; i++){
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3301      	adds	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b03      	cmp	r3, #3
 800028c:	dd8e      	ble.n	80001ac <getKeyInput+0xc>
				}

			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000028 	.word	0x20000028
 800029c:	20000038 	.word	0x20000038
 80002a0:	20000018 	.word	0x20000018
 80002a4:	20000008 	.word	0x20000008
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000048 	.word	0x20000048
 80002b0:	20000058 	.word	0x20000058

080002b4 <fsm_manual_run>:
 *      Author: dinhq
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	switch(led_status){
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <fsm_manual_run+0x238>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b0e      	cmp	r3, #14
 80002be:	d053      	beq.n	8000368 <fsm_manual_run+0xb4>
 80002c0:	2b0e      	cmp	r3, #14
 80002c2:	f300 8100 	bgt.w	80004c6 <fsm_manual_run+0x212>
 80002c6:	2b0c      	cmp	r3, #12
 80002c8:	d003      	beq.n	80002d2 <fsm_manual_run+0x1e>
 80002ca:	2b0d      	cmp	r3, #13
 80002cc:	f000 8098 	beq.w	8000400 <fsm_manual_run+0x14c>
			y_val=r_val-g_val;
		}
		break;

	default:
		break;
 80002d0:	e0f9      	b.n	80004c6 <fsm_manual_run+0x212>
		if (timer5_flag == 1){
 80002d2:	4b87      	ldr	r3, [pc, #540]	; (80004f0 <fsm_manual_run+0x23c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d110      	bne.n	80002fc <fsm_manual_run+0x48>
			setTimer5(25);
 80002da:	2019      	movs	r0, #25
 80002dc:	f000 ffaa 	bl	8001234 <setTimer5>
			if (toogleFlag == 0){
 80002e0:	4b84      	ldr	r3, [pc, #528]	; (80004f4 <fsm_manual_run+0x240>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d107      	bne.n	80002f8 <fsm_manual_run+0x44>
				toogleFlag = 1;
 80002e8:	4b82      	ldr	r3, [pc, #520]	; (80004f4 <fsm_manual_run+0x240>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	601a      	str	r2, [r3, #0]
				onRED1();
 80002ee:	f000 fd01 	bl	8000cf4 <onRED1>
				onRED2();
 80002f2:	f000 fd33 	bl	8000d5c <onRED2>
 80002f6:	e001      	b.n	80002fc <fsm_manual_run+0x48>
				offALL();
 80002f8:	f000 fd40 	bl	8000d7c <offALL>
		if (isButtonPressed(1) == 1){
 80002fc:	2001      	movs	r0, #1
 80002fe:	f7ff ff25 	bl	800014c <isButtonPressed>
 8000302:	4603      	mov	r3, r0
 8000304:	2b01      	cmp	r3, #1
 8000306:	d110      	bne.n	800032a <fsm_manual_run+0x76>
			r_inc++;
 8000308:	4b7b      	ldr	r3, [pc, #492]	; (80004f8 <fsm_manual_run+0x244>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3301      	adds	r3, #1
 800030e:	4a7a      	ldr	r2, [pc, #488]	; (80004f8 <fsm_manual_run+0x244>)
 8000310:	6013      	str	r3, [r2, #0]
			timerRoad1++;
 8000312:	4b7a      	ldr	r3, [pc, #488]	; (80004fc <fsm_manual_run+0x248>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	3301      	adds	r3, #1
 8000318:	4a78      	ldr	r2, [pc, #480]	; (80004fc <fsm_manual_run+0x248>)
 800031a:	6013      	str	r3, [r2, #0]
			if (r_inc >= 100) r_inc=2;
 800031c:	4b76      	ldr	r3, [pc, #472]	; (80004f8 <fsm_manual_run+0x244>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b63      	cmp	r3, #99	; 0x63
 8000322:	dd02      	ble.n	800032a <fsm_manual_run+0x76>
 8000324:	4b74      	ldr	r3, [pc, #464]	; (80004f8 <fsm_manual_run+0x244>)
 8000326:	2202      	movs	r2, #2
 8000328:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 800032a:	2000      	movs	r0, #0
 800032c:	f7ff ff0e 	bl	800014c <isButtonPressed>
 8000330:	4603      	mov	r3, r0
 8000332:	2b01      	cmp	r3, #1
 8000334:	d10c      	bne.n	8000350 <fsm_manual_run+0x9c>
			setTimer5(1);
 8000336:	2001      	movs	r0, #1
 8000338:	f000 ff7c 	bl	8001234 <setTimer5>
			led_status = YELLOW_MAN;
 800033c:	4b6b      	ldr	r3, [pc, #428]	; (80004ec <fsm_manual_run+0x238>)
 800033e:	220e      	movs	r2, #14
 8000340:	601a      	str	r2, [r3, #0]
			timerRoad1 = y_val;
 8000342:	4b6f      	ldr	r3, [pc, #444]	; (8000500 <fsm_manual_run+0x24c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a6d      	ldr	r2, [pc, #436]	; (80004fc <fsm_manual_run+0x248>)
 8000348:	6013      	str	r3, [r2, #0]
			timerRoad2 = 3;
 800034a:	4b6e      	ldr	r3, [pc, #440]	; (8000504 <fsm_manual_run+0x250>)
 800034c:	2203      	movs	r2, #3
 800034e:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1){
 8000350:	2002      	movs	r0, #2
 8000352:	f7ff fefb 	bl	800014c <isButtonPressed>
 8000356:	4603      	mov	r3, r0
 8000358:	2b01      	cmp	r3, #1
 800035a:	f040 80b6 	bne.w	80004ca <fsm_manual_run+0x216>
			r_val=r_inc;
 800035e:	4b66      	ldr	r3, [pc, #408]	; (80004f8 <fsm_manual_run+0x244>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a69      	ldr	r2, [pc, #420]	; (8000508 <fsm_manual_run+0x254>)
 8000364:	6013      	str	r3, [r2, #0]
		break;
 8000366:	e0b0      	b.n	80004ca <fsm_manual_run+0x216>
		if (timer5_flag == 1){
 8000368:	4b61      	ldr	r3, [pc, #388]	; (80004f0 <fsm_manual_run+0x23c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d110      	bne.n	8000392 <fsm_manual_run+0xde>
			setTimer5(25);
 8000370:	2019      	movs	r0, #25
 8000372:	f000 ff5f 	bl	8001234 <setTimer5>
			if (toogleFlag == 0){
 8000376:	4b5f      	ldr	r3, [pc, #380]	; (80004f4 <fsm_manual_run+0x240>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d107      	bne.n	800038e <fsm_manual_run+0xda>
				toogleFlag = 1;
 800037e:	4b5d      	ldr	r3, [pc, #372]	; (80004f4 <fsm_manual_run+0x240>)
 8000380:	2201      	movs	r2, #1
 8000382:	601a      	str	r2, [r3, #0]
				onYELLOW1();
 8000384:	f000 fca2 	bl	8000ccc <onYELLOW1>
				onYELLOW2();
 8000388:	f000 fcd8 	bl	8000d3c <onYELLOW2>
 800038c:	e001      	b.n	8000392 <fsm_manual_run+0xde>
				offALL();
 800038e:	f000 fcf5 	bl	8000d7c <offALL>
		if (isButtonPressed(1) == 1){
 8000392:	2001      	movs	r0, #1
 8000394:	f7ff feda 	bl	800014c <isButtonPressed>
 8000398:	4603      	mov	r3, r0
 800039a:	2b01      	cmp	r3, #1
 800039c:	d112      	bne.n	80003c4 <fsm_manual_run+0x110>
			y_inc++;
 800039e:	4b5b      	ldr	r3, [pc, #364]	; (800050c <fsm_manual_run+0x258>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3301      	adds	r3, #1
 80003a4:	4a59      	ldr	r2, [pc, #356]	; (800050c <fsm_manual_run+0x258>)
 80003a6:	6013      	str	r3, [r2, #0]
			timerRoad1++;
 80003a8:	4b54      	ldr	r3, [pc, #336]	; (80004fc <fsm_manual_run+0x248>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	4a53      	ldr	r2, [pc, #332]	; (80004fc <fsm_manual_run+0x248>)
 80003b0:	6013      	str	r3, [r2, #0]
			if (y_inc >= r_val) y_inc=1;
 80003b2:	4b56      	ldr	r3, [pc, #344]	; (800050c <fsm_manual_run+0x258>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4b54      	ldr	r3, [pc, #336]	; (8000508 <fsm_manual_run+0x254>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	db02      	blt.n	80003c4 <fsm_manual_run+0x110>
 80003be:	4b53      	ldr	r3, [pc, #332]	; (800050c <fsm_manual_run+0x258>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 80003c4:	2000      	movs	r0, #0
 80003c6:	f7ff fec1 	bl	800014c <isButtonPressed>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d10c      	bne.n	80003ea <fsm_manual_run+0x136>
			setTimer5(1);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f000 ff2f 	bl	8001234 <setTimer5>
			led_status = GREEN_MAN;
 80003d6:	4b45      	ldr	r3, [pc, #276]	; (80004ec <fsm_manual_run+0x238>)
 80003d8:	220d      	movs	r2, #13
 80003da:	601a      	str	r2, [r3, #0]
			timerRoad1 = g_val;
 80003dc:	4b4c      	ldr	r3, [pc, #304]	; (8000510 <fsm_manual_run+0x25c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a46      	ldr	r2, [pc, #280]	; (80004fc <fsm_manual_run+0x248>)
 80003e2:	6013      	str	r3, [r2, #0]
			timerRoad2 = 4;
 80003e4:	4b47      	ldr	r3, [pc, #284]	; (8000504 <fsm_manual_run+0x250>)
 80003e6:	2204      	movs	r2, #4
 80003e8:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1){
 80003ea:	2002      	movs	r0, #2
 80003ec:	f7ff feae 	bl	800014c <isButtonPressed>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d16b      	bne.n	80004ce <fsm_manual_run+0x21a>
			y_val=y_inc;
 80003f6:	4b45      	ldr	r3, [pc, #276]	; (800050c <fsm_manual_run+0x258>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a41      	ldr	r2, [pc, #260]	; (8000500 <fsm_manual_run+0x24c>)
 80003fc:	6013      	str	r3, [r2, #0]
		break;
 80003fe:	e066      	b.n	80004ce <fsm_manual_run+0x21a>
		if (timer5_flag == 1){
 8000400:	4b3b      	ldr	r3, [pc, #236]	; (80004f0 <fsm_manual_run+0x23c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d110      	bne.n	800042a <fsm_manual_run+0x176>
			setTimer5(25);
 8000408:	2019      	movs	r0, #25
 800040a:	f000 ff13 	bl	8001234 <setTimer5>
			if (toogleFlag == 0){
 800040e:	4b39      	ldr	r3, [pc, #228]	; (80004f4 <fsm_manual_run+0x240>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d107      	bne.n	8000426 <fsm_manual_run+0x172>
				toogleFlag = 1;
 8000416:	4b37      	ldr	r3, [pc, #220]	; (80004f4 <fsm_manual_run+0x240>)
 8000418:	2201      	movs	r2, #1
 800041a:	601a      	str	r2, [r3, #0]
				onGREEN1();
 800041c:	f000 fc42 	bl	8000ca4 <onGREEN1>
				onGREEN2();
 8000420:	f000 fc7c 	bl	8000d1c <onGREEN2>
 8000424:	e001      	b.n	800042a <fsm_manual_run+0x176>
				offALL();
 8000426:	f000 fca9 	bl	8000d7c <offALL>
		if (isButtonPressed(1) == 1){
 800042a:	2001      	movs	r0, #1
 800042c:	f7ff fe8e 	bl	800014c <isButtonPressed>
 8000430:	4603      	mov	r3, r0
 8000432:	2b01      	cmp	r3, #1
 8000434:	d112      	bne.n	800045c <fsm_manual_run+0x1a8>
			g_inc++;
 8000436:	4b37      	ldr	r3, [pc, #220]	; (8000514 <fsm_manual_run+0x260>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	3301      	adds	r3, #1
 800043c:	4a35      	ldr	r2, [pc, #212]	; (8000514 <fsm_manual_run+0x260>)
 800043e:	6013      	str	r3, [r2, #0]
			timerRoad1++;
 8000440:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <fsm_manual_run+0x248>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	4a2d      	ldr	r2, [pc, #180]	; (80004fc <fsm_manual_run+0x248>)
 8000448:	6013      	str	r3, [r2, #0]
			if (g_inc >= r_val) g_inc=1;
 800044a:	4b32      	ldr	r3, [pc, #200]	; (8000514 <fsm_manual_run+0x260>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	4b2e      	ldr	r3, [pc, #184]	; (8000508 <fsm_manual_run+0x254>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	429a      	cmp	r2, r3
 8000454:	db02      	blt.n	800045c <fsm_manual_run+0x1a8>
 8000456:	4b2f      	ldr	r3, [pc, #188]	; (8000514 <fsm_manual_run+0x260>)
 8000458:	2201      	movs	r2, #1
 800045a:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 800045c:	2000      	movs	r0, #0
 800045e:	f7ff fe75 	bl	800014c <isButtonPressed>
 8000462:	4603      	mov	r3, r0
 8000464:	2b01      	cmp	r3, #1
 8000466:	d11c      	bne.n	80004a2 <fsm_manual_run+0x1ee>
			led_status = RED_GREEN;
 8000468:	4b20      	ldr	r3, [pc, #128]	; (80004ec <fsm_manual_run+0x238>)
 800046a:	2201      	movs	r2, #1
 800046c:	601a      	str	r2, [r3, #0]
			g_val = r_val-y_val;
 800046e:	4b26      	ldr	r3, [pc, #152]	; (8000508 <fsm_manual_run+0x254>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	4b23      	ldr	r3, [pc, #140]	; (8000500 <fsm_manual_run+0x24c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	4a25      	ldr	r2, [pc, #148]	; (8000510 <fsm_manual_run+0x25c>)
 800047a:	6013      	str	r3, [r2, #0]
			timerRoad1 = r_val;
 800047c:	4b22      	ldr	r3, [pc, #136]	; (8000508 <fsm_manual_run+0x254>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a1e      	ldr	r2, [pc, #120]	; (80004fc <fsm_manual_run+0x248>)
 8000482:	6013      	str	r3, [r2, #0]
			timerRoad2 = g_val;
 8000484:	4b22      	ldr	r3, [pc, #136]	; (8000510 <fsm_manual_run+0x25c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a1e      	ldr	r2, [pc, #120]	; (8000504 <fsm_manual_run+0x250>)
 800048a:	6013      	str	r3, [r2, #0]
			setTimer1(g_val*100);
 800048c:	4b20      	ldr	r3, [pc, #128]	; (8000510 <fsm_manual_run+0x25c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2264      	movs	r2, #100	; 0x64
 8000492:	fb02 f303 	mul.w	r3, r2, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f000 fea4 	bl	80011e4 <setTimer1>
			setTimer2(100);
 800049c:	2064      	movs	r0, #100	; 0x64
 800049e:	f000 feb5 	bl	800120c <setTimer2>
		if (isButtonPressed(2) == 1){
 80004a2:	2002      	movs	r0, #2
 80004a4:	f7ff fe52 	bl	800014c <isButtonPressed>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d111      	bne.n	80004d2 <fsm_manual_run+0x21e>
			g_val=g_inc;
 80004ae:	4b19      	ldr	r3, [pc, #100]	; (8000514 <fsm_manual_run+0x260>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a17      	ldr	r2, [pc, #92]	; (8000510 <fsm_manual_run+0x25c>)
 80004b4:	6013      	str	r3, [r2, #0]
			y_val=r_val-g_val;
 80004b6:	4b14      	ldr	r3, [pc, #80]	; (8000508 <fsm_manual_run+0x254>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <fsm_manual_run+0x25c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	1ad3      	subs	r3, r2, r3
 80004c0:	4a0f      	ldr	r2, [pc, #60]	; (8000500 <fsm_manual_run+0x24c>)
 80004c2:	6013      	str	r3, [r2, #0]
		break;
 80004c4:	e005      	b.n	80004d2 <fsm_manual_run+0x21e>
		break;
 80004c6:	bf00      	nop
 80004c8:	e004      	b.n	80004d4 <fsm_manual_run+0x220>
		break;
 80004ca:	bf00      	nop
 80004cc:	e002      	b.n	80004d4 <fsm_manual_run+0x220>
		break;
 80004ce:	bf00      	nop
 80004d0:	e000      	b.n	80004d4 <fsm_manual_run+0x220>
		break;
 80004d2:	bf00      	nop
	}
	if (isButtonPressed(2) == 1){
 80004d4:	2002      	movs	r0, #2
 80004d6:	f7ff fe39 	bl	800014c <isButtonPressed>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d103      	bne.n	80004e8 <fsm_manual_run+0x234>
		timerRoad1 = r_val;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <fsm_manual_run+0x254>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a05      	ldr	r2, [pc, #20]	; (80004fc <fsm_manual_run+0x248>)
 80004e6:	6013      	str	r3, [r2, #0]
	}
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200000b4 	.word	0x200000b4
 80004f0:	200000f8 	.word	0x200000f8
 80004f4:	200000cc 	.word	0x200000cc
 80004f8:	200000c0 	.word	0x200000c0
 80004fc:	200000b8 	.word	0x200000b8
 8000500:	2000006c 	.word	0x2000006c
 8000504:	200000bc 	.word	0x200000bc
 8000508:	20000068 	.word	0x20000068
 800050c:	200000c8 	.word	0x200000c8
 8000510:	20000070 	.word	0x20000070
 8000514:	200000c4 	.word	0x200000c4

08000518 <fsm_traffic_light>:

#include "fsm_traffic_light.h"

// Allowed signal

void fsm_traffic_light(){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	switch(led_status){
 800051c:	4b99      	ldr	r3, [pc, #612]	; (8000784 <fsm_traffic_light+0x26c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b04      	cmp	r3, #4
 8000522:	f200 80f3 	bhi.w	800070c <fsm_traffic_light+0x1f4>
 8000526:	a201      	add	r2, pc, #4	; (adr r2, 800052c <fsm_traffic_light+0x14>)
 8000528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052c:	08000541 	.word	0x08000541
 8000530:	08000563 	.word	0x08000563
 8000534:	080005c7 	.word	0x080005c7
 8000538:	08000639 	.word	0x08000639
 800053c:	0800069b 	.word	0x0800069b
	case INIT:
		//TODO
		offALL();
 8000540:	f000 fc1c 	bl	8000d7c <offALL>

		//INIT state
		led_status = RED_GREEN;
 8000544:	4b8f      	ldr	r3, [pc, #572]	; (8000784 <fsm_traffic_light+0x26c>)
 8000546:	2201      	movs	r2, #1
 8000548:	601a      	str	r2, [r3, #0]
		setTimer1(g_val*100);
 800054a:	4b8f      	ldr	r3, [pc, #572]	; (8000788 <fsm_traffic_light+0x270>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2264      	movs	r2, #100	; 0x64
 8000550:	fb02 f303 	mul.w	r3, r2, r3
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fe45 	bl	80011e4 <setTimer1>
		setTimer2(100);
 800055a:	2064      	movs	r0, #100	; 0x64
 800055c:	f000 fe56 	bl	800120c <setTimer2>
		break;
 8000560:	e0dd      	b.n	800071e <fsm_traffic_light+0x206>
	case RED_GREEN:
		//TODO
		if (allowed){
 8000562:	4b8a      	ldr	r3, [pc, #552]	; (800078c <fsm_traffic_light+0x274>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d003      	beq.n	8000572 <fsm_traffic_light+0x5a>
			onRED1();
 800056a:	f000 fbc3 	bl	8000cf4 <onRED1>
			onGREEN2();
 800056e:	f000 fbd5 	bl	8000d1c <onGREEN2>
		}

		//decrement of counter of each road
		if (timer2_flag == 1){
 8000572:	4b87      	ldr	r3, [pc, #540]	; (8000790 <fsm_traffic_light+0x278>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d114      	bne.n	80005a4 <fsm_traffic_light+0x8c>
			setTimer2(100);
 800057a:	2064      	movs	r0, #100	; 0x64
 800057c:	f000 fe46 	bl	800120c <setTimer2>
			timerRoad1--;
 8000580:	4b84      	ldr	r3, [pc, #528]	; (8000794 <fsm_traffic_light+0x27c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3b01      	subs	r3, #1
 8000586:	4a83      	ldr	r2, [pc, #524]	; (8000794 <fsm_traffic_light+0x27c>)
 8000588:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 800058a:	4b83      	ldr	r3, [pc, #524]	; (8000798 <fsm_traffic_light+0x280>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3b01      	subs	r3, #1
 8000590:	4a81      	ldr	r2, [pc, #516]	; (8000798 <fsm_traffic_light+0x280>)
 8000592:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = y_val;
 8000594:	4b80      	ldr	r3, [pc, #512]	; (8000798 <fsm_traffic_light+0x280>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	dc03      	bgt.n	80005a4 <fsm_traffic_light+0x8c>
 800059c:	4b7f      	ldr	r3, [pc, #508]	; (800079c <fsm_traffic_light+0x284>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a7d      	ldr	r2, [pc, #500]	; (8000798 <fsm_traffic_light+0x280>)
 80005a2:	6013      	str	r3, [r2, #0]
		}

		//update state
		if (timer1_flag == 1){
 80005a4:	4b7e      	ldr	r3, [pc, #504]	; (80007a0 <fsm_traffic_light+0x288>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	f040 80b1 	bne.w	8000710 <fsm_traffic_light+0x1f8>
			setTimer1(y_val*100);
 80005ae:	4b7b      	ldr	r3, [pc, #492]	; (800079c <fsm_traffic_light+0x284>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2264      	movs	r2, #100	; 0x64
 80005b4:	fb02 f303 	mul.w	r3, r2, r3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fe13 	bl	80011e4 <setTimer1>
			led_status = RED_YELLOW;
 80005be:	4b71      	ldr	r3, [pc, #452]	; (8000784 <fsm_traffic_light+0x26c>)
 80005c0:	2202      	movs	r2, #2
 80005c2:	601a      	str	r2, [r3, #0]
		}
		break;
 80005c4:	e0a4      	b.n	8000710 <fsm_traffic_light+0x1f8>
	case RED_YELLOW:
		//TODO
		if (allowed){
 80005c6:	4b71      	ldr	r3, [pc, #452]	; (800078c <fsm_traffic_light+0x274>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d003      	beq.n	80005d6 <fsm_traffic_light+0xbe>
			onRED1();
 80005ce:	f000 fb91 	bl	8000cf4 <onRED1>
			onYELLOW2();
 80005d2:	f000 fbb3 	bl	8000d3c <onYELLOW2>
		}

		//decrement of counter of each road
		if (timer2_flag == 1){
 80005d6:	4b6e      	ldr	r3, [pc, #440]	; (8000790 <fsm_traffic_light+0x278>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d11c      	bne.n	8000618 <fsm_traffic_light+0x100>
			setTimer2(100);
 80005de:	2064      	movs	r0, #100	; 0x64
 80005e0:	f000 fe14 	bl	800120c <setTimer2>
			timerRoad1--;
 80005e4:	4b6b      	ldr	r3, [pc, #428]	; (8000794 <fsm_traffic_light+0x27c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4a6a      	ldr	r2, [pc, #424]	; (8000794 <fsm_traffic_light+0x27c>)
 80005ec:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = g_val;
 80005ee:	4b69      	ldr	r3, [pc, #420]	; (8000794 <fsm_traffic_light+0x27c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	dc03      	bgt.n	80005fe <fsm_traffic_light+0xe6>
 80005f6:	4b64      	ldr	r3, [pc, #400]	; (8000788 <fsm_traffic_light+0x270>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a66      	ldr	r2, [pc, #408]	; (8000794 <fsm_traffic_light+0x27c>)
 80005fc:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 80005fe:	4b66      	ldr	r3, [pc, #408]	; (8000798 <fsm_traffic_light+0x280>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3b01      	subs	r3, #1
 8000604:	4a64      	ldr	r2, [pc, #400]	; (8000798 <fsm_traffic_light+0x280>)
 8000606:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = r_val;
 8000608:	4b63      	ldr	r3, [pc, #396]	; (8000798 <fsm_traffic_light+0x280>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	dc03      	bgt.n	8000618 <fsm_traffic_light+0x100>
 8000610:	4b64      	ldr	r3, [pc, #400]	; (80007a4 <fsm_traffic_light+0x28c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a60      	ldr	r2, [pc, #384]	; (8000798 <fsm_traffic_light+0x280>)
 8000616:	6013      	str	r3, [r2, #0]
		}

		//update state
		if(timer1_flag == 1){
 8000618:	4b61      	ldr	r3, [pc, #388]	; (80007a0 <fsm_traffic_light+0x288>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d179      	bne.n	8000714 <fsm_traffic_light+0x1fc>
			setTimer1(g_val*100);
 8000620:	4b59      	ldr	r3, [pc, #356]	; (8000788 <fsm_traffic_light+0x270>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2264      	movs	r2, #100	; 0x64
 8000626:	fb02 f303 	mul.w	r3, r2, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fdda 	bl	80011e4 <setTimer1>
			led_status = GREEN_RED;
 8000630:	4b54      	ldr	r3, [pc, #336]	; (8000784 <fsm_traffic_light+0x26c>)
 8000632:	2203      	movs	r2, #3
 8000634:	601a      	str	r2, [r3, #0]
		}
		break;
 8000636:	e06d      	b.n	8000714 <fsm_traffic_light+0x1fc>
	case GREEN_RED:
		if (allowed){
 8000638:	4b54      	ldr	r3, [pc, #336]	; (800078c <fsm_traffic_light+0x274>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d003      	beq.n	8000648 <fsm_traffic_light+0x130>
			onGREEN1();
 8000640:	f000 fb30 	bl	8000ca4 <onGREEN1>
			onRED2();
 8000644:	f000 fb8a 	bl	8000d5c <onRED2>
		}

		//decrement of counter of each road
		if (timer2_flag == 1){
 8000648:	4b51      	ldr	r3, [pc, #324]	; (8000790 <fsm_traffic_light+0x278>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d114      	bne.n	800067a <fsm_traffic_light+0x162>
			setTimer2(100);
 8000650:	2064      	movs	r0, #100	; 0x64
 8000652:	f000 fddb 	bl	800120c <setTimer2>
			timerRoad1--;
 8000656:	4b4f      	ldr	r3, [pc, #316]	; (8000794 <fsm_traffic_light+0x27c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3b01      	subs	r3, #1
 800065c:	4a4d      	ldr	r2, [pc, #308]	; (8000794 <fsm_traffic_light+0x27c>)
 800065e:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = y_val;
 8000660:	4b4c      	ldr	r3, [pc, #304]	; (8000794 <fsm_traffic_light+0x27c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	dc03      	bgt.n	8000670 <fsm_traffic_light+0x158>
 8000668:	4b4c      	ldr	r3, [pc, #304]	; (800079c <fsm_traffic_light+0x284>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a49      	ldr	r2, [pc, #292]	; (8000794 <fsm_traffic_light+0x27c>)
 800066e:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8000670:	4b49      	ldr	r3, [pc, #292]	; (8000798 <fsm_traffic_light+0x280>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3b01      	subs	r3, #1
 8000676:	4a48      	ldr	r2, [pc, #288]	; (8000798 <fsm_traffic_light+0x280>)
 8000678:	6013      	str	r3, [r2, #0]
		}

		//update state
		if(timer1_flag == 1){
 800067a:	4b49      	ldr	r3, [pc, #292]	; (80007a0 <fsm_traffic_light+0x288>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d14a      	bne.n	8000718 <fsm_traffic_light+0x200>
			setTimer1(y_val*100);
 8000682:	4b46      	ldr	r3, [pc, #280]	; (800079c <fsm_traffic_light+0x284>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2264      	movs	r2, #100	; 0x64
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fda9 	bl	80011e4 <setTimer1>
			led_status = YELLOW_RED;
 8000692:	4b3c      	ldr	r3, [pc, #240]	; (8000784 <fsm_traffic_light+0x26c>)
 8000694:	2204      	movs	r2, #4
 8000696:	601a      	str	r2, [r3, #0]
		}
		break;
 8000698:	e03e      	b.n	8000718 <fsm_traffic_light+0x200>
	case YELLOW_RED:
		if (allowed){
 800069a:	4b3c      	ldr	r3, [pc, #240]	; (800078c <fsm_traffic_light+0x274>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d003      	beq.n	80006aa <fsm_traffic_light+0x192>
			onYELLOW1();
 80006a2:	f000 fb13 	bl	8000ccc <onYELLOW1>
			onRED2();
 80006a6:	f000 fb59 	bl	8000d5c <onRED2>
		}

		//decrement of counter of each road
		if (timer2_flag == 1){
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <fsm_traffic_light+0x278>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d11c      	bne.n	80006ec <fsm_traffic_light+0x1d4>
			setTimer2(100);
 80006b2:	2064      	movs	r0, #100	; 0x64
 80006b4:	f000 fdaa 	bl	800120c <setTimer2>
			timerRoad1--;
 80006b8:	4b36      	ldr	r3, [pc, #216]	; (8000794 <fsm_traffic_light+0x27c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3b01      	subs	r3, #1
 80006be:	4a35      	ldr	r2, [pc, #212]	; (8000794 <fsm_traffic_light+0x27c>)
 80006c0:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = r_val;
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <fsm_traffic_light+0x27c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	dc03      	bgt.n	80006d2 <fsm_traffic_light+0x1ba>
 80006ca:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <fsm_traffic_light+0x28c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a31      	ldr	r2, [pc, #196]	; (8000794 <fsm_traffic_light+0x27c>)
 80006d0:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <fsm_traffic_light+0x280>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a2f      	ldr	r2, [pc, #188]	; (8000798 <fsm_traffic_light+0x280>)
 80006da:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = g_val;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <fsm_traffic_light+0x280>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dc03      	bgt.n	80006ec <fsm_traffic_light+0x1d4>
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <fsm_traffic_light+0x270>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <fsm_traffic_light+0x280>)
 80006ea:	6013      	str	r3, [r2, #0]
		}

		//update state
		if (timer1_flag == 1){
 80006ec:	4b2c      	ldr	r3, [pc, #176]	; (80007a0 <fsm_traffic_light+0x288>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d113      	bne.n	800071c <fsm_traffic_light+0x204>
			setTimer1(g_val*100);
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <fsm_traffic_light+0x270>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2264      	movs	r2, #100	; 0x64
 80006fa:	fb02 f303 	mul.w	r3, r2, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fd70 	bl	80011e4 <setTimer1>
			led_status = RED_GREEN;
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <fsm_traffic_light+0x26c>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
		}
		break;
 800070a:	e007      	b.n	800071c <fsm_traffic_light+0x204>
	default:
		break;
 800070c:	bf00      	nop
 800070e:	e006      	b.n	800071e <fsm_traffic_light+0x206>
		break;
 8000710:	bf00      	nop
 8000712:	e004      	b.n	800071e <fsm_traffic_light+0x206>
		break;
 8000714:	bf00      	nop
 8000716:	e002      	b.n	800071e <fsm_traffic_light+0x206>
		break;
 8000718:	bf00      	nop
 800071a:	e000      	b.n	800071e <fsm_traffic_light+0x206>
		break;
 800071c:	bf00      	nop
	}
	//check mode (timer5 for toogle LED)
	if (isButtonPressed(0) == 1 && (led_status == RED_GREEN || led_status == RED_YELLOW || led_status == GREEN_RED || led_status == YELLOW_RED)){
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff fd14 	bl	800014c <isButtonPressed>
 8000724:	4603      	mov	r3, r0
 8000726:	2b01      	cmp	r3, #1
 8000728:	d12a      	bne.n	8000780 <fsm_traffic_light+0x268>
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <fsm_traffic_light+0x26c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d00b      	beq.n	800074a <fsm_traffic_light+0x232>
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <fsm_traffic_light+0x26c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b02      	cmp	r3, #2
 8000738:	d007      	beq.n	800074a <fsm_traffic_light+0x232>
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <fsm_traffic_light+0x26c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b03      	cmp	r3, #3
 8000740:	d003      	beq.n	800074a <fsm_traffic_light+0x232>
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <fsm_traffic_light+0x26c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b04      	cmp	r3, #4
 8000748:	d11a      	bne.n	8000780 <fsm_traffic_light+0x268>
		offALL();
 800074a:	f000 fb17 	bl	8000d7c <offALL>
		led_status = RED_MAN;
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <fsm_traffic_light+0x26c>)
 8000750:	220c      	movs	r2, #12
 8000752:	601a      	str	r2, [r3, #0]
		r_inc = r_val;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <fsm_traffic_light+0x28c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <fsm_traffic_light+0x290>)
 800075a:	6013      	str	r3, [r2, #0]
		y_inc = y_val;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <fsm_traffic_light+0x284>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a12      	ldr	r2, [pc, #72]	; (80007ac <fsm_traffic_light+0x294>)
 8000762:	6013      	str	r3, [r2, #0]
		g_inc = g_val;
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <fsm_traffic_light+0x270>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <fsm_traffic_light+0x298>)
 800076a:	6013      	str	r3, [r2, #0]
		setTimer5(1);
 800076c:	2001      	movs	r0, #1
 800076e:	f000 fd61 	bl	8001234 <setTimer5>

		timerRoad1 = r_val;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <fsm_traffic_light+0x28c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <fsm_traffic_light+0x27c>)
 8000778:	6013      	str	r3, [r2, #0]
		timerRoad2 = 2;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <fsm_traffic_light+0x280>)
 800077c:	2202      	movs	r2, #2
 800077e:	601a      	str	r2, [r3, #0]
	}
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000b4 	.word	0x200000b4
 8000788:	20000070 	.word	0x20000070
 800078c:	20000074 	.word	0x20000074
 8000790:	200000e0 	.word	0x200000e0
 8000794:	200000b8 	.word	0x200000b8
 8000798:	200000bc 	.word	0x200000bc
 800079c:	2000006c 	.word	0x2000006c
 80007a0:	200000d8 	.word	0x200000d8
 80007a4:	20000068 	.word	0x20000068
 80007a8:	200000c0 	.word	0x200000c0
 80007ac:	200000c8 	.word	0x200000c8
 80007b0:	200000c4 	.word	0x200000c4

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f000 ff90 	bl	80016dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f858 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 f962 	bl	8000a88 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007c4:	f000 f890 	bl	80008e8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007c8:	f000 f934 	bl	8000a34 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007cc:	f000 f8d8 	bl	8000980 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007d0:	4820      	ldr	r0, [pc, #128]	; (8000854 <main+0xa0>)
 80007d2:	f001 ffdb 	bl	800278c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80007d6:	4820      	ldr	r0, [pc, #128]	; (8000858 <main+0xa4>)
 80007d8:	f001 ffd8 	bl	800278c <HAL_TIM_Base_Start_IT>
  SCH_Init();
 80007dc:	f000 fb12 	bl	8000e04 <SCH_Init>
  SCH_Add_Task(fsm_traffic_light, 0, 10);
 80007e0:	220a      	movs	r2, #10
 80007e2:	2100      	movs	r1, #0
 80007e4:	481d      	ldr	r0, [pc, #116]	; (800085c <main+0xa8>)
 80007e6:	f000 fb63 	bl	8000eb0 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 10);
 80007ea:	220a      	movs	r2, #10
 80007ec:	2100      	movs	r1, #0
 80007ee:	481c      	ldr	r0, [pc, #112]	; (8000860 <main+0xac>)
 80007f0:	f000 fb5e 	bl	8000eb0 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);
 80007f4:	220a      	movs	r2, #10
 80007f6:	2100      	movs	r1, #0
 80007f8:	481a      	ldr	r0, [pc, #104]	; (8000864 <main+0xb0>)
 80007fa:	f000 fb59 	bl	8000eb0 <SCH_Add_Task>

  SCH_Add_Task(ped_fsm, 0, 10);
 80007fe:	220a      	movs	r2, #10
 8000800:	2100      	movs	r1, #0
 8000802:	4819      	ldr	r0, [pc, #100]	; (8000868 <main+0xb4>)
 8000804:	f000 fb54 	bl	8000eb0 <SCH_Add_Task>
  SCH_Add_Task(pedestrian_manual_fsm, 0, 10);
 8000808:	220a      	movs	r2, #10
 800080a:	2100      	movs	r1, #0
 800080c:	4817      	ldr	r0, [pc, #92]	; (800086c <main+0xb8>)
 800080e:	f000 fb4f 	bl	8000eb0 <SCH_Add_Task>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000812:	2100      	movs	r1, #0
 8000814:	4810      	ldr	r0, [pc, #64]	; (8000858 <main+0xa4>)
 8000816:	f002 f85b 	bl	80028d0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 800081a:	f000 fc1b 	bl	8001054 <SCH_Dispatch_Tasks>
	  if (isButtonPressed(0) == 1){
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fc94 	bl	800014c <isButtonPressed>
 8000824:	4603      	mov	r3, r0
 8000826:	2b01      	cmp	r3, #1
 8000828:	d103      	bne.n	8000832 <main+0x7e>
		  onRED1();
 800082a:	f000 fa63 	bl	8000cf4 <onRED1>
		  onRED2();
 800082e:	f000 fa95 	bl	8000d5c <onRED2>
	  }

	  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,10);
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <main+0xa4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	220a      	movs	r2, #10
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 800083a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083e:	f000 ffaf 	bl	80017a0 <HAL_Delay>
	  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,100);
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <main+0xa4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2264      	movs	r2, #100	; 0x64
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 800084a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800084e:	f000 ffa7 	bl	80017a0 <HAL_Delay>
	  SCH_Dispatch_Tasks();
 8000852:	e7e2      	b.n	800081a <main+0x66>
 8000854:	2000015c 	.word	0x2000015c
 8000858:	20000114 	.word	0x20000114
 800085c:	08000519 	.word	0x08000519
 8000860:	080002b5 	.word	0x080002b5
 8000864:	080001a1 	.word	0x080001a1
 8000868:	08000ba1 	.word	0x08000ba1
 800086c:	08000bd9 	.word	0x08000bd9

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b090      	sub	sp, #64	; 0x40
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	2228      	movs	r2, #40	; 0x28
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f003 fbe8 	bl	8004054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000896:	2301      	movs	r3, #1
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089a:	2310      	movs	r3, #16
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800089e:	2300      	movs	r3, #0
 80008a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fb12 	bl	8001ed0 <HAL_RCC_OscConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008b2:	f000 f96f 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 fd7e 	bl	80023d0 <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008da:	f000 f95b 	bl	8000b94 <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3740      	adds	r7, #64	; 0x40
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_TIM2_Init+0x94>)
 8000906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800090a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_TIM2_Init+0x94>)
 800090e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000912:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_TIM2_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_TIM2_Init+0x94>)
 800091c:	2263      	movs	r2, #99	; 0x63
 800091e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_TIM2_Init+0x94>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_TIM2_Init+0x94>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800092c:	4813      	ldr	r0, [pc, #76]	; (800097c <MX_TIM2_Init+0x94>)
 800092e:	f001 fedd 	bl	80026ec <HAL_TIM_Base_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000938:	f000 f92c 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <MX_TIM2_Init+0x94>)
 800094a:	f002 fa2d 	bl	8002da8 <HAL_TIM_ConfigClockSource>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000954:	f000 f91e 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000958:	2300      	movs	r3, #0
 800095a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_TIM2_Init+0x94>)
 8000966:	f002 fdaf 	bl	80034c8 <HAL_TIMEx_MasterConfigSynchronization>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000970:	f000 f910 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000015c 	.word	0x2000015c

08000980 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000986:	f107 0320 	add.w	r3, r7, #32
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009a4:	4a22      	ldr	r2, [pc, #136]	; (8000a30 <MX_TIM3_Init+0xb0>)
 80009a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80009a8:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009aa:	223f      	movs	r2, #63	; 0x3f
 80009ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009c8:	4818      	ldr	r0, [pc, #96]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009ca:	f001 ff31 	bl	8002830 <HAL_TIM_PWM_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 f8de 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	4619      	mov	r1, r3
 80009e6:	4811      	ldr	r0, [pc, #68]	; (8000a2c <MX_TIM3_Init+0xac>)
 80009e8:	f002 fd6e 	bl	80034c8 <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80009f2:	f000 f8cf 	bl	8000b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f6:	2360      	movs	r3, #96	; 0x60
 80009f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <MX_TIM3_Init+0xac>)
 8000a0e:	f002 f909 	bl	8002c24 <HAL_TIM_PWM_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a18:	f000 f8bc 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <MX_TIM3_Init+0xac>)
 8000a1e:	f000 fd53 	bl	80014c8 <HAL_TIM_MspPostInit>

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000114 	.word	0x20000114
 8000a30:	40000400 	.word	0x40000400

08000a34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_USART2_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	f002 fd9c 	bl	80035a8 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a76:	f000 f88d 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001a4 	.word	0x200001a4
 8000a84:	40004400 	.word	0x40004400

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b34      	ldr	r3, [pc, #208]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a33      	ldr	r2, [pc, #204]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a2d      	ldr	r2, [pc, #180]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a27      	ldr	r2, [pc, #156]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|PET_LED_2_Pin|LED1_1_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8000aea:	4822      	ldr	r0, [pc, #136]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000aec:	f001 f9d7 	bl	8001e9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PET_LED_1_Pin|LED1_2_Pin|LED2_2_Pin|LED2_1_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000af6:	4820      	ldr	r0, [pc, #128]	; (8000b78 <MX_GPIO_Init+0xf0>)
 8000af8:	f001 f9d1 	bl	8001e9e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PET_BUT_Pin MODE_Pin INC_Pin */
  GPIO_InitStruct.Pin = PET_BUT_Pin|MODE_Pin|INC_Pin;
 8000afc:	2313      	movs	r3, #19
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4819      	ldr	r0, [pc, #100]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000b10:	f001 f82a 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin PET_LED_2_Pin LED1_1_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|PET_LED_2_Pin|LED1_1_Pin;
 8000b14:	f44f 63a8 	mov.w	r3, #1344	; 0x540
 8000b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0310 	add.w	r3, r7, #16
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4811      	ldr	r0, [pc, #68]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000b2e:	f001 f81b 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_Pin */
  GPIO_InitStruct.Pin = SET_Pin;
 8000b32:	2301      	movs	r3, #1
 8000b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SET_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_GPIO_Init+0xf0>)
 8000b46:	f001 f80f 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PET_LED_1_Pin LED1_2_Pin LED2_2_Pin LED2_1_Pin */
  GPIO_InitStruct.Pin = PET_LED_1_Pin|LED1_2_Pin|LED2_2_Pin|LED2_1_Pin;
 8000b4a:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4619      	mov	r1, r3
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_GPIO_Init+0xf0>)
 8000b64:	f001 f800 	bl	8001b68 <HAL_GPIO_Init>

}
 8000b68:	bf00      	nop
 8000b6a:	3720      	adds	r7, #32
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010800 	.word	0x40010800
 8000b78:	40010c00 	.word	0x40010c00

08000b7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	timerRun();
 8000b84:	f000 fb7e 	bl	8001284 <timerRun>
//	getKeyInput();
	SCH_Update();
 8000b88:	f000 fa04 	bl	8000f94 <SCH_Update>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <ped_fsm>:
 *      Author: Admin
 */

#include "ped_fsm.h"

void ped_fsm(){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	switch(led_status){
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <ped_fsm+0x34>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d00c      	beq.n	8000bc6 <ped_fsm+0x26>
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	dc0d      	bgt.n	8000bcc <ped_fsm+0x2c>
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d002      	beq.n	8000bba <ped_fsm+0x1a>
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d003      	beq.n	8000bc0 <ped_fsm+0x20>
		break;
	case YELLOW_RED:
		pedRed();
		break;
	default:
		break;
 8000bb8:	e008      	b.n	8000bcc <ped_fsm+0x2c>
		pedGreen();
 8000bba:	f000 f8fd 	bl	8000db8 <pedGreen>
		break;
 8000bbe:	e006      	b.n	8000bce <ped_fsm+0x2e>
		pedRed();
 8000bc0:	f000 f90c 	bl	8000ddc <pedRed>
		break;
 8000bc4:	e003      	b.n	8000bce <ped_fsm+0x2e>
		pedRed();
 8000bc6:	f000 f909 	bl	8000ddc <pedRed>
		break;
 8000bca:	e000      	b.n	8000bce <ped_fsm+0x2e>
		break;
 8000bcc:	bf00      	nop
	}
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000b4 	.word	0x200000b4

08000bd8 <pedestrian_manual_fsm>:

#include "ped_manual.h"

// Change sig name later
// Traffic ped status
void pedestrian_manual_fsm(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	switch (sig){
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <pedestrian_manual_fsm+0xbc>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b13      	cmp	r3, #19
 8000be2:	d006      	beq.n	8000bf2 <pedestrian_manual_fsm+0x1a>
 8000be4:	2b13      	cmp	r3, #19
 8000be6:	dc4e      	bgt.n	8000c86 <pedestrian_manual_fsm+0xae>
 8000be8:	2b11      	cmp	r3, #17
 8000bea:	d034      	beq.n	8000c56 <pedestrian_manual_fsm+0x7e>
 8000bec:	2b12      	cmp	r3, #18
 8000bee:	d011      	beq.n	8000c14 <pedestrian_manual_fsm+0x3c>
		offALL();
		pedRed();
		sig = WAIT;
		break;
	default:
		break;
 8000bf0:	e049      	b.n	8000c86 <pedestrian_manual_fsm+0xae>
		if (isButtonPressed(3)){
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f7ff faaa 	bl	800014c <isButtonPressed>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d045      	beq.n	8000c8a <pedestrian_manual_fsm+0xb2>
			sig = GREEN;
 8000bfe:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <pedestrian_manual_fsm+0xbc>)
 8000c00:	2210      	movs	r2, #16
 8000c02:	601a      	str	r2, [r3, #0]
			allowed = 0;
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <pedestrian_manual_fsm+0xc0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
			setTimer8(1000);
 8000c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0e:	f000 fb25 	bl	800125c <setTimer8>
		break;
 8000c12:	e03a      	b.n	8000c8a <pedestrian_manual_fsm+0xb2>
		if (led_status == GREEN_MAN || led_status == RED_MAN || led_status == YELLOW_MAN){
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <pedestrian_manual_fsm+0xc4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b0d      	cmp	r3, #13
 8000c1a:	d007      	beq.n	8000c2c <pedestrian_manual_fsm+0x54>
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <pedestrian_manual_fsm+0xc4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b0c      	cmp	r3, #12
 8000c22:	d003      	beq.n	8000c2c <pedestrian_manual_fsm+0x54>
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <pedestrian_manual_fsm+0xc4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b0e      	cmp	r3, #14
 8000c2a:	d103      	bne.n	8000c34 <pedestrian_manual_fsm+0x5c>
			sig = WAIT;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <pedestrian_manual_fsm+0xbc>)
 8000c2e:	2213      	movs	r2, #19
 8000c30:	601a      	str	r2, [r3, #0]
			break;
 8000c32:	e02d      	b.n	8000c90 <pedestrian_manual_fsm+0xb8>
		pedGreen();
 8000c34:	f000 f8c0 	bl	8000db8 <pedGreen>
		onRED1();
 8000c38:	f000 f85c 	bl	8000cf4 <onRED1>
		onGREEN2();
 8000c3c:	f000 f86e 	bl	8000d1c <onGREEN2>
		if (timer8_flag){
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <pedestrian_manual_fsm+0xc8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d022      	beq.n	8000c8e <pedestrian_manual_fsm+0xb6>
			sig = RED;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <pedestrian_manual_fsm+0xbc>)
 8000c4a:	220f      	movs	r2, #15
 8000c4c:	601a      	str	r2, [r3, #0]
			allowed = 1;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <pedestrian_manual_fsm+0xc0>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	601a      	str	r2, [r3, #0]
		break;
 8000c54:	e01b      	b.n	8000c8e <pedestrian_manual_fsm+0xb6>
		if (led_status == GREEN_MAN || led_status == RED_MAN || led_status == YELLOW_MAN){
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <pedestrian_manual_fsm+0xc4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b0d      	cmp	r3, #13
 8000c5c:	d007      	beq.n	8000c6e <pedestrian_manual_fsm+0x96>
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <pedestrian_manual_fsm+0xc4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b0c      	cmp	r3, #12
 8000c64:	d003      	beq.n	8000c6e <pedestrian_manual_fsm+0x96>
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <pedestrian_manual_fsm+0xc4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b0e      	cmp	r3, #14
 8000c6c:	d103      	bne.n	8000c76 <pedestrian_manual_fsm+0x9e>
			sig = WAIT;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <pedestrian_manual_fsm+0xbc>)
 8000c70:	2213      	movs	r2, #19
 8000c72:	601a      	str	r2, [r3, #0]
			break;
 8000c74:	e00c      	b.n	8000c90 <pedestrian_manual_fsm+0xb8>
		offALL();
 8000c76:	f000 f881 	bl	8000d7c <offALL>
		pedRed();
 8000c7a:	f000 f8af 	bl	8000ddc <pedRed>
		sig = WAIT;
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <pedestrian_manual_fsm+0xbc>)
 8000c80:	2213      	movs	r2, #19
 8000c82:	601a      	str	r2, [r3, #0]
		break;
 8000c84:	e004      	b.n	8000c90 <pedestrian_manual_fsm+0xb8>
		break;
 8000c86:	bf00      	nop
 8000c88:	e002      	b.n	8000c90 <pedestrian_manual_fsm+0xb8>
		break;
 8000c8a:	bf00      	nop
 8000c8c:	e000      	b.n	8000c90 <pedestrian_manual_fsm+0xb8>
		break;
 8000c8e:	bf00      	nop
	}
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000078 	.word	0x20000078
 8000c98:	20000074 	.word	0x20000074
 8000c9c:	200000b4 	.word	0x200000b4
 8000ca0:	20000110 	.word	0x20000110

08000ca4 <onGREEN1>:
 *      Author: dinhq
 */

#include "physical.h"

void onGREEN1(){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <onGREEN1+0x20>)
 8000cb0:	f001 f8f5 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2108      	movs	r1, #8
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <onGREEN1+0x24>)
 8000cba:	f001 f8f0 	bl	8001e9e <HAL_GPIO_WritePin>
};
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40010800 	.word	0x40010800
 8000cc8:	40010c00 	.word	0x40010c00

08000ccc <onYELLOW1>:
void onYELLOW1(){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <onYELLOW1+0x20>)
 8000cd8:	f001 f8e1 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2108      	movs	r1, #8
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <onYELLOW1+0x24>)
 8000ce2:	f001 f8dc 	bl	8001e9e <HAL_GPIO_WritePin>
};
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40010800 	.word	0x40010800
 8000cf0:	40010c00 	.word	0x40010c00

08000cf4 <onRED1>:
void onRED1(){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <onRED1+0x20>)
 8000d00:	f001 f8cd 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2108      	movs	r1, #8
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <onRED1+0x24>)
 8000d0a:	f001 f8c8 	bl	8001e9e <HAL_GPIO_WritePin>
};
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40010800 	.word	0x40010800
 8000d18:	40010c00 	.word	0x40010c00

08000d1c <onGREEN2>:

void onGREEN2(){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2120      	movs	r1, #32
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <onGREEN2+0x1c>)
 8000d26:	f001 f8ba 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	4802      	ldr	r0, [pc, #8]	; (8000d38 <onGREEN2+0x1c>)
 8000d30:	f001 f8b5 	bl	8001e9e <HAL_GPIO_WritePin>
};
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40010c00 	.word	0x40010c00

08000d3c <onYELLOW2>:
void onYELLOW2(){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2120      	movs	r1, #32
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <onYELLOW2+0x1c>)
 8000d46:	f001 f8aa 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	4802      	ldr	r0, [pc, #8]	; (8000d58 <onYELLOW2+0x1c>)
 8000d50:	f001 f8a5 	bl	8001e9e <HAL_GPIO_WritePin>
};
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40010c00 	.word	0x40010c00

08000d5c <onRED2>:
void onRED2(){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2120      	movs	r1, #32
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <onRED2+0x1c>)
 8000d66:	f001 f89a 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	4802      	ldr	r0, [pc, #8]	; (8000d78 <onRED2+0x1c>)
 8000d70:	f001 f895 	bl	8001e9e <HAL_GPIO_WritePin>
};
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40010c00 	.word	0x40010c00

08000d7c <offALL>:

void offALL(){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d86:	480a      	ldr	r0, [pc, #40]	; (8000db0 <offALL+0x34>)
 8000d88:	f001 f889 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2108      	movs	r1, #8
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <offALL+0x38>)
 8000d92:	f001 f884 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2120      	movs	r1, #32
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <offALL+0x38>)
 8000d9c:	f001 f87f 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2110      	movs	r1, #16
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <offALL+0x38>)
 8000da6:	f001 f87a 	bl	8001e9e <HAL_GPIO_WritePin>
};
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <pedGreen>:

//PED
void pedGreen(){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PET_LED_1_GPIO_Port, PET_LED_1_Pin, RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <pedGreen+0x20>)
 8000dc4:	f001 f86b 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PET_LED_1_GPIO_Port, PET_LED_1_Pin, SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dce:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <pedGreen+0x20>)
 8000dd0:	f001 f865 	bl	8001e9e <HAL_GPIO_WritePin>
};
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <pedRed>:

void pedRed(){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PET_LED_1_GPIO_Port, PET_LED_1_Pin, SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <pedRed+0x20>)
 8000de8:	f001 f859 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PET_LED_2_GPIO_Port, PET_LED_2_Pin, RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	4803      	ldr	r0, [pc, #12]	; (8000e00 <pedRed+0x24>)
 8000df4:	f001 f853 	bl	8001e9e <HAL_GPIO_WritePin>
};
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40010c00 	.word	0x40010c00
 8000e00:	40010800 	.word	0x40010800

08000e04 <SCH_Init>:
#include "scheduler.h"

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
    current_index_task = 0;
 8000e0a:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <SCH_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<SCH_MAX_TASKS; i++){
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	e03e      	b.n	8000e94 <SCH_Init+0x90>
        SCH_tasks_G[current_index_task].pTask = 0;
 8000e16:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <SCH_Init+0xa4>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4a23      	ldr	r2, [pc, #140]	; (8000eac <SCH_Init+0xa8>)
 8000e1e:	460b      	mov	r3, r1
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Delay = 0;
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <SCH_Init+0xa4>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <SCH_Init+0xa8>)
 8000e34:	460b      	mov	r3, r1
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	440b      	add	r3, r1
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3304      	adds	r3, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Period = 0;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <SCH_Init+0xa4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4a18      	ldr	r2, [pc, #96]	; (8000eac <SCH_Init+0xa8>)
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	440b      	add	r3, r1
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	3308      	adds	r3, #8
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].RunMe = 0;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <SCH_Init+0xa4>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <SCH_Init+0xa8>)
 8000e64:	460b      	mov	r3, r1
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	440b      	add	r3, r1
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	330c      	adds	r3, #12
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]

        SCH_tasks_G[current_index_task].TaskID = -1;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <SCH_Init+0xa4>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <SCH_Init+0xa8>)
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	440b      	add	r3, r1
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	3310      	adds	r3, #16
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	601a      	str	r2, [r3, #0]
    for (int i=0; i<SCH_MAX_TASKS; i++){
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3301      	adds	r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b27      	cmp	r3, #39	; 0x27
 8000e98:	ddbd      	ble.n	8000e16 <SCH_Init+0x12>
    }
}
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	200000d0 	.word	0x200000d0
 8000eac:	200001ec 	.word	0x200001ec

08000eb0 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t Delay, uint32_t Period){
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	Delay = Delay / TICK ;
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4a32      	ldr	r2, [pc, #200]	; (8000f88 <SCH_Add_Task+0xd8>)
 8000ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	60bb      	str	r3, [r7, #8]
	Period = Period / TICK ;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a2f      	ldr	r2, [pc, #188]	; (8000f88 <SCH_Add_Task+0xd8>)
 8000ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed0:	08db      	lsrs	r3, r3, #3
 8000ed2:	607b      	str	r3, [r7, #4]
    if(current_index_task < SCH_MAX_TASKS){
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <SCH_Add_Task+0xdc>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b27      	cmp	r3, #39	; 0x27
 8000eda:	d84e      	bhi.n	8000f7a <SCH_Add_Task+0xca>

        SCH_tasks_G[current_index_task].pTask = pFunction;
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <SCH_Add_Task+0xdc>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4a2b      	ldr	r2, [pc, #172]	; (8000f90 <SCH_Add_Task+0xe0>)
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Delay = Delay;
 8000ef2:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <SCH_Add_Task+0xdc>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4a25      	ldr	r2, [pc, #148]	; (8000f90 <SCH_Add_Task+0xe0>)
 8000efa:	460b      	mov	r3, r1
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	3304      	adds	r3, #4
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Period = Period;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <SCH_Add_Task+0xdc>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <SCH_Add_Task+0xe0>)
 8000f12:	460b      	mov	r3, r1
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3308      	adds	r3, #8
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].RunMe = 0;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <SCH_Add_Task+0xdc>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <SCH_Add_Task+0xe0>)
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	440b      	add	r3, r1
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	330c      	adds	r3, #12
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]

        SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <SCH_Add_Task+0xdc>)
 8000f3c:	781a      	ldrb	r2, [r3, #0]
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <SCH_Add_Task+0xdc>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	4619      	mov	r1, r3
 8000f44:	4610      	mov	r0, r2
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <SCH_Add_Task+0xe0>)
 8000f48:	460b      	mov	r3, r1
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	3310      	adds	r3, #16
 8000f54:	6018      	str	r0, [r3, #0]

        current_index_task++;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <SCH_Add_Task+0xdc>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <SCH_Add_Task+0xdc>)
 8000f60:	701a      	strb	r2, [r3, #0]
        return SCH_tasks_G[current_index_task-1].TaskID;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <SCH_Add_Task+0xdc>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	1e5a      	subs	r2, r3, #1
 8000f68:	4909      	ldr	r1, [pc, #36]	; (8000f90 <SCH_Add_Task+0xe0>)
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	3310      	adds	r3, #16
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	e001      	b.n	8000f7e <SCH_Add_Task+0xce>
    }
    return -1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	cccccccd 	.word	0xcccccccd
 8000f8c:	200000d0 	.word	0x200000d0
 8000f90:	200001ec 	.word	0x200001ec

08000f94 <SCH_Update>:

void SCH_Update(void){
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
    for (int i = 0; i < current_index_task; i++){
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	e048      	b.n	8001032 <SCH_Update+0x9e>
        if(SCH_tasks_G[i].Delay > 0){
 8000fa0:	492a      	ldr	r1, [pc, #168]	; (800104c <SCH_Update+0xb8>)
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	3304      	adds	r3, #4
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d013      	beq.n	8000fde <SCH_Update+0x4a>
            SCH_tasks_G[i].Delay--;
 8000fb6:	4925      	ldr	r1, [pc, #148]	; (800104c <SCH_Update+0xb8>)
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	1e59      	subs	r1, r3, #1
 8000fca:	4820      	ldr	r0, [pc, #128]	; (800104c <SCH_Update+0xb8>)
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4403      	add	r3, r0
 8000fd8:	3304      	adds	r3, #4
 8000fda:	6019      	str	r1, [r3, #0]
 8000fdc:	e026      	b.n	800102c <SCH_Update+0x98>
        }
        else {
            SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8000fde:	491b      	ldr	r1, [pc, #108]	; (800104c <SCH_Update+0xb8>)
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	3308      	adds	r3, #8
 8000fee:	6819      	ldr	r1, [r3, #0]
 8000ff0:	4816      	ldr	r0, [pc, #88]	; (800104c <SCH_Update+0xb8>)
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4403      	add	r3, r0
 8000ffe:	3304      	adds	r3, #4
 8001000:	6019      	str	r1, [r3, #0]
            SCH_tasks_G[i].RunMe += 1;
 8001002:	4912      	ldr	r1, [pc, #72]	; (800104c <SCH_Update+0xb8>)
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	330c      	adds	r3, #12
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	b2d8      	uxtb	r0, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <SCH_Update+0xb8>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	330c      	adds	r3, #12
 8001028:	4602      	mov	r2, r0
 800102a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < current_index_task; i++){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3301      	adds	r3, #1
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <SCH_Update+0xbc>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4293      	cmp	r3, r2
 800103c:	dbb0      	blt.n	8000fa0 <SCH_Update+0xc>
        }
    }
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200001ec 	.word	0x200001ec
 8001050:	200000d0 	.word	0x200000d0

08001054 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
    for (int i = 0; i < current_index_task; i++){
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	e03a      	b.n	80010d6 <SCH_Dispatch_Tasks+0x82>
        if (SCH_tasks_G[i].RunMe > 0){
 8001060:	4922      	ldr	r1, [pc, #136]	; (80010ec <SCH_Dispatch_Tasks+0x98>)
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	330c      	adds	r3, #12
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d02c      	beq.n	80010d0 <SCH_Dispatch_Tasks+0x7c>
            SCH_tasks_G[i].RunMe--;
 8001076:	491d      	ldr	r1, [pc, #116]	; (80010ec <SCH_Dispatch_Tasks+0x98>)
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	330c      	adds	r3, #12
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	3b01      	subs	r3, #1
 800108a:	b2d8      	uxtb	r0, r3
 800108c:	4917      	ldr	r1, [pc, #92]	; (80010ec <SCH_Dispatch_Tasks+0x98>)
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	330c      	adds	r3, #12
 800109c:	4602      	mov	r2, r0
 800109e:	701a      	strb	r2, [r3, #0]
            SCH_tasks_G[i].pTask();
 80010a0:	4912      	ldr	r1, [pc, #72]	; (80010ec <SCH_Dispatch_Tasks+0x98>)
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4798      	blx	r3
            if (SCH_tasks_G[i].Period == 0){
 80010b2:	490e      	ldr	r1, [pc, #56]	; (80010ec <SCH_Dispatch_Tasks+0x98>)
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3308      	adds	r3, #8
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d103      	bne.n	80010d0 <SCH_Dispatch_Tasks+0x7c>
            	SCH_Delete(i);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f812 	bl	80010f4 <SCH_Delete>
    for (int i = 0; i < current_index_task; i++){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3301      	adds	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <SCH_Dispatch_Tasks+0x9c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4293      	cmp	r3, r2
 80010e0:	dbbe      	blt.n	8001060 <SCH_Dispatch_Tasks+0xc>
            }
        }
    }
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200001ec 	.word	0x200001ec
 80010f0:	200000d0 	.word	0x200000d0

080010f4 <SCH_Delete>:

uint8_t SCH_Delete(uint32_t ID){
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	if (SCH_tasks_G[ID].pTask == 0) {
 80010fc:	4937      	ldr	r1, [pc, #220]	; (80011dc <SCH_Delete+0xe8>)
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <SCH_Delete+0x20>
		return -1;
 8001110:	23ff      	movs	r3, #255	; 0xff
 8001112:	e05e      	b.n	80011d2 <SCH_Delete+0xde>
	}

	for (int i = ID; i < current_index_task; i++){
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e04d      	b.n	80011b6 <SCH_Delete+0xc2>
		SCH_tasks_G[i].pTask = SCH_tasks_G[i+1].pTask;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	492f      	ldr	r1, [pc, #188]	; (80011dc <SCH_Delete+0xe8>)
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	482b      	ldr	r0, [pc, #172]	; (80011dc <SCH_Delete+0xe8>)
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4403      	add	r3, r0
 800113a:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Delay = SCH_tasks_G[i+1].Delay;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	4926      	ldr	r1, [pc, #152]	; (80011dc <SCH_Delete+0xe8>)
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	3304      	adds	r3, #4
 800114e:	6819      	ldr	r1, [r3, #0]
 8001150:	4822      	ldr	r0, [pc, #136]	; (80011dc <SCH_Delete+0xe8>)
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4403      	add	r3, r0
 800115e:	3304      	adds	r3, #4
 8001160:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Period = SCH_tasks_G[i+1].Period;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	491d      	ldr	r1, [pc, #116]	; (80011dc <SCH_Delete+0xe8>)
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	3308      	adds	r3, #8
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	4819      	ldr	r0, [pc, #100]	; (80011dc <SCH_Delete+0xe8>)
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4403      	add	r3, r0
 8001184:	3308      	adds	r3, #8
 8001186:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].RunMe = SCH_tasks_G[i+1].RunMe;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	4913      	ldr	r1, [pc, #76]	; (80011dc <SCH_Delete+0xe8>)
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	330c      	adds	r3, #12
 800119a:	7818      	ldrb	r0, [r3, #0]
 800119c:	490f      	ldr	r1, [pc, #60]	; (80011dc <SCH_Delete+0xe8>)
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	330c      	adds	r3, #12
 80011ac:	4602      	mov	r2, r0
 80011ae:	701a      	strb	r2, [r3, #0]
	for (int i = ID; i < current_index_task; i++){
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3301      	adds	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <SCH_Delete+0xec>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4293      	cmp	r3, r2
 80011c0:	dbab      	blt.n	800111a <SCH_Delete+0x26>
	}

	current_index_task--;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <SCH_Delete+0xec>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SCH_Delete+0xec>)
 80011cc:	701a      	strb	r2, [r3, #0]
	return current_index_task;
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SCH_Delete+0xec>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	200001ec 	.word	0x200001ec
 80011e0:	200000d0 	.word	0x200000d0

080011e4 <setTimer1>:


int timer8_counter=0;
int timer8_flag=0;

void setTimer1(int duration){
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 80011ec:	4a05      	ldr	r2, [pc, #20]	; (8001204 <setTimer1+0x20>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <setTimer1+0x24>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200000d4 	.word	0x200000d4
 8001208:	200000d8 	.word	0x200000d8

0800120c <setTimer2>:

void setTimer2(int duration){
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8001214:	4a05      	ldr	r2, [pc, #20]	; (800122c <setTimer2+0x20>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <setTimer2+0x24>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	200000dc 	.word	0x200000dc
 8001230:	200000e0 	.word	0x200000e0

08001234 <setTimer5>:
void setTimer4(int duration){
	timer4_counter=duration;
	timer4_flag=0;
}

void setTimer5(int duration){
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	timer5_counter=duration;
 800123c:	4a05      	ldr	r2, [pc, #20]	; (8001254 <setTimer5+0x20>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <setTimer5+0x24>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200000f4 	.word	0x200000f4
 8001258:	200000f8 	.word	0x200000f8

0800125c <setTimer8>:
void setTimer7(int duration){
	timer7_counter=duration;
	timer7_flag=0;
}

void setTimer8(int duration){
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	timer8_counter=duration;
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <setTimer8+0x20>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
	timer8_flag=0;
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <setTimer8+0x24>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	2000010c 	.word	0x2000010c
 8001280:	20000110 	.word	0x20000110

08001284 <timerRun>:

void timerRun(){
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 8001288:	4b41      	ldr	r3, [pc, #260]	; (8001390 <timerRun+0x10c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	dd0b      	ble.n	80012a8 <timerRun+0x24>
		timer1_counter--;
 8001290:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <timerRun+0x10c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3b01      	subs	r3, #1
 8001296:	4a3e      	ldr	r2, [pc, #248]	; (8001390 <timerRun+0x10c>)
 8001298:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <timerRun+0x10c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	dc02      	bgt.n	80012a8 <timerRun+0x24>
			timer1_flag=1;
 80012a2:	4b3c      	ldr	r3, [pc, #240]	; (8001394 <timerRun+0x110>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 80012a8:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <timerRun+0x114>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	dd0b      	ble.n	80012c8 <timerRun+0x44>
		timer2_counter--;
 80012b0:	4b39      	ldr	r3, [pc, #228]	; (8001398 <timerRun+0x114>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4a38      	ldr	r2, [pc, #224]	; (8001398 <timerRun+0x114>)
 80012b8:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 80012ba:	4b37      	ldr	r3, [pc, #220]	; (8001398 <timerRun+0x114>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dc02      	bgt.n	80012c8 <timerRun+0x44>
			timer2_flag=1;
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <timerRun+0x118>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0){
 80012c8:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <timerRun+0x11c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	dd0b      	ble.n	80012e8 <timerRun+0x64>
		timer3_counter--;
 80012d0:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <timerRun+0x11c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	4a32      	ldr	r2, [pc, #200]	; (80013a0 <timerRun+0x11c>)
 80012d8:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 80012da:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <timerRun+0x11c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	dc02      	bgt.n	80012e8 <timerRun+0x64>
			timer3_flag=1;
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <timerRun+0x120>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0){
 80012e8:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <timerRun+0x124>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	dd0b      	ble.n	8001308 <timerRun+0x84>
		timer4_counter--;
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <timerRun+0x124>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	4a2c      	ldr	r2, [pc, #176]	; (80013a8 <timerRun+0x124>)
 80012f8:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0){
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <timerRun+0x124>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dc02      	bgt.n	8001308 <timerRun+0x84>
			timer4_flag=1;
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <timerRun+0x128>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0){
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <timerRun+0x12c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	dd0b      	ble.n	8001328 <timerRun+0xa4>
		timer5_counter--;
 8001310:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <timerRun+0x12c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3b01      	subs	r3, #1
 8001316:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <timerRun+0x12c>)
 8001318:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0){
 800131a:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <timerRun+0x12c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	dc02      	bgt.n	8001328 <timerRun+0xa4>
			timer5_flag=1;
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <timerRun+0x130>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer6_counter > 0){
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <timerRun+0x134>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	dd0b      	ble.n	8001348 <timerRun+0xc4>
		timer6_counter--;
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <timerRun+0x134>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3b01      	subs	r3, #1
 8001336:	4a20      	ldr	r2, [pc, #128]	; (80013b8 <timerRun+0x134>)
 8001338:	6013      	str	r3, [r2, #0]
		if (timer6_counter <= 0){
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <timerRun+0x134>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	dc02      	bgt.n	8001348 <timerRun+0xc4>
			timer6_flag=1;
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <timerRun+0x138>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer7_counter > 0){
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <timerRun+0x13c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	dd0b      	ble.n	8001368 <timerRun+0xe4>
		timer7_counter--;
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <timerRun+0x13c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	4a1a      	ldr	r2, [pc, #104]	; (80013c0 <timerRun+0x13c>)
 8001358:	6013      	str	r3, [r2, #0]
		if (timer7_counter <= 0){
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <timerRun+0x13c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	dc02      	bgt.n	8001368 <timerRun+0xe4>
			timer7_flag=1;
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <timerRun+0x140>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer8_counter > 0){
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <timerRun+0x144>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	dd0b      	ble.n	8001388 <timerRun+0x104>
			timer8_counter--;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <timerRun+0x144>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <timerRun+0x144>)
 8001378:	6013      	str	r3, [r2, #0]
			if (timer8_counter <= 0){
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <timerRun+0x144>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	dc02      	bgt.n	8001388 <timerRun+0x104>
				timer8_flag=1;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <timerRun+0x148>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	200000d4 	.word	0x200000d4
 8001394:	200000d8 	.word	0x200000d8
 8001398:	200000dc 	.word	0x200000dc
 800139c:	200000e0 	.word	0x200000e0
 80013a0:	200000e4 	.word	0x200000e4
 80013a4:	200000e8 	.word	0x200000e8
 80013a8:	200000ec 	.word	0x200000ec
 80013ac:	200000f0 	.word	0x200000f0
 80013b0:	200000f4 	.word	0x200000f4
 80013b4:	200000f8 	.word	0x200000f8
 80013b8:	200000fc 	.word	0x200000fc
 80013bc:	20000100 	.word	0x20000100
 80013c0:	20000104 	.word	0x20000104
 80013c4:	20000108 	.word	0x20000108
 80013c8:	2000010c 	.word	0x2000010c
 80013cc:	20000110 	.word	0x20000110

080013d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_MspInit+0x5c>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	4a14      	ldr	r2, [pc, #80]	; (800142c <HAL_MspInit+0x5c>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6193      	str	r3, [r2, #24]
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_MspInit+0x5c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_MspInit+0x5c>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_MspInit+0x5c>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_MspInit+0x5c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_MspInit+0x60>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_MspInit+0x60>)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40021000 	.word	0x40021000
 8001430:	40010000 	.word	0x40010000

08001434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001444:	d113      	bne.n	800146e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_TIM_Base_MspInit+0x44>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_TIM_Base_MspInit+0x44>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_TIM_Base_MspInit+0x44>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	201c      	movs	r0, #28
 8001464:	f000 fa97 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001468:	201c      	movs	r0, #28
 800146a:	f000 fab0 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <HAL_TIM_PWM_MspInit+0x44>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d113      	bne.n	80014b6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_TIM_PWM_MspInit+0x48>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <HAL_TIM_PWM_MspInit+0x48>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_TIM_PWM_MspInit+0x48>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	201d      	movs	r0, #29
 80014ac:	f000 fa73 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014b0:	201d      	movs	r0, #29
 80014b2:	f000 fa8c 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40000400 	.word	0x40000400
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a18      	ldr	r2, [pc, #96]	; (8001544 <HAL_TIM_MspPostInit+0x7c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d129      	bne.n	800153c <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_TIM_MspPostInit+0x80>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a16      	ldr	r2, [pc, #88]	; (8001548 <HAL_TIM_MspPostInit+0x80>)
 80014ee:	f043 0310 	orr.w	r3, r3, #16
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_TIM_MspPostInit+0x80>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001500:	2340      	movs	r3, #64	; 0x40
 8001502:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2302      	movs	r3, #2
 800150a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	4619      	mov	r1, r3
 8001512:	480e      	ldr	r0, [pc, #56]	; (800154c <HAL_TIM_MspPostInit+0x84>)
 8001514:	f000 fb28 	bl	8001b68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_TIM_MspPostInit+0x88>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_TIM_MspPostInit+0x88>)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40000400 	.word	0x40000400
 8001548:	40021000 	.word	0x40021000
 800154c:	40011000 	.word	0x40011000
 8001550:	40010000 	.word	0x40010000

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <HAL_UART_MspInit+0x98>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d137      	bne.n	80015e4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 800157a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157e:	61d3      	str	r3, [r2, #28]
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015a4:	2304      	movs	r3, #4
 80015a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4619      	mov	r1, r3
 80015b6:	480f      	ldr	r0, [pc, #60]	; (80015f4 <HAL_UART_MspInit+0xa0>)
 80015b8:	f000 fad6 	bl	8001b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015bc:	2308      	movs	r3, #8
 80015be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4619      	mov	r1, r3
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <HAL_UART_MspInit+0xa0>)
 80015d0:	f000 faca 	bl	8001b68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	2026      	movs	r0, #38	; 0x26
 80015da:	f000 f9dc 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015de:	2026      	movs	r0, #38	; 0x26
 80015e0:	f000 f9f5 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40004400 	.word	0x40004400
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010800 	.word	0x40010800

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <NMI_Handler+0x4>

080015fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler+0x4>

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163e:	f000 f893 	bl	8001768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIM2_IRQHandler+0x10>)
 800164e:	f001 f9e1 	bl	8002a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000015c 	.word	0x2000015c

0800165c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <TIM3_IRQHandler+0x10>)
 8001662:	f001 f9d7 	bl	8002a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000114 	.word	0x20000114

08001670 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <USART2_IRQHandler+0x10>)
 8001676:	f001 ffe7 	bl	8003648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200001a4 	.word	0x200001a4

08001684 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001690:	f7ff fff8 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001694:	480b      	ldr	r0, [pc, #44]	; (80016c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001696:	490c      	ldr	r1, [pc, #48]	; (80016c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016ac:	4c09      	ldr	r4, [pc, #36]	; (80016d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ba:	f002 fca7 	bl	800400c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016be:	f7ff f879 	bl	80007b4 <main>
  bx lr
 80016c2:	4770      	bx	lr
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80016cc:	080040b0 	.word	0x080040b0
  ldr r2, =_sbss
 80016d0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80016d4:	20000510 	.word	0x20000510

080016d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC1_2_IRQHandler>
	...

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_Init+0x28>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_Init+0x28>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ec:	2003      	movs	r0, #3
 80016ee:	f000 f947 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f2:	200f      	movs	r0, #15
 80016f4:	f000 f808 	bl	8001708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f8:	f7ff fe6a 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40022000 	.word	0x40022000

08001708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x54>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x58>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f95f 	bl	80019ea <HAL_SYSTICK_Config>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00e      	b.n	8001754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d80a      	bhi.n	8001752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f000 f927 	bl	8001996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001748:	4a06      	ldr	r2, [pc, #24]	; (8001764 <HAL_InitTick+0x5c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	2000007c 	.word	0x2000007c
 8001760:	20000084 	.word	0x20000084
 8001764:	20000080 	.word	0x20000080

08001768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_IncTick+0x1c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_IncTick+0x20>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a03      	ldr	r2, [pc, #12]	; (8001788 <HAL_IncTick+0x20>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	20000084 	.word	0x20000084
 8001788:	2000050c 	.word	0x2000050c

0800178c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b02      	ldr	r3, [pc, #8]	; (800179c <HAL_GetTick+0x10>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	2000050c 	.word	0x2000050c

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff fff0 	bl	800178c <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d005      	beq.n	80017c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_Delay+0x44>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c6:	bf00      	nop
 80017c8:	f7ff ffe0 	bl	800178c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d8f7      	bhi.n	80017c8 <HAL_Delay+0x28>
  {
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000084 	.word	0x20000084

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4906      	ldr	r1, [pc, #24]	; (8001880 <__NVIC_EnableIRQ+0x34>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800194c:	d301      	bcc.n	8001952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194e:	2301      	movs	r3, #1
 8001950:	e00f      	b.n	8001972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <SysTick_Config+0x40>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195a:	210f      	movs	r1, #15
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f7ff ff90 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <SysTick_Config+0x40>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <SysTick_Config+0x40>)
 800196c:	2207      	movs	r2, #7
 800196e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff2d 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff42 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ff90 	bl	80018d8 <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff5f 	bl	8001884 <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff35 	bl	800184c <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffa2 	bl	800193c <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b085      	sub	sp, #20
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d008      	beq.n	8001a2c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e020      	b.n	8001a6e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 020e 	bic.w	r2, r2, #14
 8001a3a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a54:	2101      	movs	r1, #1
 8001a56:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d005      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2204      	movs	r2, #4
 8001a94:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
 8001a9a:	e051      	b.n	8001b40 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 020e 	bic.w	r2, r2, #14
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0201 	bic.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <HAL_DMA_Abort_IT+0xd4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d029      	beq.n	8001b1a <HAL_DMA_Abort_IT+0xa2>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <HAL_DMA_Abort_IT+0xd8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d022      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x9e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_DMA_Abort_IT+0xdc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01a      	beq.n	8001b10 <HAL_DMA_Abort_IT+0x98>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <HAL_DMA_Abort_IT+0xe0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d012      	beq.n	8001b0a <HAL_DMA_Abort_IT+0x92>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <HAL_DMA_Abort_IT+0xe4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00a      	beq.n	8001b04 <HAL_DMA_Abort_IT+0x8c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_DMA_Abort_IT+0xe8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d102      	bne.n	8001afe <HAL_DMA_Abort_IT+0x86>
 8001af8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001afc:	e00e      	b.n	8001b1c <HAL_DMA_Abort_IT+0xa4>
 8001afe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b02:	e00b      	b.n	8001b1c <HAL_DMA_Abort_IT+0xa4>
 8001b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b08:	e008      	b.n	8001b1c <HAL_DMA_Abort_IT+0xa4>
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0e:	e005      	b.n	8001b1c <HAL_DMA_Abort_IT+0xa4>
 8001b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b14:	e002      	b.n	8001b1c <HAL_DMA_Abort_IT+0xa4>
 8001b16:	2310      	movs	r3, #16
 8001b18:	e000      	b.n	8001b1c <HAL_DMA_Abort_IT+0xa4>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <HAL_DMA_Abort_IT+0xec>)
 8001b1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
    } 
  }
  return status;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40020008 	.word	0x40020008
 8001b50:	4002001c 	.word	0x4002001c
 8001b54:	40020030 	.word	0x40020030
 8001b58:	40020044 	.word	0x40020044
 8001b5c:	40020058 	.word	0x40020058
 8001b60:	4002006c 	.word	0x4002006c
 8001b64:	40020000 	.word	0x40020000

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b08b      	sub	sp, #44	; 0x2c
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7a:	e169      	b.n	8001e50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	f040 8158 	bne.w	8001e4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4a9a      	ldr	r2, [pc, #616]	; (8001e08 <HAL_GPIO_Init+0x2a0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d05e      	beq.n	8001c62 <HAL_GPIO_Init+0xfa>
 8001ba4:	4a98      	ldr	r2, [pc, #608]	; (8001e08 <HAL_GPIO_Init+0x2a0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d875      	bhi.n	8001c96 <HAL_GPIO_Init+0x12e>
 8001baa:	4a98      	ldr	r2, [pc, #608]	; (8001e0c <HAL_GPIO_Init+0x2a4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d058      	beq.n	8001c62 <HAL_GPIO_Init+0xfa>
 8001bb0:	4a96      	ldr	r2, [pc, #600]	; (8001e0c <HAL_GPIO_Init+0x2a4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d86f      	bhi.n	8001c96 <HAL_GPIO_Init+0x12e>
 8001bb6:	4a96      	ldr	r2, [pc, #600]	; (8001e10 <HAL_GPIO_Init+0x2a8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d052      	beq.n	8001c62 <HAL_GPIO_Init+0xfa>
 8001bbc:	4a94      	ldr	r2, [pc, #592]	; (8001e10 <HAL_GPIO_Init+0x2a8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d869      	bhi.n	8001c96 <HAL_GPIO_Init+0x12e>
 8001bc2:	4a94      	ldr	r2, [pc, #592]	; (8001e14 <HAL_GPIO_Init+0x2ac>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d04c      	beq.n	8001c62 <HAL_GPIO_Init+0xfa>
 8001bc8:	4a92      	ldr	r2, [pc, #584]	; (8001e14 <HAL_GPIO_Init+0x2ac>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d863      	bhi.n	8001c96 <HAL_GPIO_Init+0x12e>
 8001bce:	4a92      	ldr	r2, [pc, #584]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d046      	beq.n	8001c62 <HAL_GPIO_Init+0xfa>
 8001bd4:	4a90      	ldr	r2, [pc, #576]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d85d      	bhi.n	8001c96 <HAL_GPIO_Init+0x12e>
 8001bda:	2b12      	cmp	r3, #18
 8001bdc:	d82a      	bhi.n	8001c34 <HAL_GPIO_Init+0xcc>
 8001bde:	2b12      	cmp	r3, #18
 8001be0:	d859      	bhi.n	8001c96 <HAL_GPIO_Init+0x12e>
 8001be2:	a201      	add	r2, pc, #4	; (adr r2, 8001be8 <HAL_GPIO_Init+0x80>)
 8001be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be8:	08001c63 	.word	0x08001c63
 8001bec:	08001c3d 	.word	0x08001c3d
 8001bf0:	08001c4f 	.word	0x08001c4f
 8001bf4:	08001c91 	.word	0x08001c91
 8001bf8:	08001c97 	.word	0x08001c97
 8001bfc:	08001c97 	.word	0x08001c97
 8001c00:	08001c97 	.word	0x08001c97
 8001c04:	08001c97 	.word	0x08001c97
 8001c08:	08001c97 	.word	0x08001c97
 8001c0c:	08001c97 	.word	0x08001c97
 8001c10:	08001c97 	.word	0x08001c97
 8001c14:	08001c97 	.word	0x08001c97
 8001c18:	08001c97 	.word	0x08001c97
 8001c1c:	08001c97 	.word	0x08001c97
 8001c20:	08001c97 	.word	0x08001c97
 8001c24:	08001c97 	.word	0x08001c97
 8001c28:	08001c97 	.word	0x08001c97
 8001c2c:	08001c45 	.word	0x08001c45
 8001c30:	08001c59 	.word	0x08001c59
 8001c34:	4a79      	ldr	r2, [pc, #484]	; (8001e1c <HAL_GPIO_Init+0x2b4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c3a:	e02c      	b.n	8001c96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	623b      	str	r3, [r7, #32]
          break;
 8001c42:	e029      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	623b      	str	r3, [r7, #32]
          break;
 8001c4c:	e024      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	3308      	adds	r3, #8
 8001c54:	623b      	str	r3, [r7, #32]
          break;
 8001c56:	e01f      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	623b      	str	r3, [r7, #32]
          break;
 8001c60:	e01a      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	623b      	str	r3, [r7, #32]
          break;
 8001c6e:	e013      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	611a      	str	r2, [r3, #16]
          break;
 8001c82:	e009      	b.n	8001c98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c84:	2308      	movs	r3, #8
 8001c86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	615a      	str	r2, [r3, #20]
          break;
 8001c8e:	e003      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
          break;
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          break;
 8001c96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2bff      	cmp	r3, #255	; 0xff
 8001c9c:	d801      	bhi.n	8001ca2 <HAL_GPIO_Init+0x13a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	e001      	b.n	8001ca6 <HAL_GPIO_Init+0x13e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2bff      	cmp	r3, #255	; 0xff
 8001cac:	d802      	bhi.n	8001cb4 <HAL_GPIO_Init+0x14c>
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	e002      	b.n	8001cba <HAL_GPIO_Init+0x152>
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	3b08      	subs	r3, #8
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	210f      	movs	r1, #15
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	401a      	ands	r2, r3
 8001ccc:	6a39      	ldr	r1, [r7, #32]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 80b1 	beq.w	8001e4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce8:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <HAL_GPIO_Init+0x2b8>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a4c      	ldr	r2, [pc, #304]	; (8001e20 <HAL_GPIO_Init+0x2b8>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <HAL_GPIO_Init+0x2b8>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d00:	4a48      	ldr	r2, [pc, #288]	; (8001e24 <HAL_GPIO_Init+0x2bc>)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	220f      	movs	r2, #15
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a40      	ldr	r2, [pc, #256]	; (8001e28 <HAL_GPIO_Init+0x2c0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d013      	beq.n	8001d54 <HAL_GPIO_Init+0x1ec>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a3f      	ldr	r2, [pc, #252]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00d      	beq.n	8001d50 <HAL_GPIO_Init+0x1e8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a3e      	ldr	r2, [pc, #248]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d007      	beq.n	8001d4c <HAL_GPIO_Init+0x1e4>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a3d      	ldr	r2, [pc, #244]	; (8001e34 <HAL_GPIO_Init+0x2cc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d101      	bne.n	8001d48 <HAL_GPIO_Init+0x1e0>
 8001d44:	2303      	movs	r3, #3
 8001d46:	e006      	b.n	8001d56 <HAL_GPIO_Init+0x1ee>
 8001d48:	2304      	movs	r3, #4
 8001d4a:	e004      	b.n	8001d56 <HAL_GPIO_Init+0x1ee>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e002      	b.n	8001d56 <HAL_GPIO_Init+0x1ee>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_GPIO_Init+0x1ee>
 8001d54:	2300      	movs	r3, #0
 8001d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d58:	f002 0203 	and.w	r2, r2, #3
 8001d5c:	0092      	lsls	r2, r2, #2
 8001d5e:	4093      	lsls	r3, r2
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d66:	492f      	ldr	r1, [pc, #188]	; (8001e24 <HAL_GPIO_Init+0x2bc>)
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	492c      	ldr	r1, [pc, #176]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d8e:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4928      	ldr	r1, [pc, #160]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d006      	beq.n	8001db6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	4922      	ldr	r1, [pc, #136]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60cb      	str	r3, [r1, #12]
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	491e      	ldr	r1, [pc, #120]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4918      	ldr	r1, [pc, #96]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
 8001ddc:	e006      	b.n	8001dec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dde:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4914      	ldr	r1, [pc, #80]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d021      	beq.n	8001e3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	490e      	ldr	r1, [pc, #56]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
 8001e04:	e021      	b.n	8001e4a <HAL_GPIO_Init+0x2e2>
 8001e06:	bf00      	nop
 8001e08:	10320000 	.word	0x10320000
 8001e0c:	10310000 	.word	0x10310000
 8001e10:	10220000 	.word	0x10220000
 8001e14:	10210000 	.word	0x10210000
 8001e18:	10120000 	.word	0x10120000
 8001e1c:	10110000 	.word	0x10110000
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40010800 	.word	0x40010800
 8001e2c:	40010c00 	.word	0x40010c00
 8001e30:	40011000 	.word	0x40011000
 8001e34:	40011400 	.word	0x40011400
 8001e38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_GPIO_Init+0x304>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	4909      	ldr	r1, [pc, #36]	; (8001e6c <HAL_GPIO_Init+0x304>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f47f ae8e 	bne.w	8001b7c <HAL_GPIO_Init+0x14>
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	372c      	adds	r7, #44	; 0x2c
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	40010400 	.word	0x40010400

08001e70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	887b      	ldrh	r3, [r7, #2]
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e001      	b.n	8001e92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	807b      	strh	r3, [r7, #2]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eae:	787b      	ldrb	r3, [r7, #1]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb4:	887a      	ldrh	r2, [r7, #2]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eba:	e003      	b.n	8001ec4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	041a      	lsls	r2, r3, #16
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	611a      	str	r2, [r3, #16]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e26c      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8087 	beq.w	8001ffe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef0:	4b92      	ldr	r3, [pc, #584]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d00c      	beq.n	8001f16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001efc:	4b8f      	ldr	r3, [pc, #572]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d112      	bne.n	8001f2e <HAL_RCC_OscConfig+0x5e>
 8001f08:	4b8c      	ldr	r3, [pc, #560]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f14:	d10b      	bne.n	8001f2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f16:	4b89      	ldr	r3, [pc, #548]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d06c      	beq.n	8001ffc <HAL_RCC_OscConfig+0x12c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d168      	bne.n	8001ffc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e246      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f36:	d106      	bne.n	8001f46 <HAL_RCC_OscConfig+0x76>
 8001f38:	4b80      	ldr	r3, [pc, #512]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a7f      	ldr	r2, [pc, #508]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e02e      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd4>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x98>
 8001f4e:	4b7b      	ldr	r3, [pc, #492]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a7a      	ldr	r2, [pc, #488]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b78      	ldr	r3, [pc, #480]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a77      	ldr	r2, [pc, #476]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e01d      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0xbc>
 8001f72:	4b72      	ldr	r3, [pc, #456]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a71      	ldr	r2, [pc, #452]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b6f      	ldr	r3, [pc, #444]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6e      	ldr	r2, [pc, #440]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e00b      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd4>
 8001f8c:	4b6b      	ldr	r3, [pc, #428]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a6a      	ldr	r2, [pc, #424]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b68      	ldr	r3, [pc, #416]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a67      	ldr	r2, [pc, #412]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d013      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fbee 	bl	800178c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff fbea 	bl	800178c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e1fa      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b5d      	ldr	r3, [pc, #372]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0xe4>
 8001fd2:	e014      	b.n	8001ffe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fbda 	bl	800178c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7ff fbd6 	bl	800178c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1e6      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x10c>
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d063      	beq.n	80020d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800200a:	4b4c      	ldr	r3, [pc, #304]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00b      	beq.n	800202e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002016:	4b49      	ldr	r3, [pc, #292]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b08      	cmp	r3, #8
 8002020:	d11c      	bne.n	800205c <HAL_RCC_OscConfig+0x18c>
 8002022:	4b46      	ldr	r3, [pc, #280]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d116      	bne.n	800205c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202e:	4b43      	ldr	r3, [pc, #268]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_RCC_OscConfig+0x176>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e1ba      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002046:	4b3d      	ldr	r3, [pc, #244]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4939      	ldr	r1, [pc, #228]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205a:	e03a      	b.n	80020d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002064:	4b36      	ldr	r3, [pc, #216]	; (8002140 <HAL_RCC_OscConfig+0x270>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7ff fb8f 	bl	800178c <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002072:	f7ff fb8b 	bl	800178c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e19b      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4927      	ldr	r1, [pc, #156]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
 80020a4:	e015      	b.n	80020d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <HAL_RCC_OscConfig+0x270>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff fb6e 	bl	800178c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b4:	f7ff fb6a 	bl	800178c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e17a      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d03a      	beq.n	8002154 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d019      	beq.n	800211a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HAL_RCC_OscConfig+0x274>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ec:	f7ff fb4e 	bl	800178c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f4:	f7ff fb4a 	bl	800178c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e15a      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002112:	2001      	movs	r0, #1
 8002114:	f000 facc 	bl	80026b0 <RCC_Delay>
 8002118:	e01c      	b.n	8002154 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_RCC_OscConfig+0x274>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002120:	f7ff fb34 	bl	800178c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002126:	e00f      	b.n	8002148 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002128:	f7ff fb30 	bl	800178c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d908      	bls.n	8002148 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e140      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	42420000 	.word	0x42420000
 8002144:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002148:	4b9e      	ldr	r3, [pc, #632]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1e9      	bne.n	8002128 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80a6 	beq.w	80022ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002166:	4b97      	ldr	r3, [pc, #604]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10d      	bne.n	800218e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b94      	ldr	r3, [pc, #592]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a93      	ldr	r2, [pc, #588]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217c:	61d3      	str	r3, [r2, #28]
 800217e:	4b91      	ldr	r3, [pc, #580]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218a:	2301      	movs	r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218e:	4b8e      	ldr	r3, [pc, #568]	; (80023c8 <HAL_RCC_OscConfig+0x4f8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d118      	bne.n	80021cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219a:	4b8b      	ldr	r3, [pc, #556]	; (80023c8 <HAL_RCC_OscConfig+0x4f8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a8a      	ldr	r2, [pc, #552]	; (80023c8 <HAL_RCC_OscConfig+0x4f8>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a6:	f7ff faf1 	bl	800178c <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ae:	f7ff faed 	bl	800178c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b64      	cmp	r3, #100	; 0x64
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0fd      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	4b81      	ldr	r3, [pc, #516]	; (80023c8 <HAL_RCC_OscConfig+0x4f8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d106      	bne.n	80021e2 <HAL_RCC_OscConfig+0x312>
 80021d4:	4b7b      	ldr	r3, [pc, #492]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4a7a      	ldr	r2, [pc, #488]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6213      	str	r3, [r2, #32]
 80021e0:	e02d      	b.n	800223e <HAL_RCC_OscConfig+0x36e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0x334>
 80021ea:	4b76      	ldr	r3, [pc, #472]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a75      	ldr	r2, [pc, #468]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6213      	str	r3, [r2, #32]
 80021f6:	4b73      	ldr	r3, [pc, #460]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a72      	ldr	r2, [pc, #456]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	e01c      	b.n	800223e <HAL_RCC_OscConfig+0x36e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b05      	cmp	r3, #5
 800220a:	d10c      	bne.n	8002226 <HAL_RCC_OscConfig+0x356>
 800220c:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	4a6c      	ldr	r2, [pc, #432]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6213      	str	r3, [r2, #32]
 8002218:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a69      	ldr	r2, [pc, #420]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	e00b      	b.n	800223e <HAL_RCC_OscConfig+0x36e>
 8002226:	4b67      	ldr	r3, [pc, #412]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a66      	ldr	r2, [pc, #408]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	6213      	str	r3, [r2, #32]
 8002232:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a63      	ldr	r2, [pc, #396]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d015      	beq.n	8002272 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7ff faa1 	bl	800178c <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7ff fa9d 	bl	800178c <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e0ab      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002264:	4b57      	ldr	r3, [pc, #348]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ee      	beq.n	800224e <HAL_RCC_OscConfig+0x37e>
 8002270:	e014      	b.n	800229c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002272:	f7ff fa8b 	bl	800178c <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7ff fa87 	bl	800178c <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	; 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e095      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002290:	4b4c      	ldr	r3, [pc, #304]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1ee      	bne.n	800227a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a2:	4b48      	ldr	r3, [pc, #288]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	4a47      	ldr	r2, [pc, #284]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8081 	beq.w	80023ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b8:	4b42      	ldr	r3, [pc, #264]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d061      	beq.n	8002388 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d146      	bne.n	800235a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022cc:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <HAL_RCC_OscConfig+0x4fc>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7ff fa5b 	bl	800178c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022da:	f7ff fa57 	bl	800178c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e067      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ec:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002300:	d108      	bne.n	8002314 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002302:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	492d      	ldr	r1, [pc, #180]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002314:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a19      	ldr	r1, [r3, #32]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	430b      	orrs	r3, r1
 8002326:	4927      	ldr	r1, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800232c:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_RCC_OscConfig+0x4fc>)
 800232e:	2201      	movs	r2, #1
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7ff fa2b 	bl	800178c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7ff fa27 	bl	800178c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e037      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x46a>
 8002358:	e02f      	b.n	80023ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <HAL_RCC_OscConfig+0x4fc>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7ff fa14 	bl	800178c <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7ff fa10 	bl	800178c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e020      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x498>
 8002386:	e018      	b.n	80023ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e013      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40007000 	.word	0x40007000
 80023cc:	42420060 	.word	0x42420060

080023d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0d0      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d910      	bls.n	8002414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	4965      	ldr	r1, [pc, #404]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b63      	ldr	r3, [pc, #396]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b8      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800242c:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a58      	ldr	r2, [pc, #352]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002436:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a52      	ldr	r2, [pc, #328]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800244e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	494d      	ldr	r1, [pc, #308]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d040      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d115      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e073      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e06b      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ae:	4b39      	ldr	r3, [pc, #228]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4936      	ldr	r1, [pc, #216]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c0:	f7ff f964 	bl	800178c <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7ff f960 	bl	800178c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e053      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 020c 	and.w	r2, r3, #12
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1eb      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d210      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	4922      	ldr	r1, [pc, #136]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e032      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4916      	ldr	r1, [pc, #88]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	490e      	ldr	r1, [pc, #56]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800255e:	f000 f821 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8002562:	4602      	mov	r2, r0
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	490a      	ldr	r1, [pc, #40]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002570:	5ccb      	ldrb	r3, [r1, r3]
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_RCC_ClockConfig+0x1cc>)
 8002578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1d0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff f8c2 	bl	8001708 <HAL_InitTick>

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40022000 	.word	0x40022000
 8002594:	40021000 	.word	0x40021000
 8002598:	0800407c 	.word	0x0800407c
 800259c:	2000007c 	.word	0x2000007c
 80025a0:	20000080 	.word	0x20000080

080025a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HAL_RCC_GetSysClockFreq+0x94>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d002      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x30>
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d003      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x36>
 80025d2:	e027      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_RCC_GetSysClockFreq+0x98>)
 80025d6:	613b      	str	r3, [r7, #16]
      break;
 80025d8:	e027      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	0c9b      	lsrs	r3, r3, #18
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	4a17      	ldr	r2, [pc, #92]	; (8002640 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025e4:	5cd3      	ldrb	r3, [r2, r3]
 80025e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d010      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_RCC_GetSysClockFreq+0x94>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	0c5b      	lsrs	r3, r3, #17
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	4a11      	ldr	r2, [pc, #68]	; (8002644 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a0d      	ldr	r2, [pc, #52]	; (800263c <HAL_RCC_GetSysClockFreq+0x98>)
 8002606:	fb02 f203 	mul.w	r2, r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	e004      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	613b      	str	r3, [r7, #16]
      break;
 8002622:	e002      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetSysClockFreq+0x98>)
 8002626:	613b      	str	r3, [r7, #16]
      break;
 8002628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262a:	693b      	ldr	r3, [r7, #16]
}
 800262c:	4618      	mov	r0, r3
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
 800263c:	007a1200 	.word	0x007a1200
 8002640:	08004094 	.word	0x08004094
 8002644:	080040a4 	.word	0x080040a4
 8002648:	003d0900 	.word	0x003d0900

0800264c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002650:	4b02      	ldr	r3, [pc, #8]	; (800265c <HAL_RCC_GetHCLKFreq+0x10>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	2000007c 	.word	0x2000007c

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002664:	f7ff fff2 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	4903      	ldr	r1, [pc, #12]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	0800408c 	.word	0x0800408c

08002688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800268c:	f7ff ffde 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	0adb      	lsrs	r3, r3, #11
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4903      	ldr	r1, [pc, #12]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	0800408c 	.word	0x0800408c

080026b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <RCC_Delay+0x34>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <RCC_Delay+0x38>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	0a5b      	lsrs	r3, r3, #9
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026cc:	bf00      	nop
  }
  while (Delay --);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1e5a      	subs	r2, r3, #1
 80026d2:	60fa      	str	r2, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f9      	bne.n	80026cc <RCC_Delay+0x1c>
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	2000007c 	.word	0x2000007c
 80026e8:	10624dd3 	.word	0x10624dd3

080026ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e041      	b.n	8002782 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fe8e 	bl	8001434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f000 fc28 	bl	8002f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d001      	beq.n	80027a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e03a      	b.n	800281a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a18      	ldr	r2, [pc, #96]	; (8002824 <HAL_TIM_Base_Start_IT+0x98>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00e      	beq.n	80027e4 <HAL_TIM_Base_Start_IT+0x58>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ce:	d009      	beq.n	80027e4 <HAL_TIM_Base_Start_IT+0x58>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <HAL_TIM_Base_Start_IT+0x9c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d004      	beq.n	80027e4 <HAL_TIM_Base_Start_IT+0x58>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a13      	ldr	r2, [pc, #76]	; (800282c <HAL_TIM_Base_Start_IT+0xa0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d111      	bne.n	8002808 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d010      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002806:	e007      	b.n	8002818 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40000400 	.word	0x40000400
 800282c:	40000800 	.word	0x40000800

08002830 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e041      	b.n	80028c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe fe10 	bl	800147c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f000 fb86 	bl	8002f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <HAL_TIM_PWM_Start+0x24>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	bf14      	ite	ne
 80028ec:	2301      	movne	r3, #1
 80028ee:	2300      	moveq	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e022      	b.n	800293a <HAL_TIM_PWM_Start+0x6a>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d109      	bne.n	800290e <HAL_TIM_PWM_Start+0x3e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b01      	cmp	r3, #1
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	e015      	b.n	800293a <HAL_TIM_PWM_Start+0x6a>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d109      	bne.n	8002928 <HAL_TIM_PWM_Start+0x58>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	bf14      	ite	ne
 8002920:	2301      	movne	r3, #1
 8002922:	2300      	moveq	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e008      	b.n	800293a <HAL_TIM_PWM_Start+0x6a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	bf14      	ite	ne
 8002934:	2301      	movne	r3, #1
 8002936:	2300      	moveq	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e05e      	b.n	8002a00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d104      	bne.n	8002952 <HAL_TIM_PWM_Start+0x82>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002950:	e013      	b.n	800297a <HAL_TIM_PWM_Start+0xaa>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b04      	cmp	r3, #4
 8002956:	d104      	bne.n	8002962 <HAL_TIM_PWM_Start+0x92>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002960:	e00b      	b.n	800297a <HAL_TIM_PWM_Start+0xaa>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d104      	bne.n	8002972 <HAL_TIM_PWM_Start+0xa2>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002970:	e003      	b.n	800297a <HAL_TIM_PWM_Start+0xaa>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2202      	movs	r2, #2
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2201      	movs	r2, #1
 8002980:	6839      	ldr	r1, [r7, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fd7c 	bl	8003480 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <HAL_TIM_PWM_Start+0x138>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d107      	bne.n	80029a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <HAL_TIM_PWM_Start+0x138>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_TIM_PWM_Start+0xfa>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d009      	beq.n	80029ca <HAL_TIM_PWM_Start+0xfa>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <HAL_TIM_PWM_Start+0x13c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_TIM_PWM_Start+0xfa>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <HAL_TIM_PWM_Start+0x140>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d111      	bne.n	80029ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d010      	beq.n	80029fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ec:	e007      	b.n	80029fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40012c00 	.word	0x40012c00
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40000800 	.word	0x40000800

08002a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d122      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d11b      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0202 	mvn.w	r2, #2
 8002a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fa76 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa69 	bl	8002f36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fa78 	bl	8002f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d122      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0204 	mvn.w	r2, #4
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa4c 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fa3f 	bl	8002f36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fa4e 	bl	8002f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d122      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d11b      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0208 	mvn.w	r2, #8
 8002ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2204      	movs	r2, #4
 8002aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fa22 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 8002b04:	e005      	b.n	8002b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fa15 	bl	8002f36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fa24 	bl	8002f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d122      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d11b      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0210 	mvn.w	r2, #16
 8002b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2208      	movs	r2, #8
 8002b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f9f8 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f9eb 	bl	8002f36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f9fa 	bl	8002f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d10e      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d107      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0201 	mvn.w	r2, #1
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fd fff2 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b80      	cmp	r3, #128	; 0x80
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb0:	2b80      	cmp	r3, #128	; 0x80
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fce9 	bl	8003596 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b40      	cmp	r3, #64	; 0x40
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d107      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9be 	bl	8002f6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0220 	mvn.w	r2, #32
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fcb4 	bl	8003584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e0ae      	b.n	8002da0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	f200 809f 	bhi.w	8002d90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c52:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002c8d 	.word	0x08002c8d
 8002c5c:	08002d91 	.word	0x08002d91
 8002c60:	08002d91 	.word	0x08002d91
 8002c64:	08002d91 	.word	0x08002d91
 8002c68:	08002ccd 	.word	0x08002ccd
 8002c6c:	08002d91 	.word	0x08002d91
 8002c70:	08002d91 	.word	0x08002d91
 8002c74:	08002d91 	.word	0x08002d91
 8002c78:	08002d0f 	.word	0x08002d0f
 8002c7c:	08002d91 	.word	0x08002d91
 8002c80:	08002d91 	.word	0x08002d91
 8002c84:	08002d91 	.word	0x08002d91
 8002c88:	08002d4f 	.word	0x08002d4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f9d6 	bl	8003044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0208 	orr.w	r2, r2, #8
 8002ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0204 	bic.w	r2, r2, #4
 8002cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6999      	ldr	r1, [r3, #24]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	619a      	str	r2, [r3, #24]
      break;
 8002cca:	e064      	b.n	8002d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fa1c 	bl	8003110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699a      	ldr	r2, [r3, #24]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6999      	ldr	r1, [r3, #24]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	021a      	lsls	r2, r3, #8
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	619a      	str	r2, [r3, #24]
      break;
 8002d0c:	e043      	b.n	8002d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fa65 	bl	80031e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69da      	ldr	r2, [r3, #28]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0208 	orr.w	r2, r2, #8
 8002d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0204 	bic.w	r2, r2, #4
 8002d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69d9      	ldr	r1, [r3, #28]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	61da      	str	r2, [r3, #28]
      break;
 8002d4c:	e023      	b.n	8002d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 faaf 	bl	80032b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69d9      	ldr	r1, [r3, #28]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	021a      	lsls	r2, r3, #8
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	61da      	str	r2, [r3, #28]
      break;
 8002d8e:	e002      	b.n	8002d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	75fb      	strb	r3, [r7, #23]
      break;
 8002d94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_TIM_ConfigClockSource+0x1c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e0b4      	b.n	8002f2e <HAL_TIM_ConfigClockSource+0x186>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfc:	d03e      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0xd4>
 8002dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e02:	f200 8087 	bhi.w	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0a:	f000 8086 	beq.w	8002f1a <HAL_TIM_ConfigClockSource+0x172>
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e12:	d87f      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e14:	2b70      	cmp	r3, #112	; 0x70
 8002e16:	d01a      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0xa6>
 8002e18:	2b70      	cmp	r3, #112	; 0x70
 8002e1a:	d87b      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e1c:	2b60      	cmp	r3, #96	; 0x60
 8002e1e:	d050      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x11a>
 8002e20:	2b60      	cmp	r3, #96	; 0x60
 8002e22:	d877      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e24:	2b50      	cmp	r3, #80	; 0x50
 8002e26:	d03c      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0xfa>
 8002e28:	2b50      	cmp	r3, #80	; 0x50
 8002e2a:	d873      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d058      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x13a>
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d86f      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e34:	2b30      	cmp	r3, #48	; 0x30
 8002e36:	d064      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x15a>
 8002e38:	2b30      	cmp	r3, #48	; 0x30
 8002e3a:	d86b      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d060      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x15a>
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d867      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d05c      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x15a>
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d05a      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x15a>
 8002e4c:	e062      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6899      	ldr	r1, [r3, #8]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f000 faf0 	bl	8003442 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	609a      	str	r2, [r3, #8]
      break;
 8002e7a:	e04f      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6899      	ldr	r1, [r3, #8]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f000 fad9 	bl	8003442 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e9e:	609a      	str	r2, [r3, #8]
      break;
 8002ea0:	e03c      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f000 fa50 	bl	8003354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2150      	movs	r1, #80	; 0x50
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 faa7 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 8002ec0:	e02c      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f000 fa6e 	bl	80033b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2160      	movs	r1, #96	; 0x60
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fa97 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 8002ee0:	e01c      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f000 fa30 	bl	8003354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2140      	movs	r1, #64	; 0x40
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fa87 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 8002f00:	e00c      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	f000 fa7e 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 8002f12:	e003      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      break;
 8002f18:	e000      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr

08002f5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
	...

08002f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a29      	ldr	r2, [pc, #164]	; (8003038 <TIM_Base_SetConfig+0xb8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00b      	beq.n	8002fb0 <TIM_Base_SetConfig+0x30>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9e:	d007      	beq.n	8002fb0 <TIM_Base_SetConfig+0x30>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a26      	ldr	r2, [pc, #152]	; (800303c <TIM_Base_SetConfig+0xbc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d003      	beq.n	8002fb0 <TIM_Base_SetConfig+0x30>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a25      	ldr	r2, [pc, #148]	; (8003040 <TIM_Base_SetConfig+0xc0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d108      	bne.n	8002fc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <TIM_Base_SetConfig+0xb8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00b      	beq.n	8002fe2 <TIM_Base_SetConfig+0x62>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd0:	d007      	beq.n	8002fe2 <TIM_Base_SetConfig+0x62>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a19      	ldr	r2, [pc, #100]	; (800303c <TIM_Base_SetConfig+0xbc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d003      	beq.n	8002fe2 <TIM_Base_SetConfig+0x62>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a18      	ldr	r2, [pc, #96]	; (8003040 <TIM_Base_SetConfig+0xc0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d108      	bne.n	8002ff4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a07      	ldr	r2, [pc, #28]	; (8003038 <TIM_Base_SetConfig+0xb8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d103      	bne.n	8003028 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	615a      	str	r2, [r3, #20]
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40000400 	.word	0x40000400
 8003040:	40000800 	.word	0x40000800

08003044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f023 0201 	bic.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f023 0302 	bic.w	r3, r3, #2
 800308c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a1c      	ldr	r2, [pc, #112]	; (800310c <TIM_OC1_SetConfig+0xc8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d10c      	bne.n	80030ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f023 0308 	bic.w	r3, r3, #8
 80030a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a13      	ldr	r2, [pc, #76]	; (800310c <TIM_OC1_SetConfig+0xc8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d111      	bne.n	80030e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40012c00 	.word	0x40012c00

08003110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f023 0210 	bic.w	r2, r3, #16
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0320 	bic.w	r3, r3, #32
 800315a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <TIM_OC2_SetConfig+0xd0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d10d      	bne.n	800318c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800318a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <TIM_OC2_SetConfig+0xd0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d113      	bne.n	80031bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800319a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	621a      	str	r2, [r3, #32]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	40012c00 	.word	0x40012c00

080031e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0303 	bic.w	r3, r3, #3
 800321a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800322c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <TIM_OC3_SetConfig+0xd0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d10d      	bne.n	800325e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800325c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <TIM_OC3_SetConfig+0xd0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d113      	bne.n	800328e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800326c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	621a      	str	r2, [r3, #32]
}
 80032a8:	bf00      	nop
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40012c00 	.word	0x40012c00

080032b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	031b      	lsls	r3, r3, #12
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <TIM_OC4_SetConfig+0x98>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d109      	bne.n	800332c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800331e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	019b      	lsls	r3, r3, #6
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	621a      	str	r2, [r3, #32]
}
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	40012c00 	.word	0x40012c00

08003354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 0201 	bic.w	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800337e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f023 030a 	bic.w	r3, r3, #10
 8003390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	621a      	str	r2, [r3, #32]
}
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f023 0210 	bic.w	r2, r3, #16
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	031b      	lsls	r3, r3, #12
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	621a      	str	r2, [r3, #32]
}
 8003404:	bf00      	nop
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	f043 0307 	orr.w	r3, r3, #7
 8003430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	609a      	str	r2, [r3, #8]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003442:	b480      	push	{r7}
 8003444:	b087      	sub	sp, #28
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800345c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	021a      	lsls	r2, r3, #8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	431a      	orrs	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4313      	orrs	r3, r2
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	609a      	str	r2, [r3, #8]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2201      	movs	r2, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1a      	ldr	r2, [r3, #32]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	43db      	mvns	r3, r3
 80034a2:	401a      	ands	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a1a      	ldr	r2, [r3, #32]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	431a      	orrs	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	621a      	str	r2, [r3, #32]
}
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034dc:	2302      	movs	r3, #2
 80034de:	e046      	b.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a16      	ldr	r2, [pc, #88]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00e      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d009      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a12      	ldr	r2, [pc, #72]	; (800357c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a10      	ldr	r2, [pc, #64]	; (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10c      	bne.n	800355c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	4313      	orrs	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	40012c00 	.word	0x40012c00
 800357c:	40000400 	.word	0x40000400
 8003580:	40000800 	.word	0x40000800

08003584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr

08003596 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e042      	b.n	8003640 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd ffc0 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2224      	movs	r2, #36	; 0x24
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fc7f 	bl	8003ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b0ba      	sub	sp, #232	; 0xe8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800367a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10f      	bne.n	80036ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800368e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_UART_IRQHandler+0x66>
 800369a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fb63 	bl	8003d72 <UART_Receive_IT>
      return;
 80036ac:	e25b      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80de 	beq.w	8003874 <HAL_UART_IRQHandler+0x22c>
 80036b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d106      	bne.n	80036d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80d1 	beq.w	8003874 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_UART_IRQHandler+0xae>
 80036de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_UART_IRQHandler+0xd2>
 8003702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f043 0202 	orr.w	r2, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800371a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <HAL_UART_IRQHandler+0xf6>
 8003726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f043 0204 	orr.w	r2, r3, #4
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d011      	beq.n	800376e <HAL_UART_IRQHandler+0x126>
 800374a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	f043 0208 	orr.w	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 81f2 	beq.w	8003b5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_UART_IRQHandler+0x14e>
 8003784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 faee 	bl	8003d72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <HAL_UART_IRQHandler+0x17a>
 80037ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d04f      	beq.n	8003862 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f9f8 	bl	8003bb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d041      	beq.n	800385a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3314      	adds	r3, #20
 80037dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003802:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800380e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800381a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1d9      	bne.n	80037d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d013      	beq.n	8003852 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	4a7e      	ldr	r2, [pc, #504]	; (8003a28 <HAL_UART_IRQHandler+0x3e0>)
 8003830:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe f91e 	bl	8001a78 <HAL_DMA_Abort_IT>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d016      	beq.n	8003870 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800384c:	4610      	mov	r0, r2
 800384e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e00e      	b.n	8003870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f99c 	bl	8003b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e00a      	b.n	8003870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f998 	bl	8003b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	e006      	b.n	8003870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f994 	bl	8003b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800386e:	e175      	b.n	8003b5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	bf00      	nop
    return;
 8003872:	e173      	b.n	8003b5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	2b01      	cmp	r3, #1
 800387a:	f040 814f 	bne.w	8003b1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800387e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8148 	beq.w	8003b1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8141 	beq.w	8003b1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80b6 	beq.w	8003a2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8145 	beq.w	8003b60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038de:	429a      	cmp	r2, r3
 80038e0:	f080 813e 	bcs.w	8003b60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	f000 8088 	beq.w	8003a08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003906:	e853 3f00 	ldrex	r3, [r3]
 800390a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800390e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003916:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	330c      	adds	r3, #12
 8003920:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003924:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003928:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003930:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800393c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1d9      	bne.n	80038f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3314      	adds	r3, #20
 800394a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3314      	adds	r3, #20
 8003964:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003968:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800396c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003970:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800397a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e1      	bne.n	8003944 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3314      	adds	r3, #20
 8003986:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3314      	adds	r3, #20
 80039a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e3      	bne.n	8003980 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d8:	f023 0310 	bic.w	r3, r3, #16
 80039dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80039ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039f2:	e841 2300 	strex	r3, r2, [r1]
 80039f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1e3      	bne.n	80039c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd fffd 	bl	8001a02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8bf 	bl	8003ba2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a24:	e09c      	b.n	8003b60 <HAL_UART_IRQHandler+0x518>
 8003a26:	bf00      	nop
 8003a28:	08003c7d 	.word	0x08003c7d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 808e 	beq.w	8003b64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8089 	beq.w	8003b64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	330c      	adds	r3, #12
 8003a58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a76:	647a      	str	r2, [r7, #68]	; 0x44
 8003a78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e3      	bne.n	8003a52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	623b      	str	r3, [r7, #32]
   return(result);
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3314      	adds	r3, #20
 8003aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003aae:	633a      	str	r2, [r7, #48]	; 0x30
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e3      	bne.n	8003a8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0310 	bic.w	r3, r3, #16
 8003ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003af4:	61fa      	str	r2, [r7, #28]
 8003af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	69b9      	ldr	r1, [r7, #24]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	617b      	str	r3, [r7, #20]
   return(result);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e3      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f844 	bl	8003ba2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b1a:	e023      	b.n	8003b64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <HAL_UART_IRQHandler+0x4f4>
 8003b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f8b5 	bl	8003ca4 <UART_Transmit_IT>
    return;
 8003b3a:	e014      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00e      	beq.n	8003b66 <HAL_UART_IRQHandler+0x51e>
 8003b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8f4 	bl	8003d42 <UART_EndTransmit_IT>
    return;
 8003b5a:	e004      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b5c:	bf00      	nop
 8003b5e:	e002      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b60:	bf00      	nop
 8003b62:	e000      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b64:	bf00      	nop
  }
}
 8003b66:	37e8      	adds	r7, #232	; 0xe8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr

08003b7e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b095      	sub	sp, #84	; 0x54
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003be0:	643a      	str	r2, [r7, #64]	; 0x40
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003be6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e5      	bne.n	8003bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3314      	adds	r3, #20
 8003c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1c:	e841 2300 	strex	r3, r2, [r1]
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e5      	bne.n	8003bf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d119      	bne.n	8003c64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f023 0310 	bic.w	r3, r3, #16
 8003c46:	647b      	str	r3, [r7, #68]	; 0x44
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c50:	61ba      	str	r2, [r7, #24]
 8003c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6979      	ldr	r1, [r7, #20]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e5      	bne.n	8003c30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c72:	bf00      	nop
 8003c74:	3754      	adds	r7, #84	; 0x54
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff ff7a 	bl	8003b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b21      	cmp	r3, #33	; 0x21
 8003cb6:	d13e      	bne.n	8003d36 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc0:	d114      	bne.n	8003cec <UART_Transmit_IT+0x48>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d110      	bne.n	8003cec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cde:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	1c9a      	adds	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	621a      	str	r2, [r3, #32]
 8003cea:	e008      	b.n	8003cfe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	1c59      	adds	r1, r3, #1
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6211      	str	r1, [r2, #32]
 8003cf6:	781a      	ldrb	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10f      	bne.n	8003d32 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e000      	b.n	8003d38 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
  }
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff ff02 	bl	8003b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b08c      	sub	sp, #48	; 0x30
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b22      	cmp	r3, #34	; 0x22
 8003d84:	f040 80ae 	bne.w	8003ee4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d90:	d117      	bne.n	8003dc2 <UART_Receive_IT+0x50>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d113      	bne.n	8003dc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	1c9a      	adds	r2, r3, #2
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc0:	e026      	b.n	8003e10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd4:	d007      	beq.n	8003de6 <UART_Receive_IT+0x74>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <UART_Receive_IT+0x82>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	e008      	b.n	8003e06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d15d      	bne.n	8003ee0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0220 	bic.w	r2, r2, #32
 8003e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d135      	bne.n	8003ed6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f023 0310 	bic.w	r3, r3, #16
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e90:	623a      	str	r2, [r7, #32]
 8003e92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	69f9      	ldr	r1, [r7, #28]
 8003e96:	6a3a      	ldr	r2, [r7, #32]
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e5      	bne.n	8003e70 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	d10a      	bne.n	8003ec8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ecc:	4619      	mov	r1, r3
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fe67 	bl	8003ba2 <HAL_UARTEx_RxEventCallback>
 8003ed4:	e002      	b.n	8003edc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff fe51 	bl	8003b7e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e002      	b.n	8003ee6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e000      	b.n	8003ee6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
  }
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3730      	adds	r7, #48	; 0x30
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f2a:	f023 030c 	bic.w	r3, r3, #12
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	430b      	orrs	r3, r1
 8003f36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2c      	ldr	r2, [pc, #176]	; (8004004 <UART_SetConfig+0x114>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d103      	bne.n	8003f60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f58:	f7fe fb96 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	e002      	b.n	8003f66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f60:	f7fe fb7e 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 8003f64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009a      	lsls	r2, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	4a22      	ldr	r2, [pc, #136]	; (8004008 <UART_SetConfig+0x118>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	0119      	lsls	r1, r3, #4
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009a      	lsls	r2, r3, #2
 8003f90:	441a      	add	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f9c:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <UART_SetConfig+0x118>)
 8003f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2064      	movs	r0, #100	; 0x64
 8003fa6:	fb00 f303 	mul.w	r3, r0, r3
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	3332      	adds	r3, #50	; 0x32
 8003fb0:	4a15      	ldr	r2, [pc, #84]	; (8004008 <UART_SetConfig+0x118>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fbc:	4419      	add	r1, r3
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009a      	lsls	r2, r3, #2
 8003fc8:	441a      	add	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <UART_SetConfig+0x118>)
 8003fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2064      	movs	r0, #100	; 0x64
 8003fde:	fb00 f303 	mul.w	r3, r0, r3
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	3332      	adds	r3, #50	; 0x32
 8003fe8:	4a07      	ldr	r2, [pc, #28]	; (8004008 <UART_SetConfig+0x118>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	f003 020f 	and.w	r2, r3, #15
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	440a      	add	r2, r1
 8003ffa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40013800 	.word	0x40013800
 8004008:	51eb851f 	.word	0x51eb851f

0800400c <__libc_init_array>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	2600      	movs	r6, #0
 8004010:	4d0c      	ldr	r5, [pc, #48]	; (8004044 <__libc_init_array+0x38>)
 8004012:	4c0d      	ldr	r4, [pc, #52]	; (8004048 <__libc_init_array+0x3c>)
 8004014:	1b64      	subs	r4, r4, r5
 8004016:	10a4      	asrs	r4, r4, #2
 8004018:	42a6      	cmp	r6, r4
 800401a:	d109      	bne.n	8004030 <__libc_init_array+0x24>
 800401c:	f000 f822 	bl	8004064 <_init>
 8004020:	2600      	movs	r6, #0
 8004022:	4d0a      	ldr	r5, [pc, #40]	; (800404c <__libc_init_array+0x40>)
 8004024:	4c0a      	ldr	r4, [pc, #40]	; (8004050 <__libc_init_array+0x44>)
 8004026:	1b64      	subs	r4, r4, r5
 8004028:	10a4      	asrs	r4, r4, #2
 800402a:	42a6      	cmp	r6, r4
 800402c:	d105      	bne.n	800403a <__libc_init_array+0x2e>
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	f855 3b04 	ldr.w	r3, [r5], #4
 8004034:	4798      	blx	r3
 8004036:	3601      	adds	r6, #1
 8004038:	e7ee      	b.n	8004018 <__libc_init_array+0xc>
 800403a:	f855 3b04 	ldr.w	r3, [r5], #4
 800403e:	4798      	blx	r3
 8004040:	3601      	adds	r6, #1
 8004042:	e7f2      	b.n	800402a <__libc_init_array+0x1e>
 8004044:	080040a8 	.word	0x080040a8
 8004048:	080040a8 	.word	0x080040a8
 800404c:	080040a8 	.word	0x080040a8
 8004050:	080040ac 	.word	0x080040ac

08004054 <memset>:
 8004054:	4603      	mov	r3, r0
 8004056:	4402      	add	r2, r0
 8004058:	4293      	cmp	r3, r2
 800405a:	d100      	bne.n	800405e <memset+0xa>
 800405c:	4770      	bx	lr
 800405e:	f803 1b01 	strb.w	r1, [r3], #1
 8004062:	e7f9      	b.n	8004058 <memset+0x4>

08004064 <_init>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr

08004070 <_fini>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr
