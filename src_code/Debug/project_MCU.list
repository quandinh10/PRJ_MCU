
project_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003e80  08003e80  00013e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eac  08003eac  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003eac  08003eac  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eac  08003eac  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000064  08003f18  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08003f18  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011350  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269b  00000000  00000000  000313dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00033a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  000347f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190af  00000000  00000000  00035468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103e5  00000000  00000000  0004e517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af3a  00000000  00000000  0005e8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9836  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003658  00000000  00000000  000e988c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  000ecee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e68 	.word	0x08003e68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003e68 	.word	0x08003e68

0800014c <isButtonPressed>:
int KeyReg3[NUM_BUTTON]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};

int TimeOutForKeyPress[NUM_BUTTON] =  {200,200,200};
int button_flag[NUM_BUTTON] = {0,0,0};

int isButtonPressed(int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[num] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[num] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000080 	.word	0x20000080

08000180 <subKeyProcess>:

void subKeyProcess(int num){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[num]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000080 	.word	0x20000080

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e06d      	b.n	8000288 <getKeyInput+0xe8>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a3a      	ldr	r2, [pc, #232]	; (8000298 <getKeyInput+0xf8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4939      	ldr	r1, [pc, #228]	; (800029c <getKeyInput+0xfc>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a38      	ldr	r2, [pc, #224]	; (80002a0 <getKeyInput+0x100>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4934      	ldr	r1, [pc, #208]	; (8000298 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(port_mode[i], pin_mode[i]);
 80001cc:	4a35      	ldr	r2, [pc, #212]	; (80002a4 <getKeyInput+0x104>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001d4:	4618      	mov	r0, r3
 80001d6:	4a34      	ldr	r2, [pc, #208]	; (80002a8 <getKeyInput+0x108>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001de:	4619      	mov	r1, r3
 80001e0:	f001 fd48 	bl	8001c74 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a2d      	ldr	r2, [pc, #180]	; (80002a0 <getKeyInput+0x100>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){ //avoid noise
 80001f0:	4a29      	ldr	r2, [pc, #164]	; (8000298 <getKeyInput+0xf8>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4929      	ldr	r1, [pc, #164]	; (80002a0 <getKeyInput+0x100>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d13e      	bne.n	8000282 <getKeyInput+0xe2>
 8000204:	4a24      	ldr	r2, [pc, #144]	; (8000298 <getKeyInput+0xf8>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4923      	ldr	r1, [pc, #140]	; (800029c <getKeyInput+0xfc>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d134      	bne.n	8000282 <getKeyInput+0xe2>
			if (KeyReg2[i] != KeyReg3[i]){ //change state
 8000218:	4a20      	ldr	r2, [pc, #128]	; (800029c <getKeyInput+0xfc>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4922      	ldr	r1, [pc, #136]	; (80002ac <getKeyInput+0x10c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d016      	beq.n	800025a <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 800022c:	4a1b      	ldr	r2, [pc, #108]	; (800029c <getKeyInput+0xfc>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <getKeyInput+0x10c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 800023c:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <getKeyInput+0x10c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d11c      	bne.n	8000282 <getKeyInput+0xe2>
					TimeOutForKeyPress[i] = 200;
 8000248:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <getKeyInput+0x110>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	21c8      	movs	r1, #200	; 0xc8
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f7ff ff94 	bl	8000180 <subKeyProcess>
 8000258:	e013      	b.n	8000282 <getKeyInput+0xe2>
				}
			}

			else{ //press without release
				TimeOutForKeyPress[i]--;
 800025a:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <getKeyInput+0x110>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	4912      	ldr	r1, [pc, #72]	; (80002b0 <getKeyInput+0x110>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 800026c:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <getKeyInput+0x110>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d104      	bne.n	8000282 <getKeyInput+0xe2>
					KeyReg3[i] = NORMAL_STATE;
 8000278:	4a0c      	ldr	r2, [pc, #48]	; (80002ac <getKeyInput+0x10c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2101      	movs	r1, #1
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<NUM_BUTTON; i++){
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3301      	adds	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b02      	cmp	r3, #2
 800028c:	dd8e      	ble.n	80001ac <getKeyInput+0xc>
				}

			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000001c 	.word	0x2000001c
 800029c:	20000028 	.word	0x20000028
 80002a0:	20000010 	.word	0x20000010
 80002a4:	20000008 	.word	0x20000008
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000034 	.word	0x20000034
 80002b0:	20000040 	.word	0x20000040

080002b4 <fsm_manual_run>:
 *      Author: dinhq
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	switch(led_status){
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <fsm_manual_run+0x238>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b0e      	cmp	r3, #14
 80002be:	d053      	beq.n	8000368 <fsm_manual_run+0xb4>
 80002c0:	2b0e      	cmp	r3, #14
 80002c2:	f300 8100 	bgt.w	80004c6 <fsm_manual_run+0x212>
 80002c6:	2b0c      	cmp	r3, #12
 80002c8:	d003      	beq.n	80002d2 <fsm_manual_run+0x1e>
 80002ca:	2b0d      	cmp	r3, #13
 80002cc:	f000 8098 	beq.w	8000400 <fsm_manual_run+0x14c>
			y_val=r_val-g_val;
		}
		break;

	default:
		break;
 80002d0:	e0f9      	b.n	80004c6 <fsm_manual_run+0x212>
		if (timer5_flag == 1){
 80002d2:	4b87      	ldr	r3, [pc, #540]	; (80004f0 <fsm_manual_run+0x23c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d110      	bne.n	80002fc <fsm_manual_run+0x48>
			setTimer5(25);
 80002da:	2019      	movs	r0, #25
 80002dc:	f000 fed4 	bl	8001088 <setTimer5>
			if (toogleFlag == 0){
 80002e0:	4b84      	ldr	r3, [pc, #528]	; (80004f4 <fsm_manual_run+0x240>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d107      	bne.n	80002f8 <fsm_manual_run+0x44>
				toogleFlag = 1;
 80002e8:	4b82      	ldr	r3, [pc, #520]	; (80004f4 <fsm_manual_run+0x240>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	601a      	str	r2, [r3, #0]
				onRED1();
 80002ee:	f000 fc51 	bl	8000b94 <onRED1>
				onRED2();
 80002f2:	f000 fc83 	bl	8000bfc <onRED2>
 80002f6:	e001      	b.n	80002fc <fsm_manual_run+0x48>
				offALL();
 80002f8:	f000 fc90 	bl	8000c1c <offALL>
		if (isButtonPressed(1) == 1){
 80002fc:	2001      	movs	r0, #1
 80002fe:	f7ff ff25 	bl	800014c <isButtonPressed>
 8000302:	4603      	mov	r3, r0
 8000304:	2b01      	cmp	r3, #1
 8000306:	d110      	bne.n	800032a <fsm_manual_run+0x76>
			r_inc++;
 8000308:	4b7b      	ldr	r3, [pc, #492]	; (80004f8 <fsm_manual_run+0x244>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3301      	adds	r3, #1
 800030e:	4a7a      	ldr	r2, [pc, #488]	; (80004f8 <fsm_manual_run+0x244>)
 8000310:	6013      	str	r3, [r2, #0]
			timerRoad1++;
 8000312:	4b7a      	ldr	r3, [pc, #488]	; (80004fc <fsm_manual_run+0x248>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	3301      	adds	r3, #1
 8000318:	4a78      	ldr	r2, [pc, #480]	; (80004fc <fsm_manual_run+0x248>)
 800031a:	6013      	str	r3, [r2, #0]
			if (r_inc >= 100) r_inc=2;
 800031c:	4b76      	ldr	r3, [pc, #472]	; (80004f8 <fsm_manual_run+0x244>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b63      	cmp	r3, #99	; 0x63
 8000322:	dd02      	ble.n	800032a <fsm_manual_run+0x76>
 8000324:	4b74      	ldr	r3, [pc, #464]	; (80004f8 <fsm_manual_run+0x244>)
 8000326:	2202      	movs	r2, #2
 8000328:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 800032a:	2000      	movs	r0, #0
 800032c:	f7ff ff0e 	bl	800014c <isButtonPressed>
 8000330:	4603      	mov	r3, r0
 8000332:	2b01      	cmp	r3, #1
 8000334:	d10c      	bne.n	8000350 <fsm_manual_run+0x9c>
			setTimer5(1);
 8000336:	2001      	movs	r0, #1
 8000338:	f000 fea6 	bl	8001088 <setTimer5>
			led_status = YELLOW_MAN;
 800033c:	4b6b      	ldr	r3, [pc, #428]	; (80004ec <fsm_manual_run+0x238>)
 800033e:	220e      	movs	r2, #14
 8000340:	601a      	str	r2, [r3, #0]
			timerRoad1 = y_val;
 8000342:	4b6f      	ldr	r3, [pc, #444]	; (8000500 <fsm_manual_run+0x24c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a6d      	ldr	r2, [pc, #436]	; (80004fc <fsm_manual_run+0x248>)
 8000348:	6013      	str	r3, [r2, #0]
			timerRoad2 = 3;
 800034a:	4b6e      	ldr	r3, [pc, #440]	; (8000504 <fsm_manual_run+0x250>)
 800034c:	2203      	movs	r2, #3
 800034e:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1){
 8000350:	2002      	movs	r0, #2
 8000352:	f7ff fefb 	bl	800014c <isButtonPressed>
 8000356:	4603      	mov	r3, r0
 8000358:	2b01      	cmp	r3, #1
 800035a:	f040 80b6 	bne.w	80004ca <fsm_manual_run+0x216>
			r_val=r_inc;
 800035e:	4b66      	ldr	r3, [pc, #408]	; (80004f8 <fsm_manual_run+0x244>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a69      	ldr	r2, [pc, #420]	; (8000508 <fsm_manual_run+0x254>)
 8000364:	6013      	str	r3, [r2, #0]
		break;
 8000366:	e0b0      	b.n	80004ca <fsm_manual_run+0x216>
		if (timer5_flag == 1){
 8000368:	4b61      	ldr	r3, [pc, #388]	; (80004f0 <fsm_manual_run+0x23c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d110      	bne.n	8000392 <fsm_manual_run+0xde>
			setTimer5(25);
 8000370:	2019      	movs	r0, #25
 8000372:	f000 fe89 	bl	8001088 <setTimer5>
			if (toogleFlag == 0){
 8000376:	4b5f      	ldr	r3, [pc, #380]	; (80004f4 <fsm_manual_run+0x240>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d107      	bne.n	800038e <fsm_manual_run+0xda>
				toogleFlag = 1;
 800037e:	4b5d      	ldr	r3, [pc, #372]	; (80004f4 <fsm_manual_run+0x240>)
 8000380:	2201      	movs	r2, #1
 8000382:	601a      	str	r2, [r3, #0]
				onYELLOW1();
 8000384:	f000 fbf2 	bl	8000b6c <onYELLOW1>
				onYELLOW2();
 8000388:	f000 fc28 	bl	8000bdc <onYELLOW2>
 800038c:	e001      	b.n	8000392 <fsm_manual_run+0xde>
				offALL();
 800038e:	f000 fc45 	bl	8000c1c <offALL>
		if (isButtonPressed(1) == 1){
 8000392:	2001      	movs	r0, #1
 8000394:	f7ff feda 	bl	800014c <isButtonPressed>
 8000398:	4603      	mov	r3, r0
 800039a:	2b01      	cmp	r3, #1
 800039c:	d112      	bne.n	80003c4 <fsm_manual_run+0x110>
			y_inc++;
 800039e:	4b5b      	ldr	r3, [pc, #364]	; (800050c <fsm_manual_run+0x258>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3301      	adds	r3, #1
 80003a4:	4a59      	ldr	r2, [pc, #356]	; (800050c <fsm_manual_run+0x258>)
 80003a6:	6013      	str	r3, [r2, #0]
			timerRoad1++;
 80003a8:	4b54      	ldr	r3, [pc, #336]	; (80004fc <fsm_manual_run+0x248>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	4a53      	ldr	r2, [pc, #332]	; (80004fc <fsm_manual_run+0x248>)
 80003b0:	6013      	str	r3, [r2, #0]
			if (y_inc >= r_val) y_inc=1;
 80003b2:	4b56      	ldr	r3, [pc, #344]	; (800050c <fsm_manual_run+0x258>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4b54      	ldr	r3, [pc, #336]	; (8000508 <fsm_manual_run+0x254>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	db02      	blt.n	80003c4 <fsm_manual_run+0x110>
 80003be:	4b53      	ldr	r3, [pc, #332]	; (800050c <fsm_manual_run+0x258>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 80003c4:	2000      	movs	r0, #0
 80003c6:	f7ff fec1 	bl	800014c <isButtonPressed>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d10c      	bne.n	80003ea <fsm_manual_run+0x136>
			setTimer5(1);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f000 fe59 	bl	8001088 <setTimer5>
			led_status = GREEN_MAN;
 80003d6:	4b45      	ldr	r3, [pc, #276]	; (80004ec <fsm_manual_run+0x238>)
 80003d8:	220d      	movs	r2, #13
 80003da:	601a      	str	r2, [r3, #0]
			timerRoad1 = g_val;
 80003dc:	4b4c      	ldr	r3, [pc, #304]	; (8000510 <fsm_manual_run+0x25c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a46      	ldr	r2, [pc, #280]	; (80004fc <fsm_manual_run+0x248>)
 80003e2:	6013      	str	r3, [r2, #0]
			timerRoad2 = 4;
 80003e4:	4b47      	ldr	r3, [pc, #284]	; (8000504 <fsm_manual_run+0x250>)
 80003e6:	2204      	movs	r2, #4
 80003e8:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1){
 80003ea:	2002      	movs	r0, #2
 80003ec:	f7ff feae 	bl	800014c <isButtonPressed>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d16b      	bne.n	80004ce <fsm_manual_run+0x21a>
			y_val=y_inc;
 80003f6:	4b45      	ldr	r3, [pc, #276]	; (800050c <fsm_manual_run+0x258>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a41      	ldr	r2, [pc, #260]	; (8000500 <fsm_manual_run+0x24c>)
 80003fc:	6013      	str	r3, [r2, #0]
		break;
 80003fe:	e066      	b.n	80004ce <fsm_manual_run+0x21a>
		if (timer5_flag == 1){
 8000400:	4b3b      	ldr	r3, [pc, #236]	; (80004f0 <fsm_manual_run+0x23c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d110      	bne.n	800042a <fsm_manual_run+0x176>
			setTimer5(25);
 8000408:	2019      	movs	r0, #25
 800040a:	f000 fe3d 	bl	8001088 <setTimer5>
			if (toogleFlag == 0){
 800040e:	4b39      	ldr	r3, [pc, #228]	; (80004f4 <fsm_manual_run+0x240>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d107      	bne.n	8000426 <fsm_manual_run+0x172>
				toogleFlag = 1;
 8000416:	4b37      	ldr	r3, [pc, #220]	; (80004f4 <fsm_manual_run+0x240>)
 8000418:	2201      	movs	r2, #1
 800041a:	601a      	str	r2, [r3, #0]
				onGREEN1();
 800041c:	f000 fb92 	bl	8000b44 <onGREEN1>
				onGREEN2();
 8000420:	f000 fbcc 	bl	8000bbc <onGREEN2>
 8000424:	e001      	b.n	800042a <fsm_manual_run+0x176>
				offALL();
 8000426:	f000 fbf9 	bl	8000c1c <offALL>
		if (isButtonPressed(1) == 1){
 800042a:	2001      	movs	r0, #1
 800042c:	f7ff fe8e 	bl	800014c <isButtonPressed>
 8000430:	4603      	mov	r3, r0
 8000432:	2b01      	cmp	r3, #1
 8000434:	d112      	bne.n	800045c <fsm_manual_run+0x1a8>
			g_inc++;
 8000436:	4b37      	ldr	r3, [pc, #220]	; (8000514 <fsm_manual_run+0x260>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	3301      	adds	r3, #1
 800043c:	4a35      	ldr	r2, [pc, #212]	; (8000514 <fsm_manual_run+0x260>)
 800043e:	6013      	str	r3, [r2, #0]
			timerRoad1++;
 8000440:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <fsm_manual_run+0x248>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	4a2d      	ldr	r2, [pc, #180]	; (80004fc <fsm_manual_run+0x248>)
 8000448:	6013      	str	r3, [r2, #0]
			if (g_inc >= r_val) g_inc=1;
 800044a:	4b32      	ldr	r3, [pc, #200]	; (8000514 <fsm_manual_run+0x260>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	4b2e      	ldr	r3, [pc, #184]	; (8000508 <fsm_manual_run+0x254>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	429a      	cmp	r2, r3
 8000454:	db02      	blt.n	800045c <fsm_manual_run+0x1a8>
 8000456:	4b2f      	ldr	r3, [pc, #188]	; (8000514 <fsm_manual_run+0x260>)
 8000458:	2201      	movs	r2, #1
 800045a:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 800045c:	2000      	movs	r0, #0
 800045e:	f7ff fe75 	bl	800014c <isButtonPressed>
 8000462:	4603      	mov	r3, r0
 8000464:	2b01      	cmp	r3, #1
 8000466:	d11c      	bne.n	80004a2 <fsm_manual_run+0x1ee>
			led_status = RED_GREEN;
 8000468:	4b20      	ldr	r3, [pc, #128]	; (80004ec <fsm_manual_run+0x238>)
 800046a:	2201      	movs	r2, #1
 800046c:	601a      	str	r2, [r3, #0]
			g_val = r_val-y_val;
 800046e:	4b26      	ldr	r3, [pc, #152]	; (8000508 <fsm_manual_run+0x254>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	4b23      	ldr	r3, [pc, #140]	; (8000500 <fsm_manual_run+0x24c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	4a25      	ldr	r2, [pc, #148]	; (8000510 <fsm_manual_run+0x25c>)
 800047a:	6013      	str	r3, [r2, #0]
			timerRoad1 = r_val;
 800047c:	4b22      	ldr	r3, [pc, #136]	; (8000508 <fsm_manual_run+0x254>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a1e      	ldr	r2, [pc, #120]	; (80004fc <fsm_manual_run+0x248>)
 8000482:	6013      	str	r3, [r2, #0]
			timerRoad2 = g_val;
 8000484:	4b22      	ldr	r3, [pc, #136]	; (8000510 <fsm_manual_run+0x25c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a1e      	ldr	r2, [pc, #120]	; (8000504 <fsm_manual_run+0x250>)
 800048a:	6013      	str	r3, [r2, #0]
			setTimer1(g_val*100);
 800048c:	4b20      	ldr	r3, [pc, #128]	; (8000510 <fsm_manual_run+0x25c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2264      	movs	r2, #100	; 0x64
 8000492:	fb02 f303 	mul.w	r3, r2, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f000 fdce 	bl	8001038 <setTimer1>
			setTimer2(100);
 800049c:	2064      	movs	r0, #100	; 0x64
 800049e:	f000 fddf 	bl	8001060 <setTimer2>
		if (isButtonPressed(2) == 1){
 80004a2:	2002      	movs	r0, #2
 80004a4:	f7ff fe52 	bl	800014c <isButtonPressed>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d111      	bne.n	80004d2 <fsm_manual_run+0x21e>
			g_val=g_inc;
 80004ae:	4b19      	ldr	r3, [pc, #100]	; (8000514 <fsm_manual_run+0x260>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a17      	ldr	r2, [pc, #92]	; (8000510 <fsm_manual_run+0x25c>)
 80004b4:	6013      	str	r3, [r2, #0]
			y_val=r_val-g_val;
 80004b6:	4b14      	ldr	r3, [pc, #80]	; (8000508 <fsm_manual_run+0x254>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <fsm_manual_run+0x25c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	1ad3      	subs	r3, r2, r3
 80004c0:	4a0f      	ldr	r2, [pc, #60]	; (8000500 <fsm_manual_run+0x24c>)
 80004c2:	6013      	str	r3, [r2, #0]
		break;
 80004c4:	e005      	b.n	80004d2 <fsm_manual_run+0x21e>
		break;
 80004c6:	bf00      	nop
 80004c8:	e004      	b.n	80004d4 <fsm_manual_run+0x220>
		break;
 80004ca:	bf00      	nop
 80004cc:	e002      	b.n	80004d4 <fsm_manual_run+0x220>
		break;
 80004ce:	bf00      	nop
 80004d0:	e000      	b.n	80004d4 <fsm_manual_run+0x220>
		break;
 80004d2:	bf00      	nop
	}
	if (isButtonPressed(2) == 1){
 80004d4:	2002      	movs	r0, #2
 80004d6:	f7ff fe39 	bl	800014c <isButtonPressed>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d103      	bne.n	80004e8 <fsm_manual_run+0x234>
		timerRoad1 = r_val;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <fsm_manual_run+0x254>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a05      	ldr	r2, [pc, #20]	; (80004fc <fsm_manual_run+0x248>)
 80004e6:	6013      	str	r3, [r2, #0]
	}
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	2000008c 	.word	0x2000008c
 80004f0:	200000d0 	.word	0x200000d0
 80004f4:	200000a4 	.word	0x200000a4
 80004f8:	20000098 	.word	0x20000098
 80004fc:	20000090 	.word	0x20000090
 8000500:	20000050 	.word	0x20000050
 8000504:	20000094 	.word	0x20000094
 8000508:	2000004c 	.word	0x2000004c
 800050c:	200000a0 	.word	0x200000a0
 8000510:	20000054 	.word	0x20000054
 8000514:	2000009c 	.word	0x2000009c

08000518 <fsm_traffic_light>:
 */

#include "fsm_traffic_light.h"


void fsm_traffic_light(){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	switch(led_status){
 800051c:	4b91      	ldr	r3, [pc, #580]	; (8000764 <fsm_traffic_light+0x24c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b04      	cmp	r3, #4
 8000522:	f200 80e3 	bhi.w	80006ec <fsm_traffic_light+0x1d4>
 8000526:	a201      	add	r2, pc, #4	; (adr r2, 800052c <fsm_traffic_light+0x14>)
 8000528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052c:	08000541 	.word	0x08000541
 8000530:	08000563 	.word	0x08000563
 8000534:	080005bf 	.word	0x080005bf
 8000538:	08000629 	.word	0x08000629
 800053c:	08000683 	.word	0x08000683
	case INIT:
		//TODO
		offALL();
 8000540:	f000 fb6c 	bl	8000c1c <offALL>

		//INIT state
		led_status = RED_GREEN;
 8000544:	4b87      	ldr	r3, [pc, #540]	; (8000764 <fsm_traffic_light+0x24c>)
 8000546:	2201      	movs	r2, #1
 8000548:	601a      	str	r2, [r3, #0]
		setTimer1(g_val*100);
 800054a:	4b87      	ldr	r3, [pc, #540]	; (8000768 <fsm_traffic_light+0x250>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2264      	movs	r2, #100	; 0x64
 8000550:	fb02 f303 	mul.w	r3, r2, r3
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fd6f 	bl	8001038 <setTimer1>
		setTimer2(100);
 800055a:	2064      	movs	r0, #100	; 0x64
 800055c:	f000 fd80 	bl	8001060 <setTimer2>
		break;
 8000560:	e0cd      	b.n	80006fe <fsm_traffic_light+0x1e6>
	case RED_GREEN:
		//TODO
		onRED1();
 8000562:	f000 fb17 	bl	8000b94 <onRED1>
		onGREEN2();
 8000566:	f000 fb29 	bl	8000bbc <onGREEN2>

		//decrement of counter of each road
		if (timer2_flag == 1){
 800056a:	4b80      	ldr	r3, [pc, #512]	; (800076c <fsm_traffic_light+0x254>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d114      	bne.n	800059c <fsm_traffic_light+0x84>
			setTimer2(100);
 8000572:	2064      	movs	r0, #100	; 0x64
 8000574:	f000 fd74 	bl	8001060 <setTimer2>
			timerRoad1--;
 8000578:	4b7d      	ldr	r3, [pc, #500]	; (8000770 <fsm_traffic_light+0x258>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3b01      	subs	r3, #1
 800057e:	4a7c      	ldr	r2, [pc, #496]	; (8000770 <fsm_traffic_light+0x258>)
 8000580:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8000582:	4b7c      	ldr	r3, [pc, #496]	; (8000774 <fsm_traffic_light+0x25c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3b01      	subs	r3, #1
 8000588:	4a7a      	ldr	r2, [pc, #488]	; (8000774 <fsm_traffic_light+0x25c>)
 800058a:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = y_val;
 800058c:	4b79      	ldr	r3, [pc, #484]	; (8000774 <fsm_traffic_light+0x25c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	dc03      	bgt.n	800059c <fsm_traffic_light+0x84>
 8000594:	4b78      	ldr	r3, [pc, #480]	; (8000778 <fsm_traffic_light+0x260>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a76      	ldr	r2, [pc, #472]	; (8000774 <fsm_traffic_light+0x25c>)
 800059a:	6013      	str	r3, [r2, #0]
		}

		//update state
		if (timer1_flag == 1){
 800059c:	4b77      	ldr	r3, [pc, #476]	; (800077c <fsm_traffic_light+0x264>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	f040 80a5 	bne.w	80006f0 <fsm_traffic_light+0x1d8>
			setTimer1(y_val*100);
 80005a6:	4b74      	ldr	r3, [pc, #464]	; (8000778 <fsm_traffic_light+0x260>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2264      	movs	r2, #100	; 0x64
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fd41 	bl	8001038 <setTimer1>
			led_status = RED_YELLOW;
 80005b6:	4b6b      	ldr	r3, [pc, #428]	; (8000764 <fsm_traffic_light+0x24c>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	601a      	str	r2, [r3, #0]
		}
		break;
 80005bc:	e098      	b.n	80006f0 <fsm_traffic_light+0x1d8>
	case RED_YELLOW:
		//TODO
		onRED1();
 80005be:	f000 fae9 	bl	8000b94 <onRED1>
		onYELLOW2();
 80005c2:	f000 fb0b 	bl	8000bdc <onYELLOW2>

		//decrement of counter of each road
		if (timer2_flag == 1){
 80005c6:	4b69      	ldr	r3, [pc, #420]	; (800076c <fsm_traffic_light+0x254>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d11c      	bne.n	8000608 <fsm_traffic_light+0xf0>
			setTimer2(100);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f000 fd46 	bl	8001060 <setTimer2>
			timerRoad1--;
 80005d4:	4b66      	ldr	r3, [pc, #408]	; (8000770 <fsm_traffic_light+0x258>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3b01      	subs	r3, #1
 80005da:	4a65      	ldr	r2, [pc, #404]	; (8000770 <fsm_traffic_light+0x258>)
 80005dc:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = g_val;
 80005de:	4b64      	ldr	r3, [pc, #400]	; (8000770 <fsm_traffic_light+0x258>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	dc03      	bgt.n	80005ee <fsm_traffic_light+0xd6>
 80005e6:	4b60      	ldr	r3, [pc, #384]	; (8000768 <fsm_traffic_light+0x250>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a61      	ldr	r2, [pc, #388]	; (8000770 <fsm_traffic_light+0x258>)
 80005ec:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 80005ee:	4b61      	ldr	r3, [pc, #388]	; (8000774 <fsm_traffic_light+0x25c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	4a5f      	ldr	r2, [pc, #380]	; (8000774 <fsm_traffic_light+0x25c>)
 80005f6:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = r_val;
 80005f8:	4b5e      	ldr	r3, [pc, #376]	; (8000774 <fsm_traffic_light+0x25c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dc03      	bgt.n	8000608 <fsm_traffic_light+0xf0>
 8000600:	4b5f      	ldr	r3, [pc, #380]	; (8000780 <fsm_traffic_light+0x268>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a5b      	ldr	r2, [pc, #364]	; (8000774 <fsm_traffic_light+0x25c>)
 8000606:	6013      	str	r3, [r2, #0]
		}

		//update state
		if(timer1_flag == 1){
 8000608:	4b5c      	ldr	r3, [pc, #368]	; (800077c <fsm_traffic_light+0x264>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d171      	bne.n	80006f4 <fsm_traffic_light+0x1dc>
			setTimer1(g_val*100);
 8000610:	4b55      	ldr	r3, [pc, #340]	; (8000768 <fsm_traffic_light+0x250>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2264      	movs	r2, #100	; 0x64
 8000616:	fb02 f303 	mul.w	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fd0c 	bl	8001038 <setTimer1>
			led_status = GREEN_RED;
 8000620:	4b50      	ldr	r3, [pc, #320]	; (8000764 <fsm_traffic_light+0x24c>)
 8000622:	2203      	movs	r2, #3
 8000624:	601a      	str	r2, [r3, #0]
		}
		break;
 8000626:	e065      	b.n	80006f4 <fsm_traffic_light+0x1dc>
	case GREEN_RED:
		onGREEN1();
 8000628:	f000 fa8c 	bl	8000b44 <onGREEN1>
		onRED2();
 800062c:	f000 fae6 	bl	8000bfc <onRED2>

		//decrement of counter of each road
		if (timer2_flag == 1){
 8000630:	4b4e      	ldr	r3, [pc, #312]	; (800076c <fsm_traffic_light+0x254>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d114      	bne.n	8000662 <fsm_traffic_light+0x14a>
			setTimer2(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f000 fd11 	bl	8001060 <setTimer2>
			timerRoad1--;
 800063e:	4b4c      	ldr	r3, [pc, #304]	; (8000770 <fsm_traffic_light+0x258>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a4a      	ldr	r2, [pc, #296]	; (8000770 <fsm_traffic_light+0x258>)
 8000646:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = y_val;
 8000648:	4b49      	ldr	r3, [pc, #292]	; (8000770 <fsm_traffic_light+0x258>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	dc03      	bgt.n	8000658 <fsm_traffic_light+0x140>
 8000650:	4b49      	ldr	r3, [pc, #292]	; (8000778 <fsm_traffic_light+0x260>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a46      	ldr	r2, [pc, #280]	; (8000770 <fsm_traffic_light+0x258>)
 8000656:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8000658:	4b46      	ldr	r3, [pc, #280]	; (8000774 <fsm_traffic_light+0x25c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3b01      	subs	r3, #1
 800065e:	4a45      	ldr	r2, [pc, #276]	; (8000774 <fsm_traffic_light+0x25c>)
 8000660:	6013      	str	r3, [r2, #0]
		}

		//update state
		if(timer1_flag == 1){
 8000662:	4b46      	ldr	r3, [pc, #280]	; (800077c <fsm_traffic_light+0x264>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d146      	bne.n	80006f8 <fsm_traffic_light+0x1e0>
			setTimer1(y_val*100);
 800066a:	4b43      	ldr	r3, [pc, #268]	; (8000778 <fsm_traffic_light+0x260>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2264      	movs	r2, #100	; 0x64
 8000670:	fb02 f303 	mul.w	r3, r2, r3
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fcdf 	bl	8001038 <setTimer1>
			led_status = YELLOW_RED;
 800067a:	4b3a      	ldr	r3, [pc, #232]	; (8000764 <fsm_traffic_light+0x24c>)
 800067c:	2204      	movs	r2, #4
 800067e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000680:	e03a      	b.n	80006f8 <fsm_traffic_light+0x1e0>
	case YELLOW_RED:
		onYELLOW1();
 8000682:	f000 fa73 	bl	8000b6c <onYELLOW1>
		onRED2();
 8000686:	f000 fab9 	bl	8000bfc <onRED2>

		//decrement of counter of each road
		if (timer2_flag == 1){
 800068a:	4b38      	ldr	r3, [pc, #224]	; (800076c <fsm_traffic_light+0x254>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d11c      	bne.n	80006cc <fsm_traffic_light+0x1b4>
			setTimer2(100);
 8000692:	2064      	movs	r0, #100	; 0x64
 8000694:	f000 fce4 	bl	8001060 <setTimer2>
			timerRoad1--;
 8000698:	4b35      	ldr	r3, [pc, #212]	; (8000770 <fsm_traffic_light+0x258>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b01      	subs	r3, #1
 800069e:	4a34      	ldr	r2, [pc, #208]	; (8000770 <fsm_traffic_light+0x258>)
 80006a0:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = r_val;
 80006a2:	4b33      	ldr	r3, [pc, #204]	; (8000770 <fsm_traffic_light+0x258>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	dc03      	bgt.n	80006b2 <fsm_traffic_light+0x19a>
 80006aa:	4b35      	ldr	r3, [pc, #212]	; (8000780 <fsm_traffic_light+0x268>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a30      	ldr	r2, [pc, #192]	; (8000770 <fsm_traffic_light+0x258>)
 80006b0:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 80006b2:	4b30      	ldr	r3, [pc, #192]	; (8000774 <fsm_traffic_light+0x25c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	4a2e      	ldr	r2, [pc, #184]	; (8000774 <fsm_traffic_light+0x25c>)
 80006ba:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = g_val;
 80006bc:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <fsm_traffic_light+0x25c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dc03      	bgt.n	80006cc <fsm_traffic_light+0x1b4>
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <fsm_traffic_light+0x250>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a2a      	ldr	r2, [pc, #168]	; (8000774 <fsm_traffic_light+0x25c>)
 80006ca:	6013      	str	r3, [r2, #0]
		}

		//update state
		if (timer1_flag == 1){
 80006cc:	4b2b      	ldr	r3, [pc, #172]	; (800077c <fsm_traffic_light+0x264>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d113      	bne.n	80006fc <fsm_traffic_light+0x1e4>
			setTimer1(g_val*100);
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <fsm_traffic_light+0x250>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2264      	movs	r2, #100	; 0x64
 80006da:	fb02 f303 	mul.w	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fcaa 	bl	8001038 <setTimer1>
			led_status = RED_GREEN;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <fsm_traffic_light+0x24c>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
		}
		break;
 80006ea:	e007      	b.n	80006fc <fsm_traffic_light+0x1e4>
	default:
		break;
 80006ec:	bf00      	nop
 80006ee:	e006      	b.n	80006fe <fsm_traffic_light+0x1e6>
		break;
 80006f0:	bf00      	nop
 80006f2:	e004      	b.n	80006fe <fsm_traffic_light+0x1e6>
		break;
 80006f4:	bf00      	nop
 80006f6:	e002      	b.n	80006fe <fsm_traffic_light+0x1e6>
		break;
 80006f8:	bf00      	nop
 80006fa:	e000      	b.n	80006fe <fsm_traffic_light+0x1e6>
		break;
 80006fc:	bf00      	nop
	}
	//check mode (timer5 for toogle LED)
	if (isButtonPressed(0) == 1 && (led_status == RED_GREEN || led_status == RED_YELLOW || led_status == GREEN_RED || led_status == YELLOW_RED)){
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff fd24 	bl	800014c <isButtonPressed>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	d12a      	bne.n	8000760 <fsm_traffic_light+0x248>
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <fsm_traffic_light+0x24c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d00b      	beq.n	800072a <fsm_traffic_light+0x212>
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <fsm_traffic_light+0x24c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d007      	beq.n	800072a <fsm_traffic_light+0x212>
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <fsm_traffic_light+0x24c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d003      	beq.n	800072a <fsm_traffic_light+0x212>
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <fsm_traffic_light+0x24c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b04      	cmp	r3, #4
 8000728:	d11a      	bne.n	8000760 <fsm_traffic_light+0x248>
		offALL();
 800072a:	f000 fa77 	bl	8000c1c <offALL>
		led_status = RED_MAN;
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <fsm_traffic_light+0x24c>)
 8000730:	220c      	movs	r2, #12
 8000732:	601a      	str	r2, [r3, #0]
		r_inc = r_val;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <fsm_traffic_light+0x268>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <fsm_traffic_light+0x26c>)
 800073a:	6013      	str	r3, [r2, #0]
		y_inc = y_val;
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <fsm_traffic_light+0x260>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <fsm_traffic_light+0x270>)
 8000742:	6013      	str	r3, [r2, #0]
		g_inc = g_val;
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <fsm_traffic_light+0x250>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a10      	ldr	r2, [pc, #64]	; (800078c <fsm_traffic_light+0x274>)
 800074a:	6013      	str	r3, [r2, #0]
		setTimer5(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f000 fc9b 	bl	8001088 <setTimer5>

		timerRoad1 = r_val;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <fsm_traffic_light+0x268>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a06      	ldr	r2, [pc, #24]	; (8000770 <fsm_traffic_light+0x258>)
 8000758:	6013      	str	r3, [r2, #0]
		timerRoad2 = 2;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <fsm_traffic_light+0x25c>)
 800075c:	2202      	movs	r2, #2
 800075e:	601a      	str	r2, [r3, #0]
	}
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000008c 	.word	0x2000008c
 8000768:	20000054 	.word	0x20000054
 800076c:	200000b8 	.word	0x200000b8
 8000770:	20000090 	.word	0x20000090
 8000774:	20000094 	.word	0x20000094
 8000778:	20000050 	.word	0x20000050
 800077c:	200000b0 	.word	0x200000b0
 8000780:	2000004c 	.word	0x2000004c
 8000784:	20000098 	.word	0x20000098
 8000788:	200000a0 	.word	0x200000a0
 800078c:	2000009c 	.word	0x2000009c

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f000 fea4 	bl	80014e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f83a 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f000 f944 	bl	8000a28 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007a0:	f000 f872 	bl	8000888 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007a4:	f000 f916 	bl	80009d4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007a8:	f000 f8ba 	bl	8000920 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007ac:	4814      	ldr	r0, [pc, #80]	; (8000800 <main+0x70>)
 80007ae:	f001 feef 	bl	8002590 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80007b2:	4814      	ldr	r0, [pc, #80]	; (8000804 <main+0x74>)
 80007b4:	f001 feec 	bl	8002590 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 80007b8:	f000 fa4e 	bl	8000c58 <SCH_Init>
  SCH_Add_Task(fsm_traffic_light, 0, 10);
 80007bc:	220a      	movs	r2, #10
 80007be:	2100      	movs	r1, #0
 80007c0:	4811      	ldr	r0, [pc, #68]	; (8000808 <main+0x78>)
 80007c2:	f000 fa9f 	bl	8000d04 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 10);
 80007c6:	220a      	movs	r2, #10
 80007c8:	2100      	movs	r1, #0
 80007ca:	4810      	ldr	r0, [pc, #64]	; (800080c <main+0x7c>)
 80007cc:	f000 fa9a 	bl	8000d04 <SCH_Add_Task>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007d0:	2100      	movs	r1, #0
 80007d2:	480c      	ldr	r0, [pc, #48]	; (8000804 <main+0x74>)
 80007d4:	f001 ff7e 	bl	80026d4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 80007d8:	f000 fb66 	bl	8000ea8 <SCH_Dispatch_Tasks>
	  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,10);
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <main+0x74>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	220a      	movs	r2, #10
 80007e2:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 80007e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e8:	f000 fedc 	bl	80015a4 <HAL_Delay>
	  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,100);
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <main+0x74>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2264      	movs	r2, #100	; 0x64
 80007f2:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 80007f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f8:	f000 fed4 	bl	80015a4 <HAL_Delay>
	  SCH_Dispatch_Tasks();
 80007fc:	e7ec      	b.n	80007d8 <main+0x48>
 80007fe:	bf00      	nop
 8000800:	2000012c 	.word	0x2000012c
 8000804:	200000e4 	.word	0x200000e4
 8000808:	08000519 	.word	0x08000519
 800080c:	080002b5 	.word	0x080002b5

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b090      	sub	sp, #64	; 0x40
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0318 	add.w	r3, r7, #24
 800081a:	2228      	movs	r2, #40	; 0x28
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f003 fb1a 	bl	8003e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000832:	2302      	movs	r3, #2
 8000834:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000836:	2301      	movs	r3, #1
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083a:	2310      	movs	r3, #16
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800083e:	2300      	movs	r3, #0
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fa44 	bl	8001cd4 <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000852:	f000 f971 	bl	8000b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fcb0 	bl	80021d4 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800087a:	f000 f95d 	bl	8000b38 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3740      	adds	r7, #64	; 0x40
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	463b      	mov	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_TIM2_Init+0x94>)
 80008a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_TIM2_Init+0x94>)
 80008ae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80008b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_TIM2_Init+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_TIM2_Init+0x94>)
 80008bc:	2209      	movs	r2, #9
 80008be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_TIM2_Init+0x94>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_TIM2_Init+0x94>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008cc:	4813      	ldr	r0, [pc, #76]	; (800091c <MX_TIM2_Init+0x94>)
 80008ce:	f001 fe0f 	bl	80024f0 <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008d8:	f000 f92e 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4619      	mov	r1, r3
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_TIM2_Init+0x94>)
 80008ea:	f002 f95f 	bl	8002bac <HAL_TIM_ConfigClockSource>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008f4:	f000 f920 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_TIM2_Init+0x94>)
 8000906:	f002 fce1 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 f912 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000012c 	.word	0x2000012c

08000920 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
 800093e:	615a      	str	r2, [r3, #20]
 8000940:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000942:	4b22      	ldr	r3, [pc, #136]	; (80009cc <MX_TIM3_Init+0xac>)
 8000944:	4a22      	ldr	r2, [pc, #136]	; (80009d0 <MX_TIM3_Init+0xb0>)
 8000946:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_TIM3_Init+0xac>)
 800094a:	223f      	movs	r2, #63	; 0x3f
 800094c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_TIM3_Init+0xac>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_TIM3_Init+0xac>)
 8000956:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_TIM3_Init+0xac>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_TIM3_Init+0xac>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000968:	4818      	ldr	r0, [pc, #96]	; (80009cc <MX_TIM3_Init+0xac>)
 800096a:	f001 fe63 	bl	8002634 <HAL_TIM_PWM_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 f8e0 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	4619      	mov	r1, r3
 8000986:	4811      	ldr	r0, [pc, #68]	; (80009cc <MX_TIM3_Init+0xac>)
 8000988:	f002 fca0 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000992:	f000 f8d1 	bl	8000b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000996:	2360      	movs	r3, #96	; 0x60
 8000998:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	4619      	mov	r1, r3
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_TIM3_Init+0xac>)
 80009ae:	f002 f83b 	bl	8002a28 <HAL_TIM_PWM_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80009b8:	f000 f8be 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_TIM3_Init+0xac>)
 80009be:	f000 fc85 	bl	80012cc <HAL_TIM_MspPostInit>

}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	; 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000e4 	.word	0x200000e4
 80009d0:	40000400 	.word	0x40000400

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_USART2_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	f002 fcce 	bl	80033ac <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f000 f88f 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000174 	.word	0x20000174
 8000a24:	40004400 	.word	0x40004400

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <MX_GPIO_Init+0xe8>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a33      	ldr	r2, [pc, #204]	; (8000b10 <MX_GPIO_Init+0xe8>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <MX_GPIO_Init+0xe8>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <MX_GPIO_Init+0xe8>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a2d      	ldr	r2, [pc, #180]	; (8000b10 <MX_GPIO_Init+0xe8>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <MX_GPIO_Init+0xe8>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0308 	and.w	r3, r3, #8
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6c:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <MX_GPIO_Init+0xe8>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a27      	ldr	r2, [pc, #156]	; (8000b10 <MX_GPIO_Init+0xe8>)
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <MX_GPIO_Init+0xe8>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|PET_LED_2_Pin|LED1_1_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8000a8a:	4822      	ldr	r0, [pc, #136]	; (8000b14 <MX_GPIO_Init+0xec>)
 8000a8c:	f001 f909 	bl	8001ca2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PET_LED_1_Pin|LED1_2_Pin|LED2_2_Pin|LED2_1_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000a96:	4820      	ldr	r0, [pc, #128]	; (8000b18 <MX_GPIO_Init+0xf0>)
 8000a98:	f001 f903 	bl	8001ca2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PET_BUT_Pin MODE_Pin INC_Pin */
  GPIO_InitStruct.Pin = PET_BUT_Pin|MODE_Pin|INC_Pin;
 8000a9c:	2313      	movs	r3, #19
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4619      	mov	r1, r3
 8000aae:	4819      	ldr	r0, [pc, #100]	; (8000b14 <MX_GPIO_Init+0xec>)
 8000ab0:	f000 ff5c 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin PET_LED_2_Pin LED1_1_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|PET_LED_2_Pin|LED1_1_Pin;
 8000ab4:	f44f 63a8 	mov.w	r3, #1344	; 0x540
 8000ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4619      	mov	r1, r3
 8000acc:	4811      	ldr	r0, [pc, #68]	; (8000b14 <MX_GPIO_Init+0xec>)
 8000ace:	f000 ff4d 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_Pin */
  GPIO_InitStruct.Pin = SET_Pin;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SET_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <MX_GPIO_Init+0xf0>)
 8000ae6:	f000 ff41 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : PET_LED_1_Pin LED1_2_Pin LED2_2_Pin LED2_1_Pin */
  GPIO_InitStruct.Pin = PET_LED_1_Pin|LED1_2_Pin|LED2_2_Pin|LED2_1_Pin;
 8000aea:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_GPIO_Init+0xf0>)
 8000b04:	f000 ff32 	bl	800196c <HAL_GPIO_Init>

}
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	timerRun();
 8000b24:	f000 fac4 	bl	80010b0 <timerRun>
	getKeyInput();
 8000b28:	f7ff fb3a 	bl	80001a0 <getKeyInput>
	SCH_Update();
 8000b2c:	f000 f95c 	bl	8000de8 <SCH_Update>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <onGREEN1>:
 *      Author: dinhq
 */

#include "physical.h"

void onGREEN1(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <onGREEN1+0x20>)
 8000b50:	f001 f8a7 	bl	8001ca2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2108      	movs	r1, #8
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <onGREEN1+0x24>)
 8000b5a:	f001 f8a2 	bl	8001ca2 <HAL_GPIO_WritePin>
};
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40010800 	.word	0x40010800
 8000b68:	40010c00 	.word	0x40010c00

08000b6c <onYELLOW1>:
void onYELLOW1(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <onYELLOW1+0x20>)
 8000b78:	f001 f893 	bl	8001ca2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2108      	movs	r1, #8
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <onYELLOW1+0x24>)
 8000b82:	f001 f88e 	bl	8001ca2 <HAL_GPIO_WritePin>
};
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	40010c00 	.word	0x40010c00

08000b94 <onRED1>:
void onRED1(){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <onRED1+0x20>)
 8000ba0:	f001 f87f 	bl	8001ca2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <onRED1+0x24>)
 8000baa:	f001 f87a 	bl	8001ca2 <HAL_GPIO_WritePin>
};
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	40010c00 	.word	0x40010c00

08000bbc <onGREEN2>:

void onGREEN2(){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <onGREEN2+0x1c>)
 8000bc6:	f001 f86c 	bl	8001ca2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2110      	movs	r1, #16
 8000bce:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <onGREEN2+0x1c>)
 8000bd0:	f001 f867 	bl	8001ca2 <HAL_GPIO_WritePin>
};
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <onYELLOW2>:
void onYELLOW2(){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2120      	movs	r1, #32
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <onYELLOW2+0x1c>)
 8000be6:	f001 f85c 	bl	8001ca2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2110      	movs	r1, #16
 8000bee:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <onYELLOW2+0x1c>)
 8000bf0:	f001 f857 	bl	8001ca2 <HAL_GPIO_WritePin>
};
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40010c00 	.word	0x40010c00

08000bfc <onRED2>:
void onRED2(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2120      	movs	r1, #32
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <onRED2+0x1c>)
 8000c06:	f001 f84c 	bl	8001ca2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2110      	movs	r1, #16
 8000c0e:	4802      	ldr	r0, [pc, #8]	; (8000c18 <onRED2+0x1c>)
 8000c10:	f001 f847 	bl	8001ca2 <HAL_GPIO_WritePin>
};
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40010c00 	.word	0x40010c00

08000c1c <offALL>:

void offALL(){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c26:	480a      	ldr	r0, [pc, #40]	; (8000c50 <offALL+0x34>)
 8000c28:	f001 f83b 	bl	8001ca2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2108      	movs	r1, #8
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <offALL+0x38>)
 8000c32:	f001 f836 	bl	8001ca2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2120      	movs	r1, #32
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <offALL+0x38>)
 8000c3c:	f001 f831 	bl	8001ca2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <offALL+0x38>)
 8000c46:	f001 f82c 	bl	8001ca2 <HAL_GPIO_WritePin>
};
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40010800 	.word	0x40010800
 8000c54:	40010c00 	.word	0x40010c00

08000c58 <SCH_Init>:
#include "scheduler.h"

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
    current_index_task = 0;
 8000c5e:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <SCH_Init+0xa4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<SCH_MAX_TASKS; i++){
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	e03e      	b.n	8000ce8 <SCH_Init+0x90>
        SCH_tasks_G[current_index_task].pTask = 0;
 8000c6a:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <SCH_Init+0xa4>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4a23      	ldr	r2, [pc, #140]	; (8000d00 <SCH_Init+0xa8>)
 8000c72:	460b      	mov	r3, r1
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	440b      	add	r3, r1
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Delay = 0;
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <SCH_Init+0xa4>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <SCH_Init+0xa8>)
 8000c88:	460b      	mov	r3, r1
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	3304      	adds	r3, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Period = 0;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <SCH_Init+0xa4>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <SCH_Init+0xa8>)
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	3308      	adds	r3, #8
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].RunMe = 0;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <SCH_Init+0xa4>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <SCH_Init+0xa8>)
 8000cb8:	460b      	mov	r3, r1
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	330c      	adds	r3, #12
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]

        SCH_tasks_G[current_index_task].TaskID = -1;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <SCH_Init+0xa4>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4a0c      	ldr	r2, [pc, #48]	; (8000d00 <SCH_Init+0xa8>)
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	3310      	adds	r3, #16
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	601a      	str	r2, [r3, #0]
    for (int i=0; i<SCH_MAX_TASKS; i++){
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b27      	cmp	r3, #39	; 0x27
 8000cec:	ddbd      	ble.n	8000c6a <SCH_Init+0x12>
    }
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200000a8 	.word	0x200000a8
 8000d00:	200001bc 	.word	0x200001bc

08000d04 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t Delay, uint32_t Period){
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
	Delay = Delay / TICK ;
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4a32      	ldr	r2, [pc, #200]	; (8000ddc <SCH_Add_Task+0xd8>)
 8000d14:	fba2 2303 	umull	r2, r3, r2, r3
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	60bb      	str	r3, [r7, #8]
	Period = Period / TICK ;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a2f      	ldr	r2, [pc, #188]	; (8000ddc <SCH_Add_Task+0xd8>)
 8000d20:	fba2 2303 	umull	r2, r3, r2, r3
 8000d24:	08db      	lsrs	r3, r3, #3
 8000d26:	607b      	str	r3, [r7, #4]
    if(current_index_task < SCH_MAX_TASKS){
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <SCH_Add_Task+0xdc>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b27      	cmp	r3, #39	; 0x27
 8000d2e:	d84e      	bhi.n	8000dce <SCH_Add_Task+0xca>

        SCH_tasks_G[current_index_task].pTask = pFunction;
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <SCH_Add_Task+0xdc>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	4a2b      	ldr	r2, [pc, #172]	; (8000de4 <SCH_Add_Task+0xe0>)
 8000d38:	460b      	mov	r3, r1
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Delay = Delay;
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <SCH_Add_Task+0xdc>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4a25      	ldr	r2, [pc, #148]	; (8000de4 <SCH_Add_Task+0xe0>)
 8000d4e:	460b      	mov	r3, r1
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	440b      	add	r3, r1
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	3304      	adds	r3, #4
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Period = Period;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <SCH_Add_Task+0xdc>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	4a1f      	ldr	r2, [pc, #124]	; (8000de4 <SCH_Add_Task+0xe0>)
 8000d66:	460b      	mov	r3, r1
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	3308      	adds	r3, #8
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].RunMe = 0;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <SCH_Add_Task+0xdc>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <SCH_Add_Task+0xe0>)
 8000d7e:	460b      	mov	r3, r1
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	440b      	add	r3, r1
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	330c      	adds	r3, #12
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]

        SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <SCH_Add_Task+0xdc>)
 8000d90:	781a      	ldrb	r2, [r3, #0]
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <SCH_Add_Task+0xdc>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4610      	mov	r0, r2
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <SCH_Add_Task+0xe0>)
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	440b      	add	r3, r1
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	3310      	adds	r3, #16
 8000da8:	6018      	str	r0, [r3, #0]

        current_index_task++;
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <SCH_Add_Task+0xdc>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <SCH_Add_Task+0xdc>)
 8000db4:	701a      	strb	r2, [r3, #0]
        return SCH_tasks_G[current_index_task-1].TaskID;
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <SCH_Add_Task+0xdc>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	1e5a      	subs	r2, r3, #1
 8000dbc:	4909      	ldr	r1, [pc, #36]	; (8000de4 <SCH_Add_Task+0xe0>)
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	3310      	adds	r3, #16
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	e001      	b.n	8000dd2 <SCH_Add_Task+0xce>
    }
    return -1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	cccccccd 	.word	0xcccccccd
 8000de0:	200000a8 	.word	0x200000a8
 8000de4:	200001bc 	.word	0x200001bc

08000de8 <SCH_Update>:

void SCH_Update(void){
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
    for (int i = 0; i < current_index_task; i++){
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	e048      	b.n	8000e86 <SCH_Update+0x9e>
        if(SCH_tasks_G[i].Delay > 0){
 8000df4:	492a      	ldr	r1, [pc, #168]	; (8000ea0 <SCH_Update+0xb8>)
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	440b      	add	r3, r1
 8000e02:	3304      	adds	r3, #4
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d013      	beq.n	8000e32 <SCH_Update+0x4a>
            SCH_tasks_G[i].Delay--;
 8000e0a:	4925      	ldr	r1, [pc, #148]	; (8000ea0 <SCH_Update+0xb8>)
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	440b      	add	r3, r1
 8000e18:	3304      	adds	r3, #4
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	1e59      	subs	r1, r3, #1
 8000e1e:	4820      	ldr	r0, [pc, #128]	; (8000ea0 <SCH_Update+0xb8>)
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4403      	add	r3, r0
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	6019      	str	r1, [r3, #0]
 8000e30:	e026      	b.n	8000e80 <SCH_Update+0x98>
        }
        else {
            SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8000e32:	491b      	ldr	r1, [pc, #108]	; (8000ea0 <SCH_Update+0xb8>)
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	3308      	adds	r3, #8
 8000e42:	6819      	ldr	r1, [r3, #0]
 8000e44:	4816      	ldr	r0, [pc, #88]	; (8000ea0 <SCH_Update+0xb8>)
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4403      	add	r3, r0
 8000e52:	3304      	adds	r3, #4
 8000e54:	6019      	str	r1, [r3, #0]
            SCH_tasks_G[i].RunMe += 1;
 8000e56:	4912      	ldr	r1, [pc, #72]	; (8000ea0 <SCH_Update+0xb8>)
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	440b      	add	r3, r1
 8000e64:	330c      	adds	r3, #12
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b2d8      	uxtb	r0, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <SCH_Update+0xb8>)
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	330c      	adds	r3, #12
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < current_index_task; i++){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3301      	adds	r3, #1
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <SCH_Update+0xbc>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	dbb0      	blt.n	8000df4 <SCH_Update+0xc>
        }
    }
}
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200001bc 	.word	0x200001bc
 8000ea4:	200000a8 	.word	0x200000a8

08000ea8 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
    for (int i = 0; i < current_index_task; i++){
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	e03a      	b.n	8000f2a <SCH_Dispatch_Tasks+0x82>
        if (SCH_tasks_G[i].RunMe > 0){
 8000eb4:	4922      	ldr	r1, [pc, #136]	; (8000f40 <SCH_Dispatch_Tasks+0x98>)
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	330c      	adds	r3, #12
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d02c      	beq.n	8000f24 <SCH_Dispatch_Tasks+0x7c>
            SCH_tasks_G[i].RunMe--;
 8000eca:	491d      	ldr	r1, [pc, #116]	; (8000f40 <SCH_Dispatch_Tasks+0x98>)
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	330c      	adds	r3, #12
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	b2d8      	uxtb	r0, r3
 8000ee0:	4917      	ldr	r1, [pc, #92]	; (8000f40 <SCH_Dispatch_Tasks+0x98>)
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	330c      	adds	r3, #12
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	701a      	strb	r2, [r3, #0]
            SCH_tasks_G[i].pTask();
 8000ef4:	4912      	ldr	r1, [pc, #72]	; (8000f40 <SCH_Dispatch_Tasks+0x98>)
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4798      	blx	r3
            if (SCH_tasks_G[i].Period == 0){
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <SCH_Dispatch_Tasks+0x98>)
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	3308      	adds	r3, #8
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d103      	bne.n	8000f24 <SCH_Dispatch_Tasks+0x7c>
            	SCH_Delete(i);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f812 	bl	8000f48 <SCH_Delete>
    for (int i = 0; i < current_index_task; i++){
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3301      	adds	r3, #1
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SCH_Dispatch_Tasks+0x9c>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4293      	cmp	r3, r2
 8000f34:	dbbe      	blt.n	8000eb4 <SCH_Dispatch_Tasks+0xc>
            }
        }
    }
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200001bc 	.word	0x200001bc
 8000f44:	200000a8 	.word	0x200000a8

08000f48 <SCH_Delete>:

uint8_t SCH_Delete(uint32_t ID){
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if (SCH_tasks_G[ID].pTask == 0) {
 8000f50:	4937      	ldr	r1, [pc, #220]	; (8001030 <SCH_Delete+0xe8>)
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d101      	bne.n	8000f68 <SCH_Delete+0x20>
		return -1;
 8000f64:	23ff      	movs	r3, #255	; 0xff
 8000f66:	e05e      	b.n	8001026 <SCH_Delete+0xde>
	}

	for (int i = ID; i < current_index_task; i++){
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	e04d      	b.n	800100a <SCH_Delete+0xc2>
		SCH_tasks_G[i].pTask = SCH_tasks_G[i+1].pTask;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	492f      	ldr	r1, [pc, #188]	; (8001030 <SCH_Delete+0xe8>)
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	6819      	ldr	r1, [r3, #0]
 8000f80:	482b      	ldr	r0, [pc, #172]	; (8001030 <SCH_Delete+0xe8>)
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4403      	add	r3, r0
 8000f8e:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Delay = SCH_tasks_G[i+1].Delay;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	4926      	ldr	r1, [pc, #152]	; (8001030 <SCH_Delete+0xe8>)
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	6819      	ldr	r1, [r3, #0]
 8000fa4:	4822      	ldr	r0, [pc, #136]	; (8001030 <SCH_Delete+0xe8>)
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4403      	add	r3, r0
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Period = SCH_tasks_G[i+1].Period;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	491d      	ldr	r1, [pc, #116]	; (8001030 <SCH_Delete+0xe8>)
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3308      	adds	r3, #8
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	4819      	ldr	r0, [pc, #100]	; (8001030 <SCH_Delete+0xe8>)
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4403      	add	r3, r0
 8000fd8:	3308      	adds	r3, #8
 8000fda:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].RunMe = SCH_tasks_G[i+1].RunMe;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	4913      	ldr	r1, [pc, #76]	; (8001030 <SCH_Delete+0xe8>)
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	330c      	adds	r3, #12
 8000fee:	7818      	ldrb	r0, [r3, #0]
 8000ff0:	490f      	ldr	r1, [pc, #60]	; (8001030 <SCH_Delete+0xe8>)
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	330c      	adds	r3, #12
 8001000:	4602      	mov	r2, r0
 8001002:	701a      	strb	r2, [r3, #0]
	for (int i = ID; i < current_index_task; i++){
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <SCH_Delete+0xec>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4293      	cmp	r3, r2
 8001014:	dbab      	blt.n	8000f6e <SCH_Delete+0x26>
	}

	current_index_task--;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <SCH_Delete+0xec>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	3b01      	subs	r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <SCH_Delete+0xec>)
 8001020:	701a      	strb	r2, [r3, #0]
	return current_index_task;
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SCH_Delete+0xec>)
 8001024:	781b      	ldrb	r3, [r3, #0]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	200001bc 	.word	0x200001bc
 8001034:	200000a8 	.word	0x200000a8

08001038 <setTimer1>:

//timer7
int timer7_counter=0;
int timer7_flag=0;

void setTimer1(int duration){
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8001040:	4a05      	ldr	r2, [pc, #20]	; (8001058 <setTimer1+0x20>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <setTimer1+0x24>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200000ac 	.word	0x200000ac
 800105c:	200000b0 	.word	0x200000b0

08001060 <setTimer2>:

void setTimer2(int duration){
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8001068:	4a05      	ldr	r2, [pc, #20]	; (8001080 <setTimer2+0x20>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <setTimer2+0x24>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200000b4 	.word	0x200000b4
 8001084:	200000b8 	.word	0x200000b8

08001088 <setTimer5>:
void setTimer4(int duration){
	timer4_counter=duration;
	timer4_flag=0;
}

void setTimer5(int duration){
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	timer5_counter=duration;
 8001090:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <setTimer5+0x20>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <setTimer5+0x24>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	200000cc 	.word	0x200000cc
 80010ac:	200000d0 	.word	0x200000d0

080010b0 <timerRun>:
void setTimer7(int duration){
	timer7_counter=duration;
	timer7_flag=0;
}

void timerRun(){
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 80010b4:	4b39      	ldr	r3, [pc, #228]	; (800119c <timerRun+0xec>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dd0b      	ble.n	80010d4 <timerRun+0x24>
		timer1_counter--;
 80010bc:	4b37      	ldr	r3, [pc, #220]	; (800119c <timerRun+0xec>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	4a36      	ldr	r2, [pc, #216]	; (800119c <timerRun+0xec>)
 80010c4:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 80010c6:	4b35      	ldr	r3, [pc, #212]	; (800119c <timerRun+0xec>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	dc02      	bgt.n	80010d4 <timerRun+0x24>
			timer1_flag=1;
 80010ce:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <timerRun+0xf0>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <timerRun+0xf4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	dd0b      	ble.n	80010f4 <timerRun+0x44>
		timer2_counter--;
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <timerRun+0xf4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	4a30      	ldr	r2, [pc, #192]	; (80011a4 <timerRun+0xf4>)
 80010e4:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <timerRun+0xf4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	dc02      	bgt.n	80010f4 <timerRun+0x44>
			timer2_flag=1;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <timerRun+0xf8>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0){
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <timerRun+0xfc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dd0b      	ble.n	8001114 <timerRun+0x64>
		timer3_counter--;
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <timerRun+0xfc>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3b01      	subs	r3, #1
 8001102:	4a2a      	ldr	r2, [pc, #168]	; (80011ac <timerRun+0xfc>)
 8001104:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <timerRun+0xfc>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	dc02      	bgt.n	8001114 <timerRun+0x64>
			timer3_flag=1;
 800110e:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <timerRun+0x100>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0){
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <timerRun+0x104>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	dd0b      	ble.n	8001134 <timerRun+0x84>
		timer4_counter--;
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <timerRun+0x104>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3b01      	subs	r3, #1
 8001122:	4a24      	ldr	r2, [pc, #144]	; (80011b4 <timerRun+0x104>)
 8001124:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0){
 8001126:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <timerRun+0x104>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	dc02      	bgt.n	8001134 <timerRun+0x84>
			timer4_flag=1;
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <timerRun+0x108>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0){
 8001134:	4b21      	ldr	r3, [pc, #132]	; (80011bc <timerRun+0x10c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	dd0b      	ble.n	8001154 <timerRun+0xa4>
		timer5_counter--;
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <timerRun+0x10c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3b01      	subs	r3, #1
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <timerRun+0x10c>)
 8001144:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0){
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <timerRun+0x10c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	dc02      	bgt.n	8001154 <timerRun+0xa4>
			timer5_flag=1;
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <timerRun+0x110>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer6_counter > 0){
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <timerRun+0x114>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	dd0b      	ble.n	8001174 <timerRun+0xc4>
		timer6_counter--;
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <timerRun+0x114>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3b01      	subs	r3, #1
 8001162:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <timerRun+0x114>)
 8001164:	6013      	str	r3, [r2, #0]
		if (timer6_counter <= 0){
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <timerRun+0x114>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	dc02      	bgt.n	8001174 <timerRun+0xc4>
			timer6_flag=1;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <timerRun+0x118>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer7_counter > 0){
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <timerRun+0x11c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	dd0b      	ble.n	8001194 <timerRun+0xe4>
		timer7_counter--;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <timerRun+0x11c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3b01      	subs	r3, #1
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <timerRun+0x11c>)
 8001184:	6013      	str	r3, [r2, #0]
		if (timer7_counter <= 0){
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <timerRun+0x11c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	dc02      	bgt.n	8001194 <timerRun+0xe4>
			timer7_flag=1;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <timerRun+0x120>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	200000ac 	.word	0x200000ac
 80011a0:	200000b0 	.word	0x200000b0
 80011a4:	200000b4 	.word	0x200000b4
 80011a8:	200000b8 	.word	0x200000b8
 80011ac:	200000bc 	.word	0x200000bc
 80011b0:	200000c0 	.word	0x200000c0
 80011b4:	200000c4 	.word	0x200000c4
 80011b8:	200000c8 	.word	0x200000c8
 80011bc:	200000cc 	.word	0x200000cc
 80011c0:	200000d0 	.word	0x200000d0
 80011c4:	200000d4 	.word	0x200000d4
 80011c8:	200000d8 	.word	0x200000d8
 80011cc:	200000dc 	.word	0x200000dc
 80011d0:	200000e0 	.word	0x200000e0

080011d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_MspInit+0x5c>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	4a14      	ldr	r2, [pc, #80]	; (8001230 <HAL_MspInit+0x5c>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6193      	str	r3, [r2, #24]
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_MspInit+0x5c>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <HAL_MspInit+0x5c>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <HAL_MspInit+0x5c>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	61d3      	str	r3, [r2, #28]
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <HAL_MspInit+0x5c>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_MspInit+0x60>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_MspInit+0x60>)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000

08001238 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001248:	d113      	bne.n	8001272 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_TIM_Base_MspInit+0x44>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <HAL_TIM_Base_MspInit+0x44>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	61d3      	str	r3, [r2, #28]
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_TIM_Base_MspInit+0x44>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	201c      	movs	r0, #28
 8001268:	f000 fa97 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800126c:	201c      	movs	r0, #28
 800126e:	f000 fab0 	bl	80017d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_TIM_PWM_MspInit+0x44>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d113      	bne.n	80012ba <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <HAL_TIM_PWM_MspInit+0x48>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <HAL_TIM_PWM_MspInit+0x48>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_TIM_PWM_MspInit+0x48>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	201d      	movs	r0, #29
 80012b0:	f000 fa73 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012b4:	201d      	movs	r0, #29
 80012b6:	f000 fa8c 	bl	80017d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40000400 	.word	0x40000400
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a18      	ldr	r2, [pc, #96]	; (8001348 <HAL_TIM_MspPostInit+0x7c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d129      	bne.n	8001340 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_TIM_MspPostInit+0x80>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a16      	ldr	r2, [pc, #88]	; (800134c <HAL_TIM_MspPostInit+0x80>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_TIM_MspPostInit+0x80>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001304:	2340      	movs	r3, #64	; 0x40
 8001306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4619      	mov	r1, r3
 8001316:	480e      	ldr	r0, [pc, #56]	; (8001350 <HAL_TIM_MspPostInit+0x84>)
 8001318:	f000 fb28 	bl	800196c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_TIM_MspPostInit+0x88>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_TIM_MspPostInit+0x88>)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40000400 	.word	0x40000400
 800134c:	40021000 	.word	0x40021000
 8001350:	40011000 	.word	0x40011000
 8001354:	40010000 	.word	0x40010000

08001358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <HAL_UART_MspInit+0x98>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d137      	bne.n	80013e8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <HAL_UART_MspInit+0x9c>)
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <HAL_UART_MspInit+0x9c>)
 800137e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001382:	61d3      	str	r3, [r2, #28]
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_UART_MspInit+0x9c>)
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_UART_MspInit+0x9c>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_UART_MspInit+0x9c>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_UART_MspInit+0x9c>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013a8:	2304      	movs	r3, #4
 80013aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	480f      	ldr	r0, [pc, #60]	; (80013f8 <HAL_UART_MspInit+0xa0>)
 80013bc:	f000 fad6 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013c0:	2308      	movs	r3, #8
 80013c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	4809      	ldr	r0, [pc, #36]	; (80013f8 <HAL_UART_MspInit+0xa0>)
 80013d4:	f000 faca 	bl	800196c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	2026      	movs	r0, #38	; 0x26
 80013de:	f000 f9dc 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013e2:	2026      	movs	r0, #38	; 0x26
 80013e4:	f000 f9f5 	bl	80017d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40004400 	.word	0x40004400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010800 	.word	0x40010800

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler+0x4>

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <MemManage_Handler+0x4>

0800140e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler+0x4>

0800141a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001442:	f000 f893 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <TIM2_IRQHandler+0x10>)
 8001452:	f001 f9e1 	bl	8002818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000012c 	.word	0x2000012c

08001460 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <TIM3_IRQHandler+0x10>)
 8001466:	f001 f9d7 	bl	8002818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200000e4 	.word	0x200000e4

08001474 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <USART2_IRQHandler+0x10>)
 800147a:	f001 ffe7 	bl	800344c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000174 	.word	0x20000174

08001488 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001494:	f7ff fff8 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800149a:	490c      	ldr	r1, [pc, #48]	; (80014cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014b0:	4c09      	ldr	r4, [pc, #36]	; (80014d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014be:	f002 fca7 	bl	8003e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014c2:	f7ff f965 	bl	8000790 <main>
  bx lr
 80014c6:	4770      	bx	lr
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80014d0:	08003eb4 	.word	0x08003eb4
  ldr r2, =_sbss
 80014d4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80014d8:	200004e0 	.word	0x200004e0

080014dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC1_2_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_Init+0x28>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_Init+0x28>)
 80014ea:	f043 0310 	orr.w	r3, r3, #16
 80014ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 f947 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f6:	200f      	movs	r0, #15
 80014f8:	f000 f808 	bl	800150c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014fc:	f7ff fe6a 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40022000 	.word	0x40022000

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x54>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f95f 	bl	80017ee <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 f927 	bl	800179a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_InitTick+0x5c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000058 	.word	0x20000058
 8001564:	20000060 	.word	0x20000060
 8001568:	2000005c 	.word	0x2000005c

0800156c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_IncTick+0x1c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_IncTick+0x20>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <HAL_IncTick+0x20>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	20000060 	.word	0x20000060
 800158c:	200004dc 	.word	0x200004dc

08001590 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b02      	ldr	r3, [pc, #8]	; (80015a0 <HAL_GetTick+0x10>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	200004dc 	.word	0x200004dc

080015a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff fff0 	bl	8001590 <HAL_GetTick>
 80015b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015bc:	d005      	beq.n	80015ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_Delay+0x44>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ca:	bf00      	nop
 80015cc:	f7ff ffe0 	bl	8001590 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8f7      	bhi.n	80015cc <HAL_Delay+0x28>
  {
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000060 	.word	0x20000060

080015ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001608:	4013      	ands	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161e:	4a04      	ldr	r2, [pc, #16]	; (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	60d3      	str	r3, [r2, #12]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <__NVIC_GetPriorityGrouping+0x18>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	f003 0307 	and.w	r3, r3, #7
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db0b      	blt.n	800167a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	f003 021f 	and.w	r2, r3, #31
 8001668:	4906      	ldr	r1, [pc, #24]	; (8001684 <__NVIC_EnableIRQ+0x34>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2001      	movs	r0, #1
 8001672:	fa00 f202 	lsl.w	r2, r0, r2
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0a      	blt.n	80016b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	490c      	ldr	r1, [pc, #48]	; (80016d4 <__NVIC_SetPriority+0x4c>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b0:	e00a      	b.n	80016c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4908      	ldr	r1, [pc, #32]	; (80016d8 <__NVIC_SetPriority+0x50>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	3b04      	subs	r3, #4
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	761a      	strb	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f1c3 0307 	rsb	r3, r3, #7
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	bf28      	it	cs
 80016fa:	2304      	movcs	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3304      	adds	r3, #4
 8001702:	2b06      	cmp	r3, #6
 8001704:	d902      	bls.n	800170c <NVIC_EncodePriority+0x30>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3b03      	subs	r3, #3
 800170a:	e000      	b.n	800170e <NVIC_EncodePriority+0x32>
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	f04f 32ff 	mov.w	r2, #4294967295
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	401a      	ands	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001724:	f04f 31ff 	mov.w	r1, #4294967295
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	43d9      	mvns	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	4313      	orrs	r3, r2
         );
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001750:	d301      	bcc.n	8001756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2301      	movs	r3, #1
 8001754:	e00f      	b.n	8001776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <SysTick_Config+0x40>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175e:	210f      	movs	r1, #15
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f7ff ff90 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <SysTick_Config+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <SysTick_Config+0x40>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff2d 	bl	80015ec <__NVIC_SetPriorityGrouping>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ac:	f7ff ff42 	bl	8001634 <__NVIC_GetPriorityGrouping>
 80017b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7ff ff90 	bl	80016dc <NVIC_EncodePriority>
 80017bc:	4602      	mov	r2, r0
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff5f 	bl	8001688 <__NVIC_SetPriority>
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff35 	bl	8001650 <__NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffa2 	bl	8001740 <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001806:	b480      	push	{r7}
 8001808:	b085      	sub	sp, #20
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d008      	beq.n	8001830 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2204      	movs	r2, #4
 8001822:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e020      	b.n	8001872 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 020e 	bic.w	r2, r2, #14
 800183e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001858:	2101      	movs	r1, #1
 800185a:	fa01 f202 	lsl.w	r2, r1, r2
 800185e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d005      	beq.n	80018a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2204      	movs	r2, #4
 8001898:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
 800189e:	e051      	b.n	8001944 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 020e 	bic.w	r2, r2, #14
 80018ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a22      	ldr	r2, [pc, #136]	; (8001950 <HAL_DMA_Abort_IT+0xd4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d029      	beq.n	800191e <HAL_DMA_Abort_IT+0xa2>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a21      	ldr	r2, [pc, #132]	; (8001954 <HAL_DMA_Abort_IT+0xd8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d022      	beq.n	800191a <HAL_DMA_Abort_IT+0x9e>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <HAL_DMA_Abort_IT+0xdc>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d01a      	beq.n	8001914 <HAL_DMA_Abort_IT+0x98>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1e      	ldr	r2, [pc, #120]	; (800195c <HAL_DMA_Abort_IT+0xe0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d012      	beq.n	800190e <HAL_DMA_Abort_IT+0x92>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <HAL_DMA_Abort_IT+0xe4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d00a      	beq.n	8001908 <HAL_DMA_Abort_IT+0x8c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <HAL_DMA_Abort_IT+0xe8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d102      	bne.n	8001902 <HAL_DMA_Abort_IT+0x86>
 80018fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001900:	e00e      	b.n	8001920 <HAL_DMA_Abort_IT+0xa4>
 8001902:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001906:	e00b      	b.n	8001920 <HAL_DMA_Abort_IT+0xa4>
 8001908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800190c:	e008      	b.n	8001920 <HAL_DMA_Abort_IT+0xa4>
 800190e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001912:	e005      	b.n	8001920 <HAL_DMA_Abort_IT+0xa4>
 8001914:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001918:	e002      	b.n	8001920 <HAL_DMA_Abort_IT+0xa4>
 800191a:	2310      	movs	r3, #16
 800191c:	e000      	b.n	8001920 <HAL_DMA_Abort_IT+0xa4>
 800191e:	2301      	movs	r3, #1
 8001920:	4a11      	ldr	r2, [pc, #68]	; (8001968 <HAL_DMA_Abort_IT+0xec>)
 8001922:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4798      	blx	r3
    } 
  }
  return status;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40020008 	.word	0x40020008
 8001954:	4002001c 	.word	0x4002001c
 8001958:	40020030 	.word	0x40020030
 800195c:	40020044 	.word	0x40020044
 8001960:	40020058 	.word	0x40020058
 8001964:	4002006c 	.word	0x4002006c
 8001968:	40020000 	.word	0x40020000

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b08b      	sub	sp, #44	; 0x2c
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197e:	e169      	b.n	8001c54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001980:	2201      	movs	r2, #1
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	429a      	cmp	r2, r3
 800199a:	f040 8158 	bne.w	8001c4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4a9a      	ldr	r2, [pc, #616]	; (8001c0c <HAL_GPIO_Init+0x2a0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d05e      	beq.n	8001a66 <HAL_GPIO_Init+0xfa>
 80019a8:	4a98      	ldr	r2, [pc, #608]	; (8001c0c <HAL_GPIO_Init+0x2a0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d875      	bhi.n	8001a9a <HAL_GPIO_Init+0x12e>
 80019ae:	4a98      	ldr	r2, [pc, #608]	; (8001c10 <HAL_GPIO_Init+0x2a4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d058      	beq.n	8001a66 <HAL_GPIO_Init+0xfa>
 80019b4:	4a96      	ldr	r2, [pc, #600]	; (8001c10 <HAL_GPIO_Init+0x2a4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d86f      	bhi.n	8001a9a <HAL_GPIO_Init+0x12e>
 80019ba:	4a96      	ldr	r2, [pc, #600]	; (8001c14 <HAL_GPIO_Init+0x2a8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d052      	beq.n	8001a66 <HAL_GPIO_Init+0xfa>
 80019c0:	4a94      	ldr	r2, [pc, #592]	; (8001c14 <HAL_GPIO_Init+0x2a8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d869      	bhi.n	8001a9a <HAL_GPIO_Init+0x12e>
 80019c6:	4a94      	ldr	r2, [pc, #592]	; (8001c18 <HAL_GPIO_Init+0x2ac>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d04c      	beq.n	8001a66 <HAL_GPIO_Init+0xfa>
 80019cc:	4a92      	ldr	r2, [pc, #584]	; (8001c18 <HAL_GPIO_Init+0x2ac>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d863      	bhi.n	8001a9a <HAL_GPIO_Init+0x12e>
 80019d2:	4a92      	ldr	r2, [pc, #584]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d046      	beq.n	8001a66 <HAL_GPIO_Init+0xfa>
 80019d8:	4a90      	ldr	r2, [pc, #576]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d85d      	bhi.n	8001a9a <HAL_GPIO_Init+0x12e>
 80019de:	2b12      	cmp	r3, #18
 80019e0:	d82a      	bhi.n	8001a38 <HAL_GPIO_Init+0xcc>
 80019e2:	2b12      	cmp	r3, #18
 80019e4:	d859      	bhi.n	8001a9a <HAL_GPIO_Init+0x12e>
 80019e6:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <HAL_GPIO_Init+0x80>)
 80019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ec:	08001a67 	.word	0x08001a67
 80019f0:	08001a41 	.word	0x08001a41
 80019f4:	08001a53 	.word	0x08001a53
 80019f8:	08001a95 	.word	0x08001a95
 80019fc:	08001a9b 	.word	0x08001a9b
 8001a00:	08001a9b 	.word	0x08001a9b
 8001a04:	08001a9b 	.word	0x08001a9b
 8001a08:	08001a9b 	.word	0x08001a9b
 8001a0c:	08001a9b 	.word	0x08001a9b
 8001a10:	08001a9b 	.word	0x08001a9b
 8001a14:	08001a9b 	.word	0x08001a9b
 8001a18:	08001a9b 	.word	0x08001a9b
 8001a1c:	08001a9b 	.word	0x08001a9b
 8001a20:	08001a9b 	.word	0x08001a9b
 8001a24:	08001a9b 	.word	0x08001a9b
 8001a28:	08001a9b 	.word	0x08001a9b
 8001a2c:	08001a9b 	.word	0x08001a9b
 8001a30:	08001a49 	.word	0x08001a49
 8001a34:	08001a5d 	.word	0x08001a5d
 8001a38:	4a79      	ldr	r2, [pc, #484]	; (8001c20 <HAL_GPIO_Init+0x2b4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a3e:	e02c      	b.n	8001a9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	623b      	str	r3, [r7, #32]
          break;
 8001a46:	e029      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	623b      	str	r3, [r7, #32]
          break;
 8001a50:	e024      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	3308      	adds	r3, #8
 8001a58:	623b      	str	r3, [r7, #32]
          break;
 8001a5a:	e01f      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	330c      	adds	r3, #12
 8001a62:	623b      	str	r3, [r7, #32]
          break;
 8001a64:	e01a      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	623b      	str	r3, [r7, #32]
          break;
 8001a72:	e013      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d105      	bne.n	8001a88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	611a      	str	r2, [r3, #16]
          break;
 8001a86:	e009      	b.n	8001a9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a88:	2308      	movs	r3, #8
 8001a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	615a      	str	r2, [r3, #20]
          break;
 8001a92:	e003      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
          break;
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          break;
 8001a9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2bff      	cmp	r3, #255	; 0xff
 8001aa0:	d801      	bhi.n	8001aa6 <HAL_GPIO_Init+0x13a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	e001      	b.n	8001aaa <HAL_GPIO_Init+0x13e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2bff      	cmp	r3, #255	; 0xff
 8001ab0:	d802      	bhi.n	8001ab8 <HAL_GPIO_Init+0x14c>
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	e002      	b.n	8001abe <HAL_GPIO_Init+0x152>
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	3b08      	subs	r3, #8
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	210f      	movs	r1, #15
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	401a      	ands	r2, r3
 8001ad0:	6a39      	ldr	r1, [r7, #32]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 80b1 	beq.w	8001c4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aec:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_GPIO_Init+0x2b8>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a4c      	ldr	r2, [pc, #304]	; (8001c24 <HAL_GPIO_Init+0x2b8>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <HAL_GPIO_Init+0x2b8>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b04:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	4013      	ands	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a40      	ldr	r2, [pc, #256]	; (8001c2c <HAL_GPIO_Init+0x2c0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d013      	beq.n	8001b58 <HAL_GPIO_Init+0x1ec>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a3f      	ldr	r2, [pc, #252]	; (8001c30 <HAL_GPIO_Init+0x2c4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00d      	beq.n	8001b54 <HAL_GPIO_Init+0x1e8>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a3e      	ldr	r2, [pc, #248]	; (8001c34 <HAL_GPIO_Init+0x2c8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d007      	beq.n	8001b50 <HAL_GPIO_Init+0x1e4>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a3d      	ldr	r2, [pc, #244]	; (8001c38 <HAL_GPIO_Init+0x2cc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d101      	bne.n	8001b4c <HAL_GPIO_Init+0x1e0>
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e006      	b.n	8001b5a <HAL_GPIO_Init+0x1ee>
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	e004      	b.n	8001b5a <HAL_GPIO_Init+0x1ee>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e002      	b.n	8001b5a <HAL_GPIO_Init+0x1ee>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_GPIO_Init+0x1ee>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5c:	f002 0203 	and.w	r2, r2, #3
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	4093      	lsls	r3, r2
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b6a:	492f      	ldr	r1, [pc, #188]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b84:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	492c      	ldr	r1, [pc, #176]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	4928      	ldr	r1, [pc, #160]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bac:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	4922      	ldr	r1, [pc, #136]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60cb      	str	r3, [r1, #12]
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	491e      	ldr	r1, [pc, #120]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4918      	ldr	r1, [pc, #96]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	4914      	ldr	r1, [pc, #80]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d021      	beq.n	8001c40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	490e      	ldr	r1, [pc, #56]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	e021      	b.n	8001c4e <HAL_GPIO_Init+0x2e2>
 8001c0a:	bf00      	nop
 8001c0c:	10320000 	.word	0x10320000
 8001c10:	10310000 	.word	0x10310000
 8001c14:	10220000 	.word	0x10220000
 8001c18:	10210000 	.word	0x10210000
 8001c1c:	10120000 	.word	0x10120000
 8001c20:	10110000 	.word	0x10110000
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40010800 	.word	0x40010800
 8001c30:	40010c00 	.word	0x40010c00
 8001c34:	40011000 	.word	0x40011000
 8001c38:	40011400 	.word	0x40011400
 8001c3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_GPIO_Init+0x304>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	4909      	ldr	r1, [pc, #36]	; (8001c70 <HAL_GPIO_Init+0x304>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	3301      	adds	r3, #1
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f47f ae8e 	bne.w	8001980 <HAL_GPIO_Init+0x14>
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	372c      	adds	r7, #44	; 0x2c
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	40010400 	.word	0x40010400

08001c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e001      	b.n	8001c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	807b      	strh	r3, [r7, #2]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cb2:	787b      	ldrb	r3, [r7, #1]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb8:	887a      	ldrh	r2, [r7, #2]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cbe:	e003      	b.n	8001cc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	041a      	lsls	r2, r3, #16
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	611a      	str	r2, [r3, #16]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e26c      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8087 	beq.w	8001e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cf4:	4b92      	ldr	r3, [pc, #584]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d00c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d00:	4b8f      	ldr	r3, [pc, #572]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d112      	bne.n	8001d32 <HAL_RCC_OscConfig+0x5e>
 8001d0c:	4b8c      	ldr	r3, [pc, #560]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d18:	d10b      	bne.n	8001d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1a:	4b89      	ldr	r3, [pc, #548]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d06c      	beq.n	8001e00 <HAL_RCC_OscConfig+0x12c>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d168      	bne.n	8001e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e246      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3a:	d106      	bne.n	8001d4a <HAL_RCC_OscConfig+0x76>
 8001d3c:	4b80      	ldr	r3, [pc, #512]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a7f      	ldr	r2, [pc, #508]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e02e      	b.n	8001da8 <HAL_RCC_OscConfig+0xd4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x98>
 8001d52:	4b7b      	ldr	r3, [pc, #492]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a7a      	ldr	r2, [pc, #488]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b78      	ldr	r3, [pc, #480]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a77      	ldr	r2, [pc, #476]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e01d      	b.n	8001da8 <HAL_RCC_OscConfig+0xd4>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0xbc>
 8001d76:	4b72      	ldr	r3, [pc, #456]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a71      	ldr	r2, [pc, #452]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b6f      	ldr	r3, [pc, #444]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a6e      	ldr	r2, [pc, #440]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0xd4>
 8001d90:	4b6b      	ldr	r3, [pc, #428]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a6a      	ldr	r2, [pc, #424]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b68      	ldr	r3, [pc, #416]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a67      	ldr	r2, [pc, #412]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fbee 	bl	8001590 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff fbea 	bl	8001590 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e1fa      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b5d      	ldr	r3, [pc, #372]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0xe4>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fbda 	bl	8001590 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff fbd6 	bl	8001590 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	; 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1e6      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x10c>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d063      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e0e:	4b4c      	ldr	r3, [pc, #304]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e1a:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d11c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x18c>
 8001e26:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d116      	bne.n	8001e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_RCC_OscConfig+0x176>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e1ba      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4a:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4939      	ldr	r1, [pc, #228]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	e03a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e68:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fb8f 	bl	8001590 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e76:	f7ff fb8b 	bl	8001590 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e19b      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4927      	ldr	r1, [pc, #156]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fb6e 	bl	8001590 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fb6a 	bl	8001590 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e17a      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d03a      	beq.n	8001f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d019      	beq.n	8001f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef0:	f7ff fb4e 	bl	8001590 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7ff fb4a 	bl	8001590 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e15a      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f16:	2001      	movs	r0, #1
 8001f18:	f000 facc 	bl	80024b4 <RCC_Delay>
 8001f1c:	e01c      	b.n	8001f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f24:	f7ff fb34 	bl	8001590 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2a:	e00f      	b.n	8001f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2c:	f7ff fb30 	bl	8001590 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d908      	bls.n	8001f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e140      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	42420000 	.word	0x42420000
 8001f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	4b9e      	ldr	r3, [pc, #632]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1e9      	bne.n	8001f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80a6 	beq.w	80020b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6a:	4b97      	ldr	r3, [pc, #604]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10d      	bne.n	8001f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	4b94      	ldr	r3, [pc, #592]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a93      	ldr	r2, [pc, #588]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f80:	61d3      	str	r3, [r2, #28]
 8001f82:	4b91      	ldr	r3, [pc, #580]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f92:	4b8e      	ldr	r3, [pc, #568]	; (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d118      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9e:	4b8b      	ldr	r3, [pc, #556]	; (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a8a      	ldr	r2, [pc, #552]	; (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001faa:	f7ff faf1 	bl	8001590 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb2:	f7ff faed 	bl	8001590 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b64      	cmp	r3, #100	; 0x64
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0fd      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	4b81      	ldr	r3, [pc, #516]	; (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x312>
 8001fd8:	4b7b      	ldr	r3, [pc, #492]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a7a      	ldr	r2, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6213      	str	r3, [r2, #32]
 8001fe4:	e02d      	b.n	8002042 <HAL_RCC_OscConfig+0x36e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0x334>
 8001fee:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a75      	ldr	r2, [pc, #468]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	f023 0301 	bic.w	r3, r3, #1
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	4b73      	ldr	r3, [pc, #460]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a72      	ldr	r2, [pc, #456]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	f023 0304 	bic.w	r3, r3, #4
 8002004:	6213      	str	r3, [r2, #32]
 8002006:	e01c      	b.n	8002042 <HAL_RCC_OscConfig+0x36e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b05      	cmp	r3, #5
 800200e:	d10c      	bne.n	800202a <HAL_RCC_OscConfig+0x356>
 8002010:	4b6d      	ldr	r3, [pc, #436]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4a6c      	ldr	r2, [pc, #432]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002016:	f043 0304 	orr.w	r3, r3, #4
 800201a:	6213      	str	r3, [r2, #32]
 800201c:	4b6a      	ldr	r3, [pc, #424]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a69      	ldr	r2, [pc, #420]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	e00b      	b.n	8002042 <HAL_RCC_OscConfig+0x36e>
 800202a:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a66      	ldr	r2, [pc, #408]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	6213      	str	r3, [r2, #32]
 8002036:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a63      	ldr	r2, [pc, #396]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	f023 0304 	bic.w	r3, r3, #4
 8002040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d015      	beq.n	8002076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7ff faa1 	bl	8001590 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7ff fa9d 	bl	8001590 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e0ab      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002068:	4b57      	ldr	r3, [pc, #348]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ee      	beq.n	8002052 <HAL_RCC_OscConfig+0x37e>
 8002074:	e014      	b.n	80020a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7ff fa8b 	bl	8001590 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207c:	e00a      	b.n	8002094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f7ff fa87 	bl	8001590 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	f241 3288 	movw	r2, #5000	; 0x1388
 800208c:	4293      	cmp	r3, r2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e095      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002094:	4b4c      	ldr	r3, [pc, #304]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1ee      	bne.n	800207e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d105      	bne.n	80020b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a6:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4a47      	ldr	r2, [pc, #284]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8081 	beq.w	80021be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020bc:	4b42      	ldr	r3, [pc, #264]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d061      	beq.n	800218c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d146      	bne.n	800215e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d0:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <HAL_RCC_OscConfig+0x4fc>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff fa5b 	bl	8001590 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020de:	f7ff fa57 	bl	8001590 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e067      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f0:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f0      	bne.n	80020de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002104:	d108      	bne.n	8002118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002106:	4b30      	ldr	r3, [pc, #192]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	492d      	ldr	r1, [pc, #180]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002118:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a19      	ldr	r1, [r3, #32]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	430b      	orrs	r3, r1
 800212a:	4927      	ldr	r1, [pc, #156]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_RCC_OscConfig+0x4fc>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7ff fa2b 	bl	8001590 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213e:	f7ff fa27 	bl	8001590 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e037      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x46a>
 800215c:	e02f      	b.n	80021be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_RCC_OscConfig+0x4fc>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fa14 	bl	8001590 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7ff fa10 	bl	8001590 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e020      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x498>
 800218a:	e018      	b.n	80021be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e013      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40007000 	.word	0x40007000
 80021d0:	42420060 	.word	0x42420060

080021d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0d0      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e8:	4b6a      	ldr	r3, [pc, #424]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d910      	bls.n	8002218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b67      	ldr	r3, [pc, #412]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0207 	bic.w	r2, r3, #7
 80021fe:	4965      	ldr	r1, [pc, #404]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b63      	ldr	r3, [pc, #396]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0b8      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002230:	4b59      	ldr	r3, [pc, #356]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a58      	ldr	r2, [pc, #352]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800223a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002252:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002254:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	494d      	ldr	r1, [pc, #308]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d040      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d115      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e07f      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	4b41      	ldr	r3, [pc, #260]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e073      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e06b      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	4b39      	ldr	r3, [pc, #228]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4936      	ldr	r1, [pc, #216]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c4:	f7ff f964 	bl	8001590 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7ff f960 	bl	8001590 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e053      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 020c 	and.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1eb      	bne.n	80022cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022f4:	4b27      	ldr	r3, [pc, #156]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d210      	bcs.n	8002324 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b24      	ldr	r3, [pc, #144]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	4922      	ldr	r1, [pc, #136]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e032      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4916      	ldr	r1, [pc, #88]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	490e      	ldr	r1, [pc, #56]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002362:	f000 f821 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8002366:	4602      	mov	r2, r0
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	490a      	ldr	r1, [pc, #40]	; (800239c <HAL_RCC_ClockConfig+0x1c8>)
 8002374:	5ccb      	ldrb	r3, [r1, r3]
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1cc>)
 800237c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff f8c2 	bl	800150c <HAL_InitTick>

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40022000 	.word	0x40022000
 8002398:	40021000 	.word	0x40021000
 800239c:	08003e80 	.word	0x08003e80
 80023a0:	20000058 	.word	0x20000058
 80023a4:	2000005c 	.word	0x2000005c

080023a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <HAL_RCC_GetSysClockFreq+0x94>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d002      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x30>
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d003      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0x36>
 80023d6:	e027      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_GetSysClockFreq+0x98>)
 80023da:	613b      	str	r3, [r7, #16]
      break;
 80023dc:	e027      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	0c9b      	lsrs	r3, r3, #18
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	4a17      	ldr	r2, [pc, #92]	; (8002444 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023e8:	5cd3      	ldrb	r3, [r2, r3]
 80023ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d010      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_RCC_GetSysClockFreq+0x94>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	0c5b      	lsrs	r3, r3, #17
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	4a11      	ldr	r2, [pc, #68]	; (8002448 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a0d      	ldr	r2, [pc, #52]	; (8002440 <HAL_RCC_GetSysClockFreq+0x98>)
 800240a:	fb02 f203 	mul.w	r2, r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e004      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a0c      	ldr	r2, [pc, #48]	; (800244c <HAL_RCC_GetSysClockFreq+0xa4>)
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	613b      	str	r3, [r7, #16]
      break;
 8002426:	e002      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_RCC_GetSysClockFreq+0x98>)
 800242a:	613b      	str	r3, [r7, #16]
      break;
 800242c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242e:	693b      	ldr	r3, [r7, #16]
}
 8002430:	4618      	mov	r0, r3
 8002432:	371c      	adds	r7, #28
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	007a1200 	.word	0x007a1200
 8002444:	08003e98 	.word	0x08003e98
 8002448:	08003ea8 	.word	0x08003ea8
 800244c:	003d0900 	.word	0x003d0900

08002450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002454:	4b02      	ldr	r3, [pc, #8]	; (8002460 <HAL_RCC_GetHCLKFreq+0x10>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	20000058 	.word	0x20000058

08002464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002468:	f7ff fff2 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	; (8002488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000
 8002488:	08003e90 	.word	0x08003e90

0800248c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002490:	f7ff ffde 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	0adb      	lsrs	r3, r3, #11
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4903      	ldr	r1, [pc, #12]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	08003e90 	.word	0x08003e90

080024b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <RCC_Delay+0x34>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <RCC_Delay+0x38>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0a5b      	lsrs	r3, r3, #9
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024d0:	bf00      	nop
  }
  while (Delay --);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1e5a      	subs	r2, r3, #1
 80024d6:	60fa      	str	r2, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f9      	bne.n	80024d0 <RCC_Delay+0x1c>
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	20000058 	.word	0x20000058
 80024ec:	10624dd3 	.word	0x10624dd3

080024f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e041      	b.n	8002586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe fe8e 	bl	8001238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4610      	mov	r0, r2
 8002530:	f000 fc28 	bl	8002d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d001      	beq.n	80025a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e03a      	b.n	800261e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_TIM_Base_Start_IT+0x98>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00e      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x58>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d2:	d009      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x58>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <HAL_TIM_Base_Start_IT+0x9c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x58>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a13      	ldr	r2, [pc, #76]	; (8002630 <HAL_TIM_Base_Start_IT+0xa0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d111      	bne.n	800260c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d010      	beq.n	800261c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260a:	e007      	b.n	800261c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	40012c00 	.word	0x40012c00
 800262c:	40000400 	.word	0x40000400
 8002630:	40000800 	.word	0x40000800

08002634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e041      	b.n	80026ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe fe10 	bl	8001280 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3304      	adds	r3, #4
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	f000 fb86 	bl	8002d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d109      	bne.n	80026f8 <HAL_TIM_PWM_Start+0x24>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	bf14      	ite	ne
 80026f0:	2301      	movne	r3, #1
 80026f2:	2300      	moveq	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	e022      	b.n	800273e <HAL_TIM_PWM_Start+0x6a>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d109      	bne.n	8002712 <HAL_TIM_PWM_Start+0x3e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	e015      	b.n	800273e <HAL_TIM_PWM_Start+0x6a>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d109      	bne.n	800272c <HAL_TIM_PWM_Start+0x58>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	bf14      	ite	ne
 8002724:	2301      	movne	r3, #1
 8002726:	2300      	moveq	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	e008      	b.n	800273e <HAL_TIM_PWM_Start+0x6a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	bf14      	ite	ne
 8002738:	2301      	movne	r3, #1
 800273a:	2300      	moveq	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e05e      	b.n	8002804 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <HAL_TIM_PWM_Start+0x82>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002754:	e013      	b.n	800277e <HAL_TIM_PWM_Start+0xaa>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b04      	cmp	r3, #4
 800275a:	d104      	bne.n	8002766 <HAL_TIM_PWM_Start+0x92>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002764:	e00b      	b.n	800277e <HAL_TIM_PWM_Start+0xaa>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b08      	cmp	r3, #8
 800276a:	d104      	bne.n	8002776 <HAL_TIM_PWM_Start+0xa2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002774:	e003      	b.n	800277e <HAL_TIM_PWM_Start+0xaa>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2202      	movs	r2, #2
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2201      	movs	r2, #1
 8002784:	6839      	ldr	r1, [r7, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fd7c 	bl	8003284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1e      	ldr	r2, [pc, #120]	; (800280c <HAL_TIM_PWM_Start+0x138>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d107      	bne.n	80027a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a18      	ldr	r2, [pc, #96]	; (800280c <HAL_TIM_PWM_Start+0x138>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00e      	beq.n	80027ce <HAL_TIM_PWM_Start+0xfa>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b8:	d009      	beq.n	80027ce <HAL_TIM_PWM_Start+0xfa>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a14      	ldr	r2, [pc, #80]	; (8002810 <HAL_TIM_PWM_Start+0x13c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d004      	beq.n	80027ce <HAL_TIM_PWM_Start+0xfa>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a12      	ldr	r2, [pc, #72]	; (8002814 <HAL_TIM_PWM_Start+0x140>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d111      	bne.n	80027f2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b06      	cmp	r3, #6
 80027de:	d010      	beq.n	8002802 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f0:	e007      	b.n	8002802 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40012c00 	.word	0x40012c00
 8002810:	40000400 	.word	0x40000400
 8002814:	40000800 	.word	0x40000800

08002818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b02      	cmp	r3, #2
 800282c:	d122      	bne.n	8002874 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b02      	cmp	r3, #2
 800283a:	d11b      	bne.n	8002874 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0202 	mvn.w	r2, #2
 8002844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fa76 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 8002860:	e005      	b.n	800286e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fa69 	bl	8002d3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fa78 	bl	8002d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b04      	cmp	r3, #4
 8002880:	d122      	bne.n	80028c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b04      	cmp	r3, #4
 800288e:	d11b      	bne.n	80028c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0204 	mvn.w	r2, #4
 8002898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2202      	movs	r2, #2
 800289e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fa4c 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 80028b4:	e005      	b.n	80028c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fa3f 	bl	8002d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fa4e 	bl	8002d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d122      	bne.n	800291c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d11b      	bne.n	800291c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0208 	mvn.w	r2, #8
 80028ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2204      	movs	r2, #4
 80028f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fa22 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fa15 	bl	8002d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fa24 	bl	8002d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b10      	cmp	r3, #16
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b10      	cmp	r3, #16
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0210 	mvn.w	r2, #16
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2208      	movs	r2, #8
 8002946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f9f8 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f9eb 	bl	8002d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f9fa 	bl	8002d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d10e      	bne.n	800299c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d107      	bne.n	800299c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0201 	mvn.w	r2, #1
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe f8c0 	bl	8000b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d10e      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d107      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fce9 	bl	800339a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d10e      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d107      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f9be 	bl	8002d70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d10e      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d107      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0220 	mvn.w	r2, #32
 8002a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fcb4 	bl	8003388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e0ae      	b.n	8002ba4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	f200 809f 	bhi.w	8002b94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a56:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5c:	08002a91 	.word	0x08002a91
 8002a60:	08002b95 	.word	0x08002b95
 8002a64:	08002b95 	.word	0x08002b95
 8002a68:	08002b95 	.word	0x08002b95
 8002a6c:	08002ad1 	.word	0x08002ad1
 8002a70:	08002b95 	.word	0x08002b95
 8002a74:	08002b95 	.word	0x08002b95
 8002a78:	08002b95 	.word	0x08002b95
 8002a7c:	08002b13 	.word	0x08002b13
 8002a80:	08002b95 	.word	0x08002b95
 8002a84:	08002b95 	.word	0x08002b95
 8002a88:	08002b95 	.word	0x08002b95
 8002a8c:	08002b53 	.word	0x08002b53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f9d6 	bl	8002e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0208 	orr.w	r2, r2, #8
 8002aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0204 	bic.w	r2, r2, #4
 8002aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6999      	ldr	r1, [r3, #24]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	619a      	str	r2, [r3, #24]
      break;
 8002ace:	e064      	b.n	8002b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fa1c 	bl	8002f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6999      	ldr	r1, [r3, #24]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	021a      	lsls	r2, r3, #8
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	619a      	str	r2, [r3, #24]
      break;
 8002b10:	e043      	b.n	8002b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 fa65 	bl	8002fe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0208 	orr.w	r2, r2, #8
 8002b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0204 	bic.w	r2, r2, #4
 8002b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69d9      	ldr	r1, [r3, #28]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	61da      	str	r2, [r3, #28]
      break;
 8002b50:	e023      	b.n	8002b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 faaf 	bl	80030bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69d9      	ldr	r1, [r3, #28]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	021a      	lsls	r2, r3, #8
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	61da      	str	r2, [r3, #28]
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	75fb      	strb	r3, [r7, #23]
      break;
 8002b98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e0b4      	b.n	8002d32 <HAL_TIM_ConfigClockSource+0x186>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c00:	d03e      	beq.n	8002c80 <HAL_TIM_ConfigClockSource+0xd4>
 8002c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c06:	f200 8087 	bhi.w	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c0e:	f000 8086 	beq.w	8002d1e <HAL_TIM_ConfigClockSource+0x172>
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c16:	d87f      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c18:	2b70      	cmp	r3, #112	; 0x70
 8002c1a:	d01a      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0xa6>
 8002c1c:	2b70      	cmp	r3, #112	; 0x70
 8002c1e:	d87b      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b60      	cmp	r3, #96	; 0x60
 8002c22:	d050      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x11a>
 8002c24:	2b60      	cmp	r3, #96	; 0x60
 8002c26:	d877      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c28:	2b50      	cmp	r3, #80	; 0x50
 8002c2a:	d03c      	beq.n	8002ca6 <HAL_TIM_ConfigClockSource+0xfa>
 8002c2c:	2b50      	cmp	r3, #80	; 0x50
 8002c2e:	d873      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c30:	2b40      	cmp	r3, #64	; 0x40
 8002c32:	d058      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x13a>
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	d86f      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c38:	2b30      	cmp	r3, #48	; 0x30
 8002c3a:	d064      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x15a>
 8002c3c:	2b30      	cmp	r3, #48	; 0x30
 8002c3e:	d86b      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d060      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x15a>
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d867      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d05c      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x15a>
 8002c4c:	2b10      	cmp	r3, #16
 8002c4e:	d05a      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x15a>
 8002c50:	e062      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6899      	ldr	r1, [r3, #8]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f000 faf0 	bl	8003246 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	609a      	str	r2, [r3, #8]
      break;
 8002c7e:	e04f      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6899      	ldr	r1, [r3, #8]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f000 fad9 	bl	8003246 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ca2:	609a      	str	r2, [r3, #8]
      break;
 8002ca4:	e03c      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6859      	ldr	r1, [r3, #4]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f000 fa50 	bl	8003158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2150      	movs	r1, #80	; 0x50
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 faa7 	bl	8003212 <TIM_ITRx_SetConfig>
      break;
 8002cc4:	e02c      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f000 fa6e 	bl	80031b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2160      	movs	r1, #96	; 0x60
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fa97 	bl	8003212 <TIM_ITRx_SetConfig>
      break;
 8002ce4:	e01c      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6859      	ldr	r1, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f000 fa30 	bl	8003158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2140      	movs	r1, #64	; 0x40
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fa87 	bl	8003212 <TIM_ITRx_SetConfig>
      break;
 8002d04:	e00c      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f000 fa7e 	bl	8003212 <TIM_ITRx_SetConfig>
      break;
 8002d16:	e003      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d1c:	e000      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
	...

08002d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <TIM_Base_SetConfig+0xb8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00b      	beq.n	8002db4 <TIM_Base_SetConfig+0x30>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da2:	d007      	beq.n	8002db4 <TIM_Base_SetConfig+0x30>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a26      	ldr	r2, [pc, #152]	; (8002e40 <TIM_Base_SetConfig+0xbc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d003      	beq.n	8002db4 <TIM_Base_SetConfig+0x30>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <TIM_Base_SetConfig+0xc0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d108      	bne.n	8002dc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <TIM_Base_SetConfig+0xb8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00b      	beq.n	8002de6 <TIM_Base_SetConfig+0x62>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd4:	d007      	beq.n	8002de6 <TIM_Base_SetConfig+0x62>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a19      	ldr	r2, [pc, #100]	; (8002e40 <TIM_Base_SetConfig+0xbc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <TIM_Base_SetConfig+0x62>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <TIM_Base_SetConfig+0xc0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d108      	bne.n	8002df8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <TIM_Base_SetConfig+0xb8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d103      	bne.n	8002e2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	615a      	str	r2, [r3, #20]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40000800 	.word	0x40000800

08002e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f023 0201 	bic.w	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f023 0302 	bic.w	r3, r3, #2
 8002e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <TIM_OC1_SetConfig+0xc8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10c      	bne.n	8002ebe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f023 0308 	bic.w	r3, r3, #8
 8002eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <TIM_OC1_SetConfig+0xc8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d111      	bne.n	8002eea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	621a      	str	r2, [r3, #32]
}
 8002f04:	bf00      	nop
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40012c00 	.word	0x40012c00

08002f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f023 0210 	bic.w	r2, r3, #16
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f023 0320 	bic.w	r3, r3, #32
 8002f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <TIM_OC2_SetConfig+0xd0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d10d      	bne.n	8002f90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <TIM_OC2_SetConfig+0xd0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d113      	bne.n	8002fc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	40012c00 	.word	0x40012c00

08002fe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <TIM_OC3_SetConfig+0xd0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10d      	bne.n	8003062 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800304c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <TIM_OC3_SetConfig+0xd0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d113      	bne.n	8003092 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	621a      	str	r2, [r3, #32]
}
 80030ac:	bf00      	nop
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40012c00 	.word	0x40012c00

080030bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	031b      	lsls	r3, r3, #12
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a0f      	ldr	r2, [pc, #60]	; (8003154 <TIM_OC4_SetConfig+0x98>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d109      	bne.n	8003130 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003122:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	019b      	lsls	r3, r3, #6
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	621a      	str	r2, [r3, #32]
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	40012c00 	.word	0x40012c00

08003158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f023 0201 	bic.w	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f023 030a 	bic.w	r3, r3, #10
 8003194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	621a      	str	r2, [r3, #32]
}
 80031aa:	bf00      	nop
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f023 0210 	bic.w	r2, r3, #16
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	031b      	lsls	r3, r3, #12
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	621a      	str	r2, [r3, #32]
}
 8003208:	bf00      	nop
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	f043 0307 	orr.w	r3, r3, #7
 8003234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	609a      	str	r2, [r3, #8]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003246:	b480      	push	{r7}
 8003248:	b087      	sub	sp, #28
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003260:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	021a      	lsls	r2, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	431a      	orrs	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4313      	orrs	r3, r2
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	609a      	str	r2, [r3, #8]
}
 800327a:	bf00      	nop
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2201      	movs	r2, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a1a      	ldr	r2, [r3, #32]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	401a      	ands	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1a      	ldr	r2, [r3, #32]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	431a      	orrs	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	621a      	str	r2, [r3, #32]
}
 80032c2:	bf00      	nop
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e046      	b.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a16      	ldr	r2, [pc, #88]	; (800337c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00e      	beq.n	8003346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003330:	d009      	beq.n	8003346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a10      	ldr	r2, [pc, #64]	; (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10c      	bne.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800334c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	4313      	orrs	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	40012c00 	.word	0x40012c00
 8003380:	40000400 	.word	0x40000400
 8003384:	40000800 	.word	0x40000800

08003388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e042      	b.n	8003444 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd ffc0 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2224      	movs	r2, #36	; 0x24
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fc7f 	bl	8003cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b0ba      	sub	sp, #232	; 0xe8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800348a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10f      	bne.n	80034b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_UART_IRQHandler+0x66>
 800349e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fb63 	bl	8003b76 <UART_Receive_IT>
      return;
 80034b0:	e25b      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80de 	beq.w	8003678 <HAL_UART_IRQHandler+0x22c>
 80034bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80d1 	beq.w	8003678 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <HAL_UART_IRQHandler+0xae>
 80034e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f043 0201 	orr.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_UART_IRQHandler+0xd2>
 8003506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f043 0202 	orr.w	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800351e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <HAL_UART_IRQHandler+0xf6>
 800352a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f043 0204 	orr.w	r2, r3, #4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d011      	beq.n	8003572 <HAL_UART_IRQHandler+0x126>
 800354e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	d105      	bne.n	8003566 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800355a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f043 0208 	orr.w	r2, r3, #8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 81f2 	beq.w	8003960 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800357c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_UART_IRQHandler+0x14e>
 8003588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 faee 	bl	8003b76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d103      	bne.n	80035c6 <HAL_UART_IRQHandler+0x17a>
 80035be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d04f      	beq.n	8003666 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f9f8 	bl	80039bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d041      	beq.n	800365e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80035f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3314      	adds	r3, #20
 8003602:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003606:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800360a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003616:	e841 2300 	strex	r3, r2, [r1]
 800361a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800361e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1d9      	bne.n	80035da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d013      	beq.n	8003656 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	4a7e      	ldr	r2, [pc, #504]	; (800382c <HAL_UART_IRQHandler+0x3e0>)
 8003634:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe f91e 	bl	800187c <HAL_DMA_Abort_IT>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003650:	4610      	mov	r0, r2
 8003652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	e00e      	b.n	8003674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f99c 	bl	8003994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	e00a      	b.n	8003674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f998 	bl	8003994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	e006      	b.n	8003674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f994 	bl	8003994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003672:	e175      	b.n	8003960 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003674:	bf00      	nop
    return;
 8003676:	e173      	b.n	8003960 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	2b01      	cmp	r3, #1
 800367e:	f040 814f 	bne.w	8003920 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8148 	beq.w	8003920 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8141 	beq.w	8003920 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80b6 	beq.w	8003830 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8145 	beq.w	8003964 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036e2:	429a      	cmp	r2, r3
 80036e4:	f080 813e 	bcs.w	8003964 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	f000 8088 	beq.w	800380c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	330c      	adds	r3, #12
 8003702:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800371a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003728:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800372c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003734:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1d9      	bne.n	80036fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3314      	adds	r3, #20
 800374e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3314      	adds	r3, #20
 8003768:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800376c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003770:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003772:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003774:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800377e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e1      	bne.n	8003748 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3314      	adds	r3, #20
 800378a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3314      	adds	r3, #20
 80037a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037b0:	e841 2300 	strex	r3, r2, [r1]
 80037b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e3      	bne.n	8003784 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	330c      	adds	r3, #12
 80037d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037dc:	f023 0310 	bic.w	r3, r3, #16
 80037e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	330c      	adds	r3, #12
 80037ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80037ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80037f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e3      	bne.n	80037ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd fffd 	bl	8001806 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800381a:	b29b      	uxth	r3, r3
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	b29b      	uxth	r3, r3
 8003820:	4619      	mov	r1, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8bf 	bl	80039a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003828:	e09c      	b.n	8003964 <HAL_UART_IRQHandler+0x518>
 800382a:	bf00      	nop
 800382c:	08003a81 	.word	0x08003a81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003838:	b29b      	uxth	r3, r3
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 808e 	beq.w	8003968 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800384c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8089 	beq.w	8003968 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800386c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	330c      	adds	r3, #12
 8003876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800387a:	647a      	str	r2, [r7, #68]	; 0x44
 800387c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e3      	bne.n	8003856 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3314      	adds	r3, #20
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	623b      	str	r3, [r7, #32]
   return(result);
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038b2:	633a      	str	r2, [r7, #48]	; 0x30
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e3      	bne.n	800388e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0310 	bic.w	r3, r3, #16
 80038ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80038f8:	61fa      	str	r2, [r7, #28]
 80038fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	69b9      	ldr	r1, [r7, #24]
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	617b      	str	r3, [r7, #20]
   return(result);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e3      	bne.n	80038d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003912:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f844 	bl	80039a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800391e:	e023      	b.n	8003968 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003928:	2b00      	cmp	r3, #0
 800392a:	d009      	beq.n	8003940 <HAL_UART_IRQHandler+0x4f4>
 800392c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f8b5 	bl	8003aa8 <UART_Transmit_IT>
    return;
 800393e:	e014      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00e      	beq.n	800396a <HAL_UART_IRQHandler+0x51e>
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f8f4 	bl	8003b46 <UART_EndTransmit_IT>
    return;
 800395e:	e004      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
    return;
 8003960:	bf00      	nop
 8003962:	e002      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
      return;
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
      return;
 8003968:	bf00      	nop
  }
}
 800396a:	37e8      	adds	r7, #232	; 0xe8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039bc:	b480      	push	{r7}
 80039be:	b095      	sub	sp, #84	; 0x54
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	330c      	adds	r3, #12
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	330c      	adds	r3, #12
 80039e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039e4:	643a      	str	r2, [r7, #64]	; 0x40
 80039e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e5      	bne.n	80039c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3314      	adds	r3, #20
 80039fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3314      	adds	r3, #20
 8003a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e5      	bne.n	80039f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d119      	bne.n	8003a68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	330c      	adds	r3, #12
 8003a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f023 0310 	bic.w	r3, r3, #16
 8003a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a54:	61ba      	str	r2, [r7, #24]
 8003a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	6979      	ldr	r1, [r7, #20]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	613b      	str	r3, [r7, #16]
   return(result);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e5      	bne.n	8003a34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a76:	bf00      	nop
 8003a78:	3754      	adds	r7, #84	; 0x54
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f7ff ff7a 	bl	8003994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b21      	cmp	r3, #33	; 0x21
 8003aba:	d13e      	bne.n	8003b3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac4:	d114      	bne.n	8003af0 <UART_Transmit_IT+0x48>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d110      	bne.n	8003af0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ae2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	1c9a      	adds	r2, r3, #2
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	621a      	str	r2, [r3, #32]
 8003aee:	e008      	b.n	8003b02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	1c59      	adds	r1, r3, #1
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6211      	str	r1, [r2, #32]
 8003afa:	781a      	ldrb	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4619      	mov	r1, r3
 8003b10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10f      	bne.n	8003b36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e000      	b.n	8003b3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b3a:	2302      	movs	r3, #2
  }
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff ff02 	bl	8003970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b08c      	sub	sp, #48	; 0x30
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b22      	cmp	r3, #34	; 0x22
 8003b88:	f040 80ae 	bne.w	8003ce8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b94:	d117      	bne.n	8003bc6 <UART_Receive_IT+0x50>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d113      	bne.n	8003bc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	1c9a      	adds	r2, r3, #2
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bc4:	e026      	b.n	8003c14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	d007      	beq.n	8003bea <UART_Receive_IT+0x74>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <UART_Receive_IT+0x82>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	e008      	b.n	8003c0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4619      	mov	r1, r3
 8003c22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d15d      	bne.n	8003ce4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0220 	bic.w	r2, r2, #32
 8003c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d135      	bne.n	8003cda <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	613b      	str	r3, [r7, #16]
   return(result);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f023 0310 	bic.w	r3, r3, #16
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c94:	623a      	str	r2, [r7, #32]
 8003c96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	69f9      	ldr	r1, [r7, #28]
 8003c9a:	6a3a      	ldr	r2, [r7, #32]
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e5      	bne.n	8003c74 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d10a      	bne.n	8003ccc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff fe67 	bl	80039a6 <HAL_UARTEx_RxEventCallback>
 8003cd8:	e002      	b.n	8003ce0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fe51 	bl	8003982 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	e002      	b.n	8003cea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3730      	adds	r7, #48	; 0x30
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d2e:	f023 030c 	bic.w	r3, r3, #12
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2c      	ldr	r2, [pc, #176]	; (8003e08 <UART_SetConfig+0x114>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d103      	bne.n	8003d64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d5c:	f7fe fb96 	bl	800248c <HAL_RCC_GetPCLK2Freq>
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	e002      	b.n	8003d6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d64:	f7fe fb7e 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 8003d68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	009a      	lsls	r2, r3, #2
 8003d74:	441a      	add	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	4a22      	ldr	r2, [pc, #136]	; (8003e0c <UART_SetConfig+0x118>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	0119      	lsls	r1, r3, #4
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009a      	lsls	r2, r3, #2
 8003d94:	441a      	add	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da0:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <UART_SetConfig+0x118>)
 8003da2:	fba3 0302 	umull	r0, r3, r3, r2
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	2064      	movs	r0, #100	; 0x64
 8003daa:	fb00 f303 	mul.w	r3, r0, r3
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	3332      	adds	r3, #50	; 0x32
 8003db4:	4a15      	ldr	r2, [pc, #84]	; (8003e0c <UART_SetConfig+0x118>)
 8003db6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc0:	4419      	add	r1, r3
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	009a      	lsls	r2, r3, #2
 8003dcc:	441a      	add	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <UART_SetConfig+0x118>)
 8003dda:	fba3 0302 	umull	r0, r3, r3, r2
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	2064      	movs	r0, #100	; 0x64
 8003de2:	fb00 f303 	mul.w	r3, r0, r3
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	3332      	adds	r3, #50	; 0x32
 8003dec:	4a07      	ldr	r2, [pc, #28]	; (8003e0c <UART_SetConfig+0x118>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	f003 020f 	and.w	r2, r3, #15
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40013800 	.word	0x40013800
 8003e0c:	51eb851f 	.word	0x51eb851f

08003e10 <__libc_init_array>:
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	2600      	movs	r6, #0
 8003e14:	4d0c      	ldr	r5, [pc, #48]	; (8003e48 <__libc_init_array+0x38>)
 8003e16:	4c0d      	ldr	r4, [pc, #52]	; (8003e4c <__libc_init_array+0x3c>)
 8003e18:	1b64      	subs	r4, r4, r5
 8003e1a:	10a4      	asrs	r4, r4, #2
 8003e1c:	42a6      	cmp	r6, r4
 8003e1e:	d109      	bne.n	8003e34 <__libc_init_array+0x24>
 8003e20:	f000 f822 	bl	8003e68 <_init>
 8003e24:	2600      	movs	r6, #0
 8003e26:	4d0a      	ldr	r5, [pc, #40]	; (8003e50 <__libc_init_array+0x40>)
 8003e28:	4c0a      	ldr	r4, [pc, #40]	; (8003e54 <__libc_init_array+0x44>)
 8003e2a:	1b64      	subs	r4, r4, r5
 8003e2c:	10a4      	asrs	r4, r4, #2
 8003e2e:	42a6      	cmp	r6, r4
 8003e30:	d105      	bne.n	8003e3e <__libc_init_array+0x2e>
 8003e32:	bd70      	pop	{r4, r5, r6, pc}
 8003e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e38:	4798      	blx	r3
 8003e3a:	3601      	adds	r6, #1
 8003e3c:	e7ee      	b.n	8003e1c <__libc_init_array+0xc>
 8003e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e42:	4798      	blx	r3
 8003e44:	3601      	adds	r6, #1
 8003e46:	e7f2      	b.n	8003e2e <__libc_init_array+0x1e>
 8003e48:	08003eac 	.word	0x08003eac
 8003e4c:	08003eac 	.word	0x08003eac
 8003e50:	08003eac 	.word	0x08003eac
 8003e54:	08003eb0 	.word	0x08003eb0

08003e58 <memset>:
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4402      	add	r2, r0
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d100      	bne.n	8003e62 <memset+0xa>
 8003e60:	4770      	bx	lr
 8003e62:	f803 1b01 	strb.w	r1, [r3], #1
 8003e66:	e7f9      	b.n	8003e5c <memset+0x4>

08003e68 <_init>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	bf00      	nop
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr

08003e74 <_fini>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	bf00      	nop
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr
